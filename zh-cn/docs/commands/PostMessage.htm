<!DOCTYPE HTML>
<html>
<head>
<title>PostMessage / SendMessage | AutoHotkey</title>
<meta name="description" content="The PostMessage and SendMessage commands send a message to a window or control (SendMessage additionally waits for acknowledgement)." />
<meta name="description" content="使用这个免费的宏程序发送消息到窗口. PostMessage 把消息放到目标窗口的消息队列中, 但 SendMessage 会等待回复.">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>PostMessage / SendMessage</h1>

<p>发送消息到窗口或控件(SendMessage 还会等待回复).</p>

<pre class="Syntax">
<span class="func">PostMessage</span>, Msg <span class="optional">, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>
<span class="func">SendMessage</span>, Msg <span class="optional">, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText, Timeout</span>
</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>Msg</dt>
  <dd><p>要发送的消息号, 可以为<a href="../Variables.htm#Expressions">表达式</a>. 请参阅<a href="../misc/SendMessageList.htm">消息列表</a>来确定编号.</p></dd>

  <dt>wParam</dt>
  <dd><p>消息的第一个组件, 可以为<a href="../Variables.htm#Expressions">表达式</a>. 如果为空或省略, 则会被设置为 0.</p></dd>

  <dt>lParam</dt>
  <dd><p>消息的第二个组件, 可以为<a href="../Variables.htm#Expressions">表达式</a>. 如果为空或省略, 则会被设置为 0.</p></dd>

  <dt>Control</dt>
  <dd><p>如果此参数为空或省略, 则消息会被直接发送到目标窗口而不是它的某个控件. 或者此参数可以是 ClassNN(控件的类名和实例编号) 或控件的文本, 它们都可以通过 Window Spy 获取. 使用文本时, 匹配行为由 <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a> 决定.</p>
    <p>要对控件的 HWND(窗口句柄) 进行操作, 请将 <em>Control</em> 参数留空同时在 <em>WinTitle</em> 参数中指定 <code>ahk_id %ControlHwnd%</code>(即使在 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 设置关闭时, 这样也可以操作隐藏控件). 获取控件的 HWND 的一般方法是使用 <a href="ControlGet.htm#Hwnd">ControlGet Hwnd</a>, <a href="MouseGetPos.htm">MouseGetPos</a> 或 <a href="DllCall.htm">DllCall()</a>.</p>
    </dd>

  <dt>WinTitle</dt>
  <dd><p>窗口标题或识别目标窗口的其他条件. 请参阅 <a href="../misc/WinTitle.htm">WinTitle</a>.</p></dd>

  <dt>WinText</dt>
  <dd><p>如果使用此参数, 那么它必须是目标窗口中单个文本元素的子字符串(和内置的 Window Spy 工具显示的一样). 当 <a href="DetectHiddenText.htm">DetectHiddenText</a> 的设置为 ON 时, 那么会检测到隐藏文本元素.</p></dd>

  <dt>ExcludeTitle</dt>
  <dd><p>标题中含有此参数值的窗口将被排除.</p></dd>

  <dt>ExcludeText</dt>
  <dd><p>文本中含有此参数值的窗口将被排除.</p></dd>

  <dt>Timeout</dt>
  <dd><p><span class="ver">[AHK_L 42+]:</span> 等待目标窗口处理消息的最大毫秒数. 如果省略, 则默认为 5000(毫秒), 这同时也是不支持此参数的 AutoHotkey 旧版本的默认行为. 如果在这时间内消息没有被处理, 则命令结束并设置 ErrorLevel 为单词 FAIL. 此参数可以为<a href="../Variables.htm#Expressions">表达式</a>.</p></dd>

</dl>

<h2 id="ErrorLevel">ErrorLevel</h2>
<p><span class="ver">[v1.1.04+]</span>: 这两个命令失败时会抛出异常. 想了解更多信息, 请参阅<a href="Catch.htm#RuntimeErrors">运行时错误</a>.</p>
<p>PostMessage: 如果遇到问题(例如目标窗口或控件不存在) 则 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被置为 1. 否则被置为 0.</p>
<p>SendMessage: 如果遇到问题或命令超时, 则 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被设置为单词 FAIL. 否则, 它被设置为此消息的返回值数字, 它可能取决于消息的性质和目标窗口的 "回复".</p>
<p>返回值的取值范围取决于目标窗口和运行的 AutoHotkey 版本. 当使用 32 位的 AutoHotkey, 或者目标窗口是 32 位, 那么返回值是 0 到 4294967295 之间的一个 32 位无符号整数. 当使用 64 位 AutoHotkey 和 64 位的目标窗体, 返回值将是 -9223372036854775808 到 9223372036854775807 之间的一个 64 位有符号整数.</p>
<p>如果返回值预期为一个 32 位有符号整数(-2147483648 到 2147483648 中的某个值), 那么可以将返回值截断为 32 位, 然后像下面这样转换为有符号整数:</p>
<pre>MsgReply := ErrorLevel &lt;&lt; 32 &gt;&gt; 32</pre>
<p>即使在使用 AutoHotkey 64 位时, 这样的转换也可能是必须的, 因为从 32 位窗体返回的值都是零扩展的. 例如, 在任何版本的 AutoHotkey 中, 从一个 32 位窗体返回的 -1 都视为 0xFFFFFFFF , 但在 32 位 AutoHotkey 中接收到从 64 位窗体返回的 -1 视为 0xFFFFFFFF, 而在 64 位 AutoHotkey 中被视为 -1.</p>

<h2 id="Remarks">备注</h2>
<p>应该小心使用这些命令, 因为发送消息到错误的窗口(或发送错误的消息) 可能导致意外的行为或者甚至让目标应用程序崩溃. 这是因为大多数应用程序并不是设计用于从外部来源中接受某些类型的消息.</p>
<p>PostMessage 把消息放置到和目标窗口关联的消息队列中. 它不会等待确认或回应. 与之相比, SendMessage 在到达超时时间前会等待目标窗口处理消息.</p>
<p><em>wParam</em> 和 <em>lParam</em> 必须为整数. 如果 AutoHotkey 或目标窗体为 32 位, 那么只有低 32 位被使用; 也就是说, 值将是 -2147483648 到 4294967295(0xFFFFFFFF) 之间. 如果 AutoHotkey 和目标窗体都是 64 位, 那么 <a href="../Variables.htm#cap">AutoHotkey 支持的</a>任何整数值都可以使用. 与 AutoHotkey 支持的所有整数值一样, 前缀 0x 表示一个十六进制值. 例如, 0xFF 等同于 255.</p>
<p>字符串可以通过 <em>wParam</em> 或 <em>lParam</em> 来传递变量地址(实现传递字符串的效果). 下面的例子演示了通过<a href="../Variables.htm#amp">地址操作符(&amp;)</a> 实现这一效果:</p>
<pre>SendMessage, 0x000C, 0, <strong>&amp;MyVar</strong>, ClassNN, WinTitle  <em>; 0X000C 为 WM_SETTEXT</em></pre>
<p><span class="ver">[v1.0.43.06+]</span>: 由消息的接收者放入 MyVar 的字符串可以正确识别而不需要额外的步骤. 不过, 只有在参数的首个字符为和符号(&amp;) 时才可以; 例如, <code>5+&amp;MyVar</code> 不行, 但 <code>&amp;MyVar</code> 或 <code>&amp;MyVar+5</code> 可以.</p>
<p>引号包围的(原义) 字符串也可以发送, 例如下面这个可运行示例(此时不应该使用 &amp; 运算符):</p>
<pre>Run Notepad
WinWait Untitled - Notepad
SendMessage, 0x000C, 0, <strong>"New Notepad Title"</strong>  <em>; 0x000C 为 WM_SETTEXT</em></pre>
<p>要发送消息到系统中的所有窗口, 包括隐藏或禁用的那些, 请在 <em>WinTitle</em> 中指定 <code>ahk_id 0xFFFF</code>(0xFFFF 为 HWND_BROADCAST). 这种技术应该只用于目标为广播的消息, 例如:</p>
<pre>SendMessage, 0x001A,,,, ahk_id 0xFFFF  <em>; 0x001A 为 WM_SETTINGCHANGE</em></pre>
<p>要让脚本接收消息, 请使用 <a href="OnMessage.htm">OnMessage()</a>.</p>
<p>请参阅<a href="../misc/SendMessage.htm">消息指南</a>来查看使用这些命令的介绍.</p>
<p>窗口标题和文本是区分大小写的. 只有在打开 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 设置时, 才能检测到隐藏窗口.</p>

<h2 id="Related">相关</h2>
<p><a href="../misc/SendMessageList.htm">消息列表</a>, <a href="../misc/SendMessage.htm">消息指南</a>, <a href="OnMessage.htm">OnMessage()</a>, <a href="../misc/Winamp.htm">自动化 Winamp</a>, <a href="DllCall.htm">DllCall()</a>, <a href="ControlSend.htm">ControlSend</a>, <a href="WinMenuSelectItem.htm">WinMenuSelectItem</a></p>
<h2 id="Examples">示例</h2>
<div class="ex" id="ExMonitorPower">
<p><a class="ex_number" href="#ExMonitorPower"></a> 按下热键关闭显示器.</p>
<pre>#o:: <em>; Win+O</em>
Sleep 1000  <em>; 让用户有机会释放按键(以防释放它们时再次唤醒显视器).
; 关闭显示器:</em>
SendMessage, 0x0112, 0xF170, 2,, Program Manager  <em>; 0x0112 是 WM_SYSCOMMAND, 0xF170 是 SC_MONITORPOWER.
; 对上面命令的注释: 使用 -1 代替 2 来打开显示器.
; 使用 1 代替 2 来激活显示器的节能模式.</em>
return</pre>
</div>

<div class="ex" id="ExScreenSave">
<p><a class="ex_number" href="#ExScreenSave"></a> 启动用户选择的屏幕保护程序.</p>
<pre>SendMessage, 0x0112, 0xF140, 0,, Program Manager  <em>; 0x0112 是 WM_SYSCOMMAND, 而 0xF140 是 SC_SCREENSAVE.</em></pre>
</div>

<div class="ex" id="ExVScrollUp">
<p><a class="ex_number" href="#ExVScrollUp"></a> 向上滚动一行(用于含垂直滚动条的控件).</p>
<pre>ControlGetFocus, control, A
SendMessage, 0x0115, 0, 0, %control%, A</pre>
</div>

<div class="ex" id="ExVScrollDown">
<p><a class="ex_number" href="#ExVScrollDown"></a> 向下滚动一行(用于含垂直滚动条的控件).</p>
<pre>ControlGetFocus, control, A
SendMessage, 0x0115, 1, 0, %control%, A</pre>
</div>

<div class="ex" id="ExSwitchKeybLang">
<p><a class="ex_number" href="#ExSwitchKeybLang"></a> 切换活动窗口的键盘布局/语言为英语.</p>
<pre>PostMessage, 0x0050, 0, 0x4090409,, A  <em>; 0x0050 是 WM_INPUTLANGCHANGEREQUEST.</em></pre>
</div>

<div class="ex" id="ExWinamp">
<p><a class="ex_number" href="#ExWinamp"></a> 请求 Winamp 的当前活动的轨道编号(有关详情, 请参阅 <a href="../misc/Winamp.htm">Automating Winamp</a>).</p>
<pre>SetTitleMatchMode, 2
SendMessage, 0x0400, 0, 120,, - Winamp
if (ErrorLevel != "FAIL")
{
    ErrorLevel++  <em>; Winamp 的计数从 "0" 开始, 所以加 1 进行调整.</em>
    MsgBox, Track #%ErrorLevel% is active or playing.
}</pre>
</div>

<div class="ex" id="ExPID">
<p><a class="ex_number" href="#ExPID"></a> 找出 AHK 脚本的进程 ID(另一种方法是 <a href="WinGet.htm">WinGet PID</a>).</p>
<pre>SetTitleMatchMode, 2
DetectHiddenWindows, On
SendMessage, 0x0044, 0x0405, 0, , SomeOtherScript.ahk - AutoHotkey v
MsgBox %ErrorLevel% is the process id.</pre>
</div>

</body>
</html>