<!DOCTYPE HTML>
<html>
<head>
<title>VarSetCapacity() | AutoHotkey</title>
<meta name="description" content="The VarSetCapacity function enlarges a variable's holding capacity or frees its memory, which is only necessary for unusual circumstances such as DllCall()." />
<meta name="ahk:equiv-v2" content="commands/VarSetStrCapacity.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>VarSetCapacity()</h1>

<p>扩展变量的容量或释放其内存. 通常只有在特殊情况下才有必要调用本函数, 如 <a href="DllCall.htm">DllCall()</a>.</p>

<pre class="Syntax">GrantedCapacity := <span class="func">VarSetCapacity</span>(TargetVar <span class="optional">, RequestedCapacity, FillByte</span>)</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>TargetVar</dt>
  <dd><p>变量的引用. 例如: <code>VarSetCapacity(MyVar, 1000)</code>. 这也可以是动态变量, 例如 <code>Array%i%</code> 或是函数的 <a href="../Functions.htm#ByRef">ByRef 参数</a>.</p></dd>

  <dt>RequestedCapacity</dt>
  <dd><p>如果省略, 则函数将返回变量当前的容量且不会改变其的内容. 否则, 变量中的所有内容将会丢弃(变量被置空).</p>
      <p>为 <em>RequestedCapacity</em> 指定调整后变量所能容纳的字节数. 对于 Unicode 字符串, 本参数应设为 ANSI 字符串的两倍(即 x2). 译者注: ANSI 字符串一个英文字母占用一字节, 而中文字每个占用两个字节. <em>RequestedCapacity</em> 无需考虑内部零终止符. 例如, 指定 1 表示修改变量容量为最多可接受一字节字符串的内容加上内部终止符. 注意: AHK 脚本中给变量赋值是自动扩展变量容量大小的, 即使之前用本函数将变量设为一个较小的容量, 也不会影响之后给变量传递更大的值.</p> 
      <p>因此可以经常简单地调用此函数来确保变量占用最小的空间, 考虑到性能原因, 只有在 <em>RequestedCapacity</em> 为 0 时, 才会缩小变量的容量. 换句话说, 如果变量的容量已经大于 <em>RequestedCapacity</em>, 不会减小它的容量(但为了保持一致, 变量会被置空).</p>
      <p>因此, 要明确地缩小变量, 首先请使用 <code>VarSetCapacity(Var, 0)</code> 释放它占用的内存, 然后使用 <code>VarSetCapacity(Var, NewCapacity)</code> 或者简单地让它自动按需从零扩展.</p>
      <p>考虑到性能的原因, 要释放一个原来容量小于 64 字节(在 Unicode 构建中为 128 字节) 的变量可能会没有效果, 因为它的内存是永久类型的. 此时, 会返回当前容量而不是 0.</p>
      <p>考虑到性能的原因, 容量小于 4096 字节的变量的内存不能通过赋值空字符串的方法来释放(例如 <code>Var := ""</code>). 然而, <code>VarSetCapacity(Var, 0)</code> 可释放它.</p>
      <p id="neg1"><span class="ver">[v1.0.44.03+]</span>: 可通过将 <em>RequestedCapacity</em> 设为 -1, 以将变量的内部存储的字符串长度更新为其当前内容的长度. 这个特性在变量被间接修改时特别有用, 例如将变量的<a href="../Variables.htm#amp">地址</a>递给 <a href="DllCall.htm">DllCall()</a>. 在这种模式中, VarSetCapacity() 可返回以字节为单位的实际内容的长度而不是变量的容量. 译者注: 某些 Dll 中的函数返回的变量, 其长度为 0, 直接调用时该变量表现为空值, 需要使用 <code>VarSetCapacity(Var, -1)</code> 将变量长度更新为其当前内容的实际长度.</p></dd>

  <dt>FillByte</dt>
  <dd><p>此参数通常省略, 此时不会对目标变量的内存进行初始化(作为替代, 只是像上面描述的那样简单地把变量置空). 否则, 请指定介于 0 和 255 之间的整数. 目标变量内存区域的每个字节(它的当前容量, 可能大于 <em>RequestedCapacity</em>) 会被设为这个数字. 零显然是最常用的值, 这可用于要在变量中保存原始的二进制数据时, 例如 <a href="DllCall.htm#struct">DllCall 结构</a>.</p></dd>

</dl>

<h2 id="Return_Value">返回值</h2>
<p>该函数返回变量当前可容纳的字节数, 一般来说大于或等于 <em>RequestedCapacity</em>. 如果 <em>TargetVar</em> 不是一个有效的变量名称(比如直接传递字符串值或数字), 则返回数字 0 . 如果发生极其罕见的系统内存不足的情况, 将弹出一个错误提示对话框同时返回当前的容量大小. (以后的版本可能会修改这样的行为).</p>

<h2 id="Remarks">备注</h2>
<p>本函数除了经常用于配合 <a href="DllCall.htm#str">DllCall()</a> 之外, 还可用于逐步构建较大字符串时提升性能. 比如当您能够确定字符串的最终长度时可以避免多次自动调整容量. 在这种情况中, <em>RequestedCapacity</em> 不需要太准确: 如果容量太小, 性能仍然会提升, 而当分配的容量用完时变量会开始自动扩展. 如果容量太大, 会浪费一些内存, 不过只是暂时的, 因为在操作完成后使用 <code>VarSetCapacity(Var, 0)</code> 或 <code>Var := ""</code> 可释放变量占用的内存.</p>
<p><a href="_MaxMem.htm">#MaxMem</a> 仅用于限制变量自动扩容, 而不会影响 <a href="VarSetCapacity.htm">VarSetCapacity</a>.</p>
<h2 id="Related">相关</h2>
<p><a href="DllCall.htm">DllCall()</a>, <a href="_MaxMem.htm">#MaxMem</a>, <a href="NumPut.htm">NumPut()</a>, <a href="NumGet.htm">NumGet()</a></p>
<h2 id="Examples">示例</h2>
<div class="ex" id="ExConcat">
<p><a class="ex_number" href="#ExConcat"></a> 通过赋予 <em>MyVar</em> 充足的内存空间来优化整体性能.</p>
<pre>VarSetCapacity(MyVar, 10240000)  <em>; ~10 MB</em>
Loop
{
    <em>; ...</em>
    MyVar .= StringToConcatenate
    <em>; ...</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a class="ex_number" href="#ExDllCall"></a> 使用一个变量通过 <a href="DllCall.htm">DllCall()</a> 从外部函数来接收一个字符串.</p>
<pre><em>; 计算字符串需要的缓冲空间.</em>
bytes_per_char := A_IsUnicode ? 2 : 1
max_chars := 500
max_bytes := max_chars * bytes_per_char

Loop 2
{
    <em>; 分配用于 DllCall 的空间.</em>
    VarSetCapacity(buf, max_bytes)

    if (A_Index = 1)
        <em>; 通过 DllCall 间接修改变量.</em>
        DllCall("wsprintf", <span class="red">"Ptr", &amp;buf</span>, "Str", "0x%08x", "UInt", 4919)
    else
        <em>; 使用 "str" 来自动更新长度:</em>
        DllCall("wsprintf", <span class="blue">"Str", buf</span>, "Str", "0x%08x", "UInt", 4919)

    <em>; 连接字符串以演示为什么需要更新长度:</em>
    wrong_str := buf . "&lt;end&gt;"
    wrong_len := StrLen(buf)

    <em>; 更新变量的长度.</em>
    VarSetCapacity(buf, -1)

    right_str := buf . "&lt;end&gt;"
    right_len := StrLen(buf)

    MsgBox,
    (
    Before updating
      String: %wrong_str%
      Length: %wrong_len%

    After updating
      String: %right_str%
      Length: %right_len%
    )
}
</pre>
</div>

</body>
</html>