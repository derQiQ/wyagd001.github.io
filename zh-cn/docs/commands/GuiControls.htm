<!DOCTYPE HTML>
<html>
<head>
<title>GUI 控件类型 | AutoHotkey</title>
<meta name="description" content="GUI control types are elements of interaction which can be added to a GUI window using the Gui command." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
<style>
  img {
    margin: 0 1.5em;
    border: 1px solid silver;
  }
</style>
</head>
<body>

<h1><a href="Gui.htm">GUI</a> 控件类型</h1>

<h2>目录</h2>
<ul>
  <li><a href="#Text">Text(文本)</a>, <a href="#Edit">Edit(文本编辑区)</a>, <a href="#UpDown">UpDown(增减按钮组)</a>, <a href="#Picture">Picture(图片)</a></li>
  <li><a href="#Button">Button(按钮)</a>, <a href="#Checkbox">Checkbox(多选按钮)</a>, <a href="#Radio">Radio(单选按钮)</a></li>
  <li><a href="#DropDownList">DropDownList(静态下拉列表)</a>, <a href="#ComboBox">ComboBox(可输入下拉列表)</a></li>
  <li><a href="#ListBox">ListBox(简单列表)</a>, <a href="ListView.htm">ListView(高级表格)</a>, <a href="TreeView.htm">TreeView(树形列表)</a></li>
  <li><a href="#Link">Link(链接)</a>, <a href="#Hotkey">Hotkey(热键)</a>, <a href="#DateTime">DateTime(时间日期选择器)</a></li>
  <li><a href="#MonthCal">MonthCal(月历)</a>, <a href="#Slider">Slider(增减滑条)</a>, <a href="#Progress">Progress(进度条)</a></li>
  <li><a href="#GroupBox">GroupBox(分组框)</a>, <a href="#Tab">Tab3(选项卡)</a>, <a href="#StatusBar">StatusBar(状态栏)</a></li>
  <li><a href="#ActiveX">ActiveX(第三方控件控制器)</a>(例如 Internet Explorer 控件)</li>
  <li><a href="#Custom">Custom(自定义控件)</a></li>
</ul>

<h2 id="Text">Text</h2>
<p>描述: 包含用户不能编辑的无边界文本的区域. 常用来标识其他控件.</p>
<p>例如:</p>
<pre>Gui, Add, Text,, Please enter your name:</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_text.png" alt="Text" />
<p>此时最后一个参数为要显示的字符串. 它可以包含换行符(`n) 来开始新行. 此外, 一个长行可以使用<a href="../Scripts.htm#continuation">延续片段</a>的方法分成较短的几行.</p>
<p>如果 <em>Options</em> 中指定了宽度(W) 而没有指定<a href="Gui.htm#R">行数(R)</a> 或高度(H), 那么在需要时文本将自动换行, 同时自动设置控件的高度.</p>
<p>因为控件的内容是 Gui 命令的最后一个参数, 所以可以直接使用逗号而需要转义. 对于其他所有命令的最后一个参数也是如此.</p>
<p><a href="Gui.htm#label">g-标签</a>例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户点击文本时 <em>MySubroutine</em> 标签会自动运行. 这可以用来模仿带下划线的蓝色超级链接, 如下面的可运行脚本所示:</p>
<pre>Gui, Font, underline
Gui, Add, Text, cBlue gLaunchGoogle, Click here to launch Google.

<em>; 或者可以使用 Link 控件:</em>
Gui, Add, Link,, Click &lt;a href="www.google.com"&gt;here&lt;/a&gt; to launch Google.
Gui, Font, norm
Gui, Show
return

LaunchGoogle:
Run www.google.com
return</pre>
<p>通过检查 <a href="../Variables.htm#GuiEvent">A_GuiEvent</a> 是否包含单词 DoubleClick 可以检测到双击事件.</p>
<p>在文本中使用和符号(&amp;) 可以让其中的某个字母带下划线显示. 例如:</p>
<pre>Gui, Add, Text,, &amp;First Name:
Gui, Add, Edit</pre>
<p>在上述示例中, 字母 F 将被添加下划线, 这允许用户按下<a href="Gui.htm#ShortcutKey">快捷键</a> <kbd>Alt</kbd>+<kbd>F</kbd> 将键盘焦点设置到此文本控件后添加的首个可输入型控件中. 要显示一个原义的和符号, 请指定两个连续的和符号(&amp;&amp;). 要取消控件中和符号的特殊含义, 请在控件的选项中包含 <a href="../misc/Styles.htm#SS_NOPREFIX">0x80</a>.</p>
<p>请参阅<a href="Gui.htm#OtherOptions">常规选项</a>来了解其他选项(例如 <em>Right</em>, <em>Center</em> 和 <em>Hidden</em>). 另请参阅: <a href="Gui.htm#PosSize">控件的位置和大小</a>.</p>

<h2 id="Edit">Edit</h2>
<p>描述: 用户可以输入自由格式的文本区域.</p>
<p>例如:</p>
<pre>Gui, Add, Edit, r9 vMyEdit w135, Text to appear inside the edit control (omit this parameter to start off empty).</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_edit.png" alt="Edit" />
<p>如果控件中有多行的文本, 则它将为多行的. 例如, 在<em>选项</em>中指定 <code>r3</code> 将创建一个拥有后面那些默认属性的 3 行编辑控件: 一个垂直滚动条, 启用自动换行并且捕获的 <kbd>Enter</kbd> 键作为输入的一部分而不触发窗口的<a href="#DefaultButton">默认按钮</a>.</p>
<p>要在多行编辑控件中开始新行, 请在最后一个参数中(内容) 包含单独的换行符(`n) 或回车换行符(`r`n). 这两种方法都会在 Edit 控件中产生原义的 `r`n 对. 然而, 当控件通过 <a href="Gui.htm#Submit">Gui Submit</a> 或 <a href="GuiControlGet.htm">GuiControlGet</a> 把内容保存到其变量时, 文本中的每对 `r`n 总是被转换成单独的换行符(`n). 要把文本写入到文件中, 请参照此例: <code><a href="FileAppend.htm">FileAppend</a>, %MyEdit%, C:\Saved File.txt</code>.</p>
<p>如果控件启用了自动换行(对于多行编辑控件默认是启用的), 那么用户输入时任何自动换行的地方不会产生换行字符(仅 <kbd>Enter</kbd> 键才会).</p>
<p><a href="Gui.htm#label">g-标签</a>例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户或脚本改变控件的内容时 <em>MySubroutine</em> 标签会自动运行.</p>
<p>提示: 要加载一个文本文件的内容到编辑控件中, 请使用 <a href="FileRead.htm">FileRead</a> 和 <a href="GuiControl.htm">GuiControl</a>. 例如:</p>
<pre>Gui, Add, Edit, R20 vMyEdit
FileRead, FileContents, C:\My File.txt
GuiControl,, MyEdit, %FileContents%</pre>

<h3>Edit 选项</h3>
<p>要移除而非添加选项, 请在选项前加上负号:</p>
<p><strong>Limit</strong>: 限制用户的输入在编辑区域的可见宽度内. 另外, 要限制输入指定数目的字符, 请在选项后跟着数字. 例如, <code>Limit10</code> 将允许输入不超过 10 个字符.</p>
<p><strong>Lowercase</strong>: 把用户输入的字符自动转换成小写形式.</p>
<p id="EditMulti"><strong>Multi</strong>: 让控件可以含有多行文本. 然而, 通常没必要指定此选项, 因为它会根据高度(H), <a href="Gui.htm#R">行数(R)</a> 或内容(<em>Text</em>) 自动判断.</p>
<p id="EditNum"><strong>Number</strong>: 阻止用户输入数字以外的其他字符到编辑区域(然而, 还是可能粘贴非数字字符到里面). 强制输入数字的另一种方法是添加 <a href="#UpDown">UpDown</a> 控件到 Edit 控件.</p>
<p><strong>Password</strong>: 通过将用户的输入替代为屏蔽字符来隐藏用户的输入(例如密码). 如果想使用非默认的屏蔽字符, 请在单词 Password 后加上此符号. 例如, <code>Password*</code> 将使用星号而不是黑色圆(项目符号) 作为屏蔽符号, 这是 Windows XP 中的默认屏蔽符号. 注意: 此选项对于多行编辑控件没有效果.</p>
<p><strong>ReadOnly</strong>: 阻止用户改变控件的内容. 不过, 仍然可以滚动, 选择文本或将文本复制到剪贴板.</p>
<p><strong>Tn</strong>: 字母 T 可以用来设置<a href="#EditMulti">多行编辑控件</a>的制表位(因为制表位决定了原义的 TAB 字符跳转的列位置, 所以它们可以把文本格式成列). 如果没有使用字母 T, 则每 32 个对话框单位设置一次制表位(每个对话框单位的宽度由操作系统决定). 如果仅使用一次字母 T, 则每 <strong>n</strong> 个单位设置一次横跨整个控件宽度的制表位. 例如, <code>Gui, Add, Edit, vMyEdit r16 t64</code> 将设置制表位之间的距离为默认的两倍. 要自定义制表位, 请指定字母 T 多次, 例如: <code>Gui, Add, Edit, vMyEdit r16 t8 t16 t32 t64 t128</code>. 在列表中每个绝对的列位置设置一个制表位, 制表位数目最大可达 50 个. 注: 制表位仅用于多行编辑控件.</p>
<p><strong>Uppercase</strong>: 把用户输入的字符自动转换成大写形式.</p>
<p><strong>WantCtrlA</strong> <span class="ver">[v1.0.44+]:</span> 指定 <code>-WantCtrlA</code>(负 WantCtrlA) 阻止用户使用 <kbd>Control</kbd>+<kbd>A</kbd> 来选择编辑控件中所有文本.</p>
<p id="WantReturn"><strong>WantReturn</strong>: 指定 <code>-WantReturn</code>(负 WantReturn) 来阻止多行编辑控件捕获 <kbd>Enter</kbd> 键. 按下 <kbd>Enter</kbd> 键相当于点击了窗口的<a href="#DefaultButton">默认按钮</a>(如果有). 此时用户可以使用 <kbd>Control</kbd>+<kbd>Enter</kbd> 来开始新行.</p>
<p><strong>WantTab</strong>: 使得 <kbd>Tab</kbd> 键击产生制表符而不是导航到下一个控件. 如果没有这个选项, 则在多行编辑控件中用户可以按下 <kbd>Control</kbd>+<kbd>Enter</kbd> 来产生制表符. 注意: <em>WantTab</em> 也可以用于单行编辑控件, 但在 Windows XP 和更低的系统中每个制表符显示为一个空框字符(不过实际保存的是真正的制表符).</p>
<p><strong>Wrap</strong>: 指定 <code>-Wrap</code>(负 wrap) 来关闭多行编辑控件中的自动换行属性. 由于在控件创建后不能改变此样式, 所以需要使用下列方法的其中一个来改变它: 1) <a href="Gui.htm#Destroy">销毁</a>后重新创建窗口和其中的控件; 或 2) 创建两个重叠的编辑控件, 其中一个启用自动换行而另一个禁用. 当前没有使用的那个可以保持空的和/或隐藏.</p>
<p>请参阅<a href="Gui.htm#OtherOptions">常规选项</a>来了解其他选项(例如 <em>Right</em>, <em>Center</em> 和 <em>Hidden</em>). 另请参阅: <a href="Gui.htm#PosSize">控件的位置和大小</a>.</p>
<p><strong>更强大的编辑控件</strong>: HiEdit 是免费, 多选项卡, 支持大文件且消耗很少内存的编辑控件. 它可以编辑文本和二进制文件. 想了解详情和演示, 请参阅 <a href="https://github.com/majkinetor/mm-autohotkey/tree/master/HiEdit">HiEdit on GitHub</a>.</p>

<h2 id="UpDown">UpDown</h2>
<p>描述: 一对箭头组成的按钮, 用户点击后会增加或减少值. 默认情况下, UpDown 控件自动依附于前一个添加的控件上. 这里的前一个控件被称为 UpDown 的 <em>伙伴控件</em>. 最常见的例子是"微调器", UpDown 附加到 <a href="#Edit">Edit 控件</a>.</p>
<p>例如:</p>
<pre>Gui, Add, Edit
Gui, Add, UpDown, vMyUpDown Range1-10, 5</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_updown.png" alt="UpDown" />
<p>在上面的例子中, Edit 控件是 UpDown 的伙伴控件. 每当用户按下了增减按钮的其中一个, Edit 控件中的数字会自动增加或减少.</p>
<p>UpDown 的伙伴控件也可以是 <a href="#Text">Text 控件</a>或 <a href="#ListBox">ListBox</a>. 然而, 由于操作系统的限制, 除了这些以外的其他控件类型(例如 ComboBox 和 DropDownList) 可能无法和 <a href="Gui.htm#label">g-标签</a>以及其他特性一起正常工作.</p>
<p>在最后一个参数中指定 UpDown 的初始位置(如果省略, 则初始为 0 或允许的范围中最接近 0 的数字).</p>
<p>使用 <a href="Gui.htm#Submit">Gui Submit</a> 命令后, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会接收到 UpDown 的当前的数字位置. 如果 UpDown 依附于编辑控件而且您不想确认用户的输入, 此时最好使用 UpDown 的值而不是编辑控件的. 这是因为 UpDown 总是产生一个允许范围内的数字, 即使用户在编辑控件中输入了非数字或超出范围的内容. 相关提示, 默认情况下超过三位的数字会添加<a href="../misc/Styles.htm#UpDownSep">千位分隔符</a>(例如逗号). 这些分隔符保存在编辑控件的输出变量中, 但不在 UpDown 的变量中.</p>
<p>如果 UpDown 含有 <a href="Gui.htm#label">g-标签</a>, 则当用户点击增减按钮的其中一个或按下了键盘上的方向键时它将会运行. 每次运行 g-标签还会保存 UpDown 的位置到其<a href="Gui.htm#var">关联输出变量</a>(如果有).</p>

<h3>UpDown 选项</h3>
<p id="Horz"><strong>Horz(水平)</strong>: 使控件的按钮点指向左/右而不是上/下. 默认情况下, <em>Horz</em> 还会让控件变成孤立的(没有伙伴控件). 通过在控件选项中指定 <code>Horz 16</code> 可以覆盖此特性.</p>
<p><strong>Left</strong>: 把 UpDown 放在其伙伴控件的左边而不是右边.</p>
<p><strong>Range</strong>: 使用 0 到 100 外的其他范围. 在单词 Range 后指定最小值, 破折号和最大值. 例如, <code>Range1-1000</code> 将允许选择一个介于 1 和 1000 之间的数字; <code>Range-50-50</code> 将允许介于 -50 和 50 之间的数字; 而 <code>Range-10--5</code> 将允许介于 -10 和 -5 之间的数字. 交换最小值和最大值可以让箭头往与正常方向相反的方向移动. 最大的允许范围是 -2147483648-2147483647. 最后, 如果伙伴控件为 <a href="#ListBox">ListBox</a>, 那么垂直的默认范围是 32767-0, 而水平的则反向(<a href="#Horz">Horz</a>).</p>
<p><strong>Wrap</strong>: 当用户试图超出最小值或最大值时使得控件返回到其范围的另一端. 如果没有 <em>Wrap</em>, 当达到最小值或最大值时控件会停止.</p>
<p><strong>-16</strong>(负 16): 让垂直的 UpDown 成为孤立的; 即让它没有伙伴控件. 这还可以让控件符合任何指定的宽度, 高度和位置而不是适应于其伙伴控件的大小. 此外, 孤立的 UpDown 会内部跟踪它自己的位置. 使用 <a href="Gui.htm#Submit">Gui Submit</a> 可以正常获取此位置.</p>
<p id="UpDownSep"><strong>0x80</strong>: 在<em>选项</em>中包含 <code>0x80</code> 来省略伙伴控件中正常出现在每三位十进制数间的千位分隔符. 然而, 通常不使用此样式, 因为当脚本从 UpDown 控件(而不是其伙伴控件) 获取的数字中不包含分隔符.</p>
<p><strong>使用 1 以外的其他增量</strong>: 在<a href="http://numeric.nerim.net/AutoHotkey/Scripts/UpDown%20-%20Non-unitary%20increments.ahk">此脚本</a>中, NumEric 演示了如何改变 UpDown 增量为 1 以外的其他值(例如 5 或 0.1).</p>
<p>另请参阅: <a href="Gui.htm#PosSize">控件的位置和大小</a>.</p>

<h2 id="Picture">Picture(或 Pic)</h2>
<p>描述: 包含图像的区域(请参阅最后两段来了解支持的文件类型). 最后一个参数是图像的文件名, 如果未指定绝对路径, 则假定在 <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> 中.</p>
<p>例如:</p>
<pre>Gui, Add, Picture, w300 h-1, C:\My Pictures\Company Logo.gif</pre>
<p>要保持图像的实际宽度和/或高度, 请省略 W 和/或 H 选项. 否则, 缩放图像的尺寸到指定的宽度和/或高度(此宽度和高度也决定了从多图标的 .ICO 文件中加载哪个图标). 要保持高宽比来缩放图像, 请在其中一个尺寸中指定 -1 而在另一个中指定正数. 例如, 指定 <code>w200 h-1</code> 将缩放图像到 200 像素的宽度同时自动设置其高度. 如果图片无法加载或显示(例如找不到文件), 则控件被留空且设置其宽度和高度为零.</p>
<p><a href="Gui.htm#label">g-标签</a>例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户点击图片时 <em>MySubroutine</em> 标签会自动运行. 通过检查 <a href="../Variables.htm#GuiEvent">A_GuiEvent</a> 是否包含单词 DoubleClick 可以检测到双击事件.</p>
<p>要使用图片作为其他控件的背景, 则应该在其他控件之前正常添加图片. 然而, 如果这些控件是可输入型且此图片控件含有 <a href="Gui.htm#label">g-标签</a>, 那么在其他控件后创建图片控件并在其<em>选项</em>中包含 <code>0x4000000</code>(这是 WS_CLIPSIBLINGS). 使用此技巧还可以把一个图片设为 <a href="#Tab">Tab 控件</a>或 <a href="ListView.htm">ListView</a> 的背景.</p>
<p><strong>图标, 光标和动画光标</strong>: 图标和光标可以从下列类型的文件中加载: ICO, CUR, ANI, EXE, DLL, CPL, SCR 以及包含图标资源的其他类型. 要使用文件中的图标组而不是首个图标, 请在 <em>选项</em> 包含单词 Icon 和图标组编号. 在下面的例子中, 将使用第二个图标组中的默认图标: <code>Gui, Add, Picture, Icon2, C:\My Application.exe</code>.</p>
<p id="PicAltSubmit">在 <em>选项</em> 中指定单词 AltSubmit 会让程序使用微软的 GDIPlus.dll 来加载图像, 这可能让 GIF, BMP 和图标图像产生不同的外观. 例如, 它可以把含透明背景的 ICO/GIF 作为透明的位图进行加载, 这样允许 <a href="Gui.htm#BackgroundTrans">BackgroundTrans</a> 选项才生效(不过从 <span class="ver">[v1.1.23+]</span> 开始, 透明图标可以不设置 AltSubmit 选项). 如果 GDIPlus 不可用(请参阅下个段落), 则 AltSubmit 选项会被忽略而使用常规方法加载图像.</p>
<p>在所有的操作系统中都支持 GIF, JPG, BMP, ICO, CUR 和 ANI 图像. 在 Windows XP 或更高版本中, 还支持其他图像格式, 例如 PNG, TIF, Exif, WMF 和 EMF. 比 XP 早的操作系统可以通过复制微软免费的 GDI+ DLL 到 AutoHotkey.exe 文件夹中来提供支持(但如果是<a href="Scripts.htm#ahk2exe">已编译脚本</a>, 则复制此 DLL 到脚本的文件夹). 要下载这个 DLL, 请在 <a href="http://www.microsoft.com">www.microsoft.com</a> 搜索下列短语: gdi redistributable</p>
<p><strong>动态 GIF</strong>: 虽然 GIF 动画文件可以显示在图片控件中, 但实际上它们并不会动起来. 要解决此问题, 请使用 AniGIF DLL(对非商业用途免费), 演示的例子请参阅 <a href="https://www.autohotkey.com/boards/viewtopic.php?t=6457">Autohotkey 论坛</a>. <span class="ver">[v1.1.03+]</span>: 此外, 可以使用 <a href="#ActiveX">ActiveX</a> 控件类型. 例如:</p>
<pre><em>; 指定下面的路径到 GIF 文件以实现动态效果(也允许使用本地文件):</em>
pic := "http://www.animatedgif.net/cartoons/A_5odie_e0.gif"
Gui, Add, ActiveX, w100 h150, % "mshtml:&lt;img src='" pic "' /&gt;"
Gui, Show</pre>
<p><span class="ver">[v1.1.23+]:</span> bitmap(位图) 或 icon(图标) 的 <a href="../misc/ImageHandles.htm"> handle(句柄)</a> 可完全替代文件名使用. 例如, <code>HBITMAP:%handle%</code>.</p>

<h2 id="Button">Button</h2>
<p>描述: 按下后可以触发动作的按钮. 此时最后一个参数为按钮的名称(显示在按钮上), 其中可以包含换行符(`n) 来开始新行.</p>
<p>例如:</p>
<pre>Gui, Add, Button, Default w80, OK</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_button.png" alt="Button" />
<p id="DefaultButton">上面的例子在其 <em>选项</em> 中包含单词 <strong>Default</strong> 来让 "OK" 成为默认按钮. 每当用户按下 <kbd>Enter</kbd> 键时会自动触发默认按钮的动作, 除非此时键盘焦点在另一个按钮上或含有 <a href="#WantReturn">WantReturn</a> 样式的多行编辑控件中. 以后要改变默认按钮为另一个按钮, 请参照此例, 这里让 Cancel 按钮成为默认按钮: <code><a href="GuiControl.htm">GuiControl</a>, +default, Cancel</code>. 以后要让窗口没有默认按钮, 请参照此例: <code>GuiControl, -default, OK</code>.</p>
<p>在按钮名称中使用和符号(&amp;) 可以让其中的某个字母带下划线显示. 例如:</p>
<pre>Gui, Add, Button,, &amp;Pause</pre>
<p>在上述示例中, 字母 P 将被添加下划线, 这允许用户按下 <kbd>Alt</kbd>+<kbd>P</kbd> 作为其<a href="Gui.htm#ShortcutKey">快捷键</a>. 要显示一个原义的和符号, 请指定两个连续的和符号(&amp;&amp;).</p>
<p>如果一个按钮没有明确的 <a href="Gui.htm#label">g-标签</a>, 则使用自动标签. 例如, 如果首个 GUI 窗口包含一个 OK 按钮, 则当按下此按钮时将运行 ButtonOK 标签(如果存在). 对于<a href="Gui.htm#MultiWin">非首个</a> GUI 窗口, 则需要在按钮的自动标签前加上窗口编号; 例如: <code>2ButtonOK</code>.</p>
<p>如果按钮上的文本包含空格或 <strong>&amp;`r`n`t`</strong> 集合中的任意一个字符, 则在其自动标签中会删去这些字符. 例如, 名为 "&amp;Pause" 的按钮其自动标签的名称将为 ButtonPause. 同样地, 名为 "Save &amp;&amp; Exit" 的按钮其自动标签的名称将为 ButtonSaveExit(两个连续的和符号用来显示单个原义的和符号).</p>
<p>已知限制: 某些桌面主题可能无法正确的显示按钮文本. 如果遇到此情况, 请尝试在控件的选项中包含 <code>-Wrap</code>(负 Wrap). 不过这样也使得按钮名称中无法包含多行文本.</p>

<h2 id="Checkbox">Checkbox</h2>
<p>描述: 一个小方框, 可以选中或取消选中来表示 On/Off, Yes/No, 等等.</p>
<p>例如:</p>
<pre>Gui, Add, CheckBox, vShipToBillingAddress, Ship to billing address?</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_check.png" alt="Checkbox" />
<p>最后一个参数是紧跟着方框显示的标注, 这通常是关于复选框用途的提示或描述. 它可以包含换行符(`n) 来开始新行. 如果 <em>选项</em> 中指定了宽度(W) 而没有指定<a href="Gui.htm#R">行数(R)</a> 或高度(H), 那么在需要时控件的文本将自动换行, 同时自动设置控件的高度. 在选中时复选框的<a href="Gui.htm#var">关联输出变量</a>(如果有) 接收到数字 1, 未选中时为 0, 而灰色不确定时为 -1.</p>
<p>在 <em>选项</em> 中指定单词 <strong>Check3</strong> 来启用第三种状态即显示灰色的选择标记而不是黑色的(灰色状态表示复选框既不处于选中状态也不处于未选中状态). 在 <em>选项</em> 中指定单词 <strong>Checked</strong> 或 <strong>CheckedGray</strong> 可以让复选框初始状态分别为黑色选中状态或灰色状态. 单词 Checked 后面可以紧跟着 0, 1 或 -1 来表示初始状态. 换句话说, <code>Checked</code> 和 <code>Checked%VarContainingOne%</code> 是一样的.</p>
<p><a href="Gui.htm#label">g-标签</a>例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户点击或改变复选框时 <em>MySubroutine</em> 标签会自动运行.</p>
<p>已知限制: 某些桌面主题可能无法正确的显示 Checkbox 的文本. 如果遇到此情况, 请尝试在控件的选项中包含 <code>-Wrap</code>(负 Wrap). 不过这样也使得按钮名称中无法包含多行文本.</p>

<h2 id="Radio">Radio</h2>
<p>描述: 单选按钮是一个小空圆, 可以被选中(打开) 或不选中(关闭).</p>
<p>例如:</p>
<pre>Gui, Add, Radio, vMyRadioGroup, Wait for all items to be in stock before shipping.</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_radio.png" alt="Radio" />
<p>此控件经常出现在 <em>单选按钮组</em>, 每组包含两个或多个单选按钮. 当用户点击一个单选按钮来打开它时, 其所在的单选按钮组中其他所有的单选按钮会自动关闭(在单选按钮组中用户也可以使用方向键导航). 在所有连续添加的单选按钮周围会自动创建一个单选按钮组. 要开始一个新组, 请在新组的首个单选按钮的 <em>选项</em> 中指定单词 <strong>Group</strong>, 或者在新组和之前的组之间简单地添加一个非单选按钮控件, 因为这样会自动开始一个新组.</p>
<p>在最后一个参数中指定的标注会显示在单选按钮的右侧. 此标注通常作为提示或描述, 它可以包含换行符(`n) 来开始新行. 如果在 <em>选项</em> 中指定了宽度(W) 而没有指定行数(R) 或高度(H), 那么在需要时控件的文本将自动换行, 同时自动设置控件的高度.</p>
<p>在 <em>选项</em> 中指定单词 <strong>Checked</strong> 来让按钮初始为选中状态. 可以在单词 Checked 后紧跟着 0 或 1 来表示初始状态: 0 表示未选中, 而 1 表示选中. 换句话说, <code>Checked</code> 和 <code>Checked%VarContainingOne%</code> 是一样的.</p>
<p>选中时单选按钮的<a href="Gui.htm#var">关联输出变量</a>(如果有) 接收到数字 1 而未选中时为 0. 但是, 如果单选组中仅有一个按钮含有关联变量, 则此变量将接收当前选择按钮的编号: 首个单选按钮为 1(根据原来的创建顺序), 第二个为 2, 依此类推. 如果没有选择的按钮, 则保存 0.</p>
<p><a href="Gui.htm#label">g-标签</a>例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户选中按钮时 <em>MySubroutine</em> 标签会自动运行. 与之前段落中的单变量模式不同, 这里必须为单选按钮组中每个按钮指定 g-标签, 这样选中某个按钮时相应的标签才会运行. 这样可以灵活地忽略某些按钮的点击. 最后, 通过检查 <a href="../Variables.htm#GuiEvent">A_GuiEvent</a> 是否包含单词 DoubleClick 可以检测到双击事件.</p>
<p>已知限制: 某些桌面主题可能无法正确的显示单选按钮的文本. 如果遇到此情况, 请尝试在控件的选项中包含 <code>-Wrap</code>(负 Wrap). 不过这样也使得按钮名称中无法包含多行文本.</p>

<h2 id="DropDownList">DropDownList(或 DDL)</h2>
<p>描述: 当按下一个小按钮时显示的选择列表. 此时, 最后一个参数是管道分隔的选择列表, 例如 <code>Choice1|Choice2|Choice3</code>.</p>
<p>例如:</p>
<pre>Gui, Add, DropDownList, vColorChoice, Black|White|Red|Green|Blue</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_ddl.png" alt="DDL" />
<p>要在窗口初次出现时预选其中的某项, 请在此项后包含两个管道符(例如 <code>Red|Green||Blue</code>). 或者, 在<em>选项</em>中包含单词 <strong>Choose</strong> 紧跟着想预选的项目的编号. 例如, <code>Choose5</code> 会预选第五项(和其他选项一样, 它也可以为变量, 例如 <code>Choose%Var%</code>). 要在控件创建后改变选择或添加/移除列表中的条目, 请使用 <a href="GuiControl.htm">GuiControl</a>.</p>
<p>在 <em>选项</em> 中指定单词 <strong>Uppercase</strong> 或 <strong>Lowercase</strong> 来把列表中的所有项目自动转换成大写字母或小写字母. 指定单词 <strong>Sort</strong> 来按字母顺序自动排列列表的内容(这也会影响后面通过 <a href="GuiControl.htm">GuiControl</a> 添加的所有项目). Sort 选项还会启用在弹出下拉列表时的增量搜索; 这使得可以通过输入一个项目名称的前几个字符来选择此项.</p>
<p>当使用 <a href="Gui.htm#Submit">Gui Submit</a> 命令后, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会接收到当前选择项目的文本. 但是, 如果控件含有 <a href="Gui.htm#AltSubmit">AltSubmit</a> 属性, 则输出变量将接收到项目的位置编号(首个项目为 1, 第二个为 2, 等等.).</p>
<p><a href="Gui.htm#label">g-标签</a>例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户选择新项目时 <em>MySubroutine</em> 标签会自动运行.</p>
<p>使用 <a href="Gui.htm#R">R 或 H 选项</a>来控制弹出列表的高度. 例如, 指定 <code>R5</code> 会设置列表为 5 行高, 而 <code>H400</code> 会设置选区字段和列表的总高度为 400 像素. 如果同时省略 R 和 H 选项, 则列表会自动扩展到用户桌面的可用高度(但是在早于 Windows XP 的操作系统中默认会显示 3 行).</p>
<p id="ComboBoxHeight">要设置选区字段或列表项的高度, 请使用 <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb775911">CB_SETITEMHEIGHT</a> 消息, 示例如下:</p>
<pre>Gui Add, DDL, vcbx w200 hwndhcbx, One||Two
<em>; CB_SETITEMHEIGHT = 0x153</em>
PostMessage, 0x153, -1, 50,, ahk_id %hcbx%  <em>; 设置选区字段的高度.</em>
PostMessage, 0x153,  0, 50,, ahk_id %hcbx%  <em>; 设置列表项的高度.</em>
Gui Show, h70, Test</pre>
<p>字段间的分隔符可以改变为管道符(|) 外的其他字符. 例如 <code>Gui +<a href="Gui.htm#Delimiter">Delimiter</a>`n</code> 将改变分隔符为换行符而 <code>Gui +DelimiterTab</code> 将改变为 tab(`t).</p>

<h2 id="ComboBox">ComboBox</h2>
<p>描述: 和 DropDownList 一样, 不过还允许输入自由格式的文本作为列表中可选的项目.</p>
<p>例如:</p>
<pre>Gui, Add, ComboBox, vColorChoice, Red|Green|Blue|Black|White</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_combo.png" alt="ComboBox" />
<p>除了可以使用上面描述的所有 DropDownList 选项外, <em>选项</em> 中还可以包含单词 <strong>Limit</strong> 来限制用户的输入在 ComboBox 编辑区域的可见宽度内. 此外, 可以指定单词 <strong>Simple</strong> 来让 ComboBox 表现的像一个下方带有 ListBox 的 Edit 区域.</p>
<p>当使用 <a href="Gui.htm#Submit">Gui Submit</a> 命令后, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会接收到当前选择项目的文本. 但是, 如果控件含有 <a href="Gui.htm#AltSubmit">AltSubmit</a> 属性, 则输出变量将接收到项目的位置编号(首个项目为 1, 第二个为 2, 等等.). 在这两种情况中, 如果没有选择的项目, 则输出变量将被设置为 ComboBox 编辑区域的内容.</p>
<p><a href="Gui.htm#label">g-标签</a>例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户选择新项目时 <em>MySubroutine</em> 标签会自动运行.</p>

<h2 id="ListBox">ListBox</h2>
<p>描述: 一个包含选择列表的较高的框. 此时, 最后一个参数是管道分隔的选择列表, 例如 <code>Choice1|Choice2|Choice3</code>.</p>
<p>例如:</p>
<pre>Gui, Add, ListBox, vColorChoice, Red|Green|Blue|Black|White</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_list.png" alt="ListBox" />
<p id="ChooseLB">要在窗口初次出现时预选其中的某个或某些项目, 请在这些项目中的每个后面包含两个管道符(如果要预选多个项目, 则需要 <a href="#ListBoxMulti">Multi</a> 选项). 或者, 在 <em>选项</em> 中包含单词 <strong>Choose</strong> 紧接着预选的项目的编号. 例如, <code>Choose5</code> 会预选第五项. 要在控件创建后改变选择或添加/移除列表中的条目, 请使用 <a href="GuiControl.htm">GuiControl</a>.</p>
<p>当使用 <a href="Gui.htm#Submit">Gui Submit</a> 命令后, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会接收到当前选择项目的文本. 但是, 如果控件含有 <a href="Gui.htm#AltSubmit">AltSubmit</a> 属性, 则输出变量将接收到项目的位置编号(首个项目为 1, 第二个为 2, 等等).</p>
<p><a href="Gui.htm#label">g-标签</a>例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户选择新项目时 <em>MySubroutine</em> 标签会自动运行. 如果用户双击一个项目, 则内置变量 A_GuiEvent 会包含字符串 DoubleClick 而不是 Normal. 此外, 变量 A_EventInfo 将包含被双击项目的位置(首个项目为 1, 第二个为 2, 等等).</p>
<p id="LBRedraw">当添加大量项目到 ListBox 时, 在操作前使用 <code>GuiControl, -Redraw, MyListBox</code> 并且在操作后使用 <code>GuiControl, +Redraw, MyListBox</code> 也许会提高性能.</p>

<h3>ListBox 选项</h3>
<p><strong>Choose</strong>: 请参阅<a href="#ChooseLB">上面</a>.</p>
<p id="ListBoxMulti"><strong>Multi</strong>: 允许使用 shift-click 和 control-click 同时选择多个项目(如果不希望使用 shift/control-click, 请指定<a href="../misc/Styles.htm#LBS_MULTI">数字 8</a> 代替单词 Multi). 此时, <a href="Gui.htm#Submit">Gui Submit</a> 会保存管道分隔的项目字符串列表到控件的<a href="Gui.htm#var">输出变量</a>. 不过, 如果存在 <a href="Gui.htm#AltSubmit">AltSubmit</a> 选项, 则 <a href="Gui.htm#Submit">Gui Submit</a> 保存管道分隔的项目编号列表. 例如, <code>1|2|3</code> 表示选择了前三个项目. 要提取每个项目, 请使用<a href="LoopParse.htm">解析循环</a>, 例如:</p>
<pre>Loop, Parse, MyListBox, |
{
    MsgBox Selection number %A_Index% is %A_LoopField%.
}</pre>
<p>字段间的分隔符可以改变为管道符(|) 外的其他字符. 例如 <code>Gui +<a href="Gui.htm#Delimiter">Delimiter</a>`n</code> 将改变分隔符为换行符而 <code>Gui +DelimiterTab</code> 将改变为 tab(`t).</p>
<p><strong>ReadOnly</strong>: 对选择的项目不进行高亮显示(但 <a href="Gui.htm#Submit">Gui Submit</a> 仍会保存选择的项目).</p>
<p><strong>Sort</strong>: 按字母顺序自动排列列表的内容(这也会影响后面通过 <a href="GuiControl.htm">GuiControl</a> 添加的所有项目). Sort 选项还会启用增量搜索; 这使得可以通过输入一个项目名称的前几个字符来选择此项.</p>
<p><strong>Tn</strong>: 字母 T 可以用来设置制表位, 它可以把文本格式成列. 如果没有使用字母 T, 则每 32 个对话框单位设置一次制表位(每个对话框单位的宽度由操作系统决定). 如果仅使用一次字母 T, 则每 <strong>n</strong> 个单位设置一次横跨整个控件宽度的制表位. 例如, <code>Gui, Add, ListBox, vMyListBox t64</code> 将设置制表位之间的距离为默认的两倍. 要自定义制表位, 请指定字母 T 多次, 例如: <code>Gui, Add, ListBox, vMyListBox t8 t16 t32 t64 t128</code>. 在列表中每个绝对的列位置设置一个制表位, 制表位数目最大可达 50 个.</p>
<p><strong>0x100</strong>: 在<em>选项</em>中包含 0x100 来打开 LBS_NOINTEGRALHEIGHT 样式. 此选项强制 ListBox 准确符合指定的高度而不是适应于避免在底部的行只显示一部分的高度. 此选项也避免了其字体改变时 ListBox 缩小的情况.</p>
<p>要指定文本的行数(或高度和宽度), 请参阅<a href="Gui.htm#PosSize">控件的位置和大小</a>.</p>

<h2>ListView 和 TreeView</h2>
<p>请参阅 <a href="ListView.htm">ListView</a> 和 <a href="TreeView.htm">TreeView</a> 的单独页面.</p>

<h2 id="Link">Link <span class="ver">[v1.1.06+]</span></h2>
<p>描述: 一个包含可点击链接的文本控件. 链接控件使用类似 HTML 的标记语法, 但只支持 &lt;A&gt; 标签. 在开标签内, 可以以 <code>href="value"</code> 或 <code>id="value"</code> 指定属性.</p>
<p>例如:</p>
<pre>Gui, Add, Link,, This is a &lt;a href="https://www.autohotkey.com"&gt;link&lt;/a&gt;
Gui, Add, Link,, Links may be used anywhere in the text like &lt;a id="A"&gt;this&lt;/a&gt; or &lt;a id="B"&gt;that&lt;/a&gt;</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_link.png" alt="Link" />
<p>如果设置了 href 属性, 并包含一个有效的可执行的命令或 URL, 则它的执行就像是通过 <a href="Run.htm">Run</a> 命令执行一样. 但是, 可执行命令不能包含双引号. URL 通常可以包含百分号的字符, 如 <code>`%22</code>, 但这些都是由用户的 Web 浏览器解释的, 而不是链接控件.</p>
<p>如果控件有 <a href="Gui.htm#label">g-标签</a>, 比如 <code><strong>g</strong>MySubroutine</code>, 点击链接子程序将被启动, 无论链接有没有 href 属性, 或者命令或 URL 执行失败. 这个子程序可以参考以下变量:</p>
<ul>
  <li>A_GuiEvent 包含的事件类型; 目前总是单词 "Normal".</li>
  <li>A_EventInfo 包含链接的一维索引.</li>
  <li>ErrorLevel 包含的链接 href 属性的值, 如果有的话; 否则, 链接的 id 属性的值或空字符串.</li>
</ul>
<p>如果 g-标签是一个函数, 它可以接受以下参数:</p>
<pre class="Syntax"><span class="func">MyFunction</span>(CtrlHwnd, GuiEvent, LinkIndex, HrefOrID)</pre>

<h2 id="Hotkey">Hotkey</h2>
<p>描述: 一个看起来像单行编辑控件的框, 但它接受用户按下的按键组合. 例如, 在英语键盘布局的系统中如果用户按下 <kbd>Control</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd>, 那么此框中将显示 "Ctrl + Alt + C".</p>
<p>例如:</p>
<pre>Gui, Add, Hotkey, vChosenHotkey</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_hotkey.png" alt="Hotkey" />
<p>使用 <a href="Gui.htm#Submit">Gui Submit</a> 命令后, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会接收到热键修饰符和按键名称, 它们与 <a href="Hotkey.htm">Hotkey</a> 命令中的按键名称是一致的. 例如: <code>^!C</code>, <code>+!Home</code>, <code>+^Down</code>, <code>^Numpad1</code>, <code>!NumpadEnd</code>. 如果控件中没有热键, 则输出变量被置空.</p>
<p class="note"><strong>注意</strong>: 一些按键即使它们作为不同的名称获取也显示为相同的名称. 例如, <code>^Numpad7</code> 和 <code>^NumpadHome</code> 都可能显示为 Ctrl + Num 7.</p>
<p>默认情况下, 控件在初始时不含有热键. 要让控件含有默认的热键, 请在最后一个参数中指定热键修饰符和按键名称, 例如: <code>Gui, Add, Hotkey, vChosenHotkey, ^!p</code><br>
支持的修饰符仅包含 ^(Control), !(Alt) 和 +(Shift). 请参阅<a href="../KeyList.htm">按键列表</a>了解可用的按键名称.</p>
<p><a href="Gui.htm#label">g-标签</a>, 例如 <code><strong>g</strong>MySubroutine</code> 可以使用在此控件的选项中. 这使得当用户改变热键时 <em>MySubroutine</em> 标签会自动运行. 每次运行 g-标签还会保存热键到控件的<a href="Gui.htm#var">关联输出变量</a>(如果有).</p>
<p class="note"><strong>注意</strong>: 即使控件中存在不完整的热键时 g-标签也会运行. 例如, 如果用户按住 <kbd>Control</kbd> 键, 则 g-标签会运行一次, 此时输出变量仅包含抑扬符(^). 当用户按完热键后, g-标签会再次运行, 此时输出变量包含完整的热键.</p>
<p>要限制用户可以使用的热键类型, 请在选项中包含单词 <strong>Limit</strong> 接着一个或多个下列数字的和:</p>
<ul>
  <li>1: 阻止不含修饰符的键</li>
  <li>2: 阻止修饰符仅含 <kbd>Shift</kbd> 的键</li>
  <li>4: 阻止修饰符仅含 <kbd>Control</kbd> 的键</li>
  <li>8: 阻止修饰符仅含 <kbd>Alt</kbd> 的键</li>
  <li>16: 阻止修饰符含 <kbd>Shift</kbd>+<kbd>Control</kbd> 的键</li>
  <li>32: 阻止修饰符含 <kbd>Shift</kbd>+<kbd>Alt</kbd> 的键</li>
  <li>64: 不支持这个值(它不会正确执行).</li>
  <li>128: 阻止修饰符含 <kbd>Shift</kbd>+<kbd>Control</kbd>+<kbd>Alt</kbd> 的键.</li>
</ul>
<p>例如, <code>Limit1</code> 将阻止输入不含修饰符的热键(例如字母和数字), 而 <code>Limit15</code> 则要求至少有两个修饰键. 如果用户输入了被禁止的修饰键组合, 则自动使用 <kbd>Control</kbd>+<kbd>Alt</kbd> 组合代替.</p>
<p>Hotkey 控件对热键的支持有限. 例如, 它不支持鼠标/游戏杆热键或 <kbd>Win</kbd> 键(LWin 和 RWin). 解决此问题的一种方法是提供一个或多个 <a href="#Checkbox">checkbox</a> 作为用户启用额外的修饰键(例如 <kbd>Win</kbd> 键) 的工具.</p>

<h2 id="DateTime">DateTime</h2>
<p>描述: 一个看起来像单行编辑控件的框, 不过它接受日期和/或时间. 同时提供下拉日历.</p>
<p>例如:</p>
<pre>Gui, Add, DateTime, vMyDateTime, LongDate</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_datetime.png" alt="DateTime" />
<p id="DateTimeFormat">最后一个参数可以为下列的其中一个:</p>
<p><strong>(省略)</strong>: 省略时, 使用区域设置的短日期格式. 例如, 在某些区域设置中它看起来像这样: 6/1/2005</p>
<p><strong>LongDate</strong>: 使用区域设置的长日期格式. 例如, in 在某些区域设置中它看起来像这样: Wednesday, June 01, 2005</p>
<p><strong>Time</strong>: 仅显示时间, 使用区域设置的时间格式. 尽管不显示日期, 但它仍然存在于控件中并且与 <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> 格式的时间一起被获取. 例如, 在某些区域它看起来像这样: 9:37:45 PM</p>
<p><strong>(自定义格式)</strong>: 指定<a href="FormatTime.htm">日期和时间格式</a>的任意组合. 例如, <code>M/d/yy HH:mm</code> 格式显示的时间看起来像 6/1/05 21:37. 同样, <code>dddd MMMM d, yyyy hh:mm:ss tt</code> 格式显示的时间看起来像 Wednesday June 1, 2005 09:37:45 PM. 想要原义显示的字母和数字应该括在一对单引号中, 例如: <code>'Date:' MM/dd/yy 'Time:' hh:mm:ss tt</code>. 与之相比, 非字母数字字符(例如空格, tab, 斜杠, 冒号, 逗号和其他标点) 不需要包围在单引号中. 例外情况是单引号字符本身: 要产生原义的单引号, 请使用四个连续的单引号(''''), 不过如果它们已经包含在一对外部引号中则仅使用连续的两个就行了.</p>

<h3>DateTime 用法</h3>
<p id="ChooseDT">要预选今天外的其他日期, 请在 <em>选项</em> 中包含单词 <strong>Choose</strong> 紧跟着 YYYYMMDD 格式的日期. 例如, <code>Choose20050531</code> 将预选 May 31, 2005(和其他选项一样, 它还可以为变量, 例如 <code>Choose%Var%</code>). 要不预选日期/时间, 请指定 <strong>ChooseNone</strong>. <em>ChooseNone</em> 还会在控件中创建一个复选框, 只有控件中不含日期则此复选框为未选中状态. 当控件中没有选择日期时, <a href="Gui.htm#Submit">Gui Submit</a> 和 <a href="GuiControlGet.htm">GuiControlGet</a> 会获取到空值(空字符串).</p>
<p>日期的时间部分是可选的. 但是, 当进入或离开控件时, 时间部分必须总是在日期之前. 时间部分的格式为 HH24MISS(小时数, 分钟数, 秒数), 其中 HH24 含义是用 24 小时格式表示; 例如, 09 为 9am, 而 21 为 9pm. 因此, 完整的日期时间字符串的格式应为 <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>.</p>
<p>当指定了 YYYYMMDDHH24MISS 格式的日期时, 只有前导部分是不能缺少的. 其他任何省略的元素将使用下列默认值代替: MM: 月份 01, DD: 日期 01, HH24: 小时 00, MI: 分钟 00, SS: 秒 00.</p>
<p>在下拉日历中, 可以点击底部的今日字符串来选择今天的日期. 此外, 还可以点击年份和月份名称来方便地导航到新的月份或年份.</p>
<p id="DateTime_Keyboard_Navigation">键盘导航: 使用 <kbd>&uarr;</kbd>/<kbd>&darr;</kbd> 方向键, <kbd>+</kbd>/<kbd>-</kbd> 和 <kbd>Home</kbd>/<kbd>End</kbd> 来增加或减少控件的值. 使用 <kbd>&larr;</kbd> 和 <kbd>&rarr;</kbd> 方向键在控件中的区域间移动. 在下拉日历中, 使用方向键在日期间移动; 使用 <kbd>PageUp</kbd>/<kbd>PageDown</kbd> 在月份间往后/往前移动; 使用 <kbd>Ctrl</kbd>+<kbd>PageUp</kbd>/<kbd>PageDown</kbd> 在年份间移动(只在 Win XP 和更早的系统中支持); 使用 <kbd>Home</kbd>/<kbd>End</kbd> 选择当月的第一天/最后一天.</p>
<p>使用 <a href="Gui.htm#Submit">Gui Submit</a> 命令后, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会接收到所选择的 <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> 格式表示的日期和时间. 日期和时间都存在, 不论它们在控件中实际是否可见.</p>
<p>如果控件含有 <a href="Gui.htm#label">g-标签</a>, 则当用户改变日期或时间时此标签会运行. 每次运行时, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会自动更新为当前选择的日期/时间.</p>

<h3>DateTime 选项</h3>
<p><strong>Choose</strong>: 请参阅<a href="#ChooseDT">上面</a>.</p>
<p><strong>Range</strong>: 限制可以选择的日期范围. 在单词 Range 后指定以 YYYYMMDD 格式表示的最小和最大的日期(它们之间使用破折号连接). 例如, <code>Range20050101-20050615</code> 将限制可选择的日期为 5.5 年的前 5 个半月. 最小或最大的日期可以省略, 此时控件中在这个方向上的日期不受限制. 例如, <code>Range20010101</code> 将禁止选择早于 2001 年的日期而 <code>Range-20091231</code>(有前导的破折号) 将禁止选择迟于 2009 年的日期. 如果不含 Range 选项, 则可以选择介于 1601 和 9999 年份之间的任何日期. 无法限制日期的时间部分.</p>
<p><strong>Right</strong>: 让下拉日历在控件的右边而不是左边拉下.</p>
<p><strong>1</strong>: 在<em>选项</em>中指定数字 1 会在此控件的右边提供一个增减控件来修改日期和时间的值, 这会取代其他地方可用的下拉月历的修改按钮. 这不能和上面所述的 LongDate 格式选项联用.</p>
<p id="ChooseNone"><strong>2</strong>: 在 <em>选项</em> 中指定数字 2 在控件中提供复选框, 用户可以取消此复选框选择来表示没有选择日期/时间. 控件创建后无法改变此选项.</p>

<h2 id="MonthCal">MonthCal</h2>
<p>描述: 一个又高又宽的控件, 其中以日历的格式显示一个月中的所有日子. 用户可以选择单个日期或日期范围.</p>
<p>例如:</p>
<pre>Gui, Add, MonthCal, vMyCalendar</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_monthcal.png" alt="MonthCal" />
<p>要预选今天外的其他日期, 请在最后一个参数中指定 YYYYMMDD 格式的日期(例如 <code>20050531</code>). 通过在两个日期间包含破折号可以预选一个日期范围(例如 <code>20050525-20050531</code>).</p>
<p>通常最好忽略 MonthCal 的宽度(W) 和高度(H), 这样它会自动调整大小来准确适应一个月份. 要垂直地显示多个月份, 请<em>选项</em>中指定 <code>R2</code> 或更高. 要水平地显示多个月份, 请指定 <code>W-2</code>(W 负 2) 或更高. 这两个选项可以同时出现, 此时会在两个方向上扩展.</p>
<p>可以点击控件底部的今日字符串来选择今天的日期. 此外, 还可以点击年份和月份名称来方便地选择新的月份或年份.</p>
<p>键盘导航: 在 Windows Vista 及以后版本中, 在 MonthCal 中完全支持键盘导航, 但只有当它具有键盘焦点时才支持. 有关支持的键盘快捷方式, 请参阅<a href="#DateTime_Keyboard_Navigation">DateTime 的键盘导航</a>(带有下拉日历).</p>
<p>使用 <a href="Gui.htm#Submit">Gui Submit</a> 命令后, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会接收到所选择的 YYYYMMDD 格式表示的日期(不带任何时间部分). 但是, 存在<a href="#MonthCalMulti">多选</a>选项时, 会得到以破折号连接的最小和最大日期(例如 <code>20050101-20050108</code>). 在可以多选的日历中如果仅选择单个日期, 则最小和最大日期都会存在但它们是相同的. 可以使用 <a href="StringSplit.htm">StringSplit</a> 把两个日期分离开来. 例如, 后面的命令将把最小日期保存在 Date1 而最大日期保存在 Date2: <code>StringSplit, Date, MyMonthCal, -</code>.</p>
<p>如果 MonthCal 含有<a href="Gui.htm#label">g-标签</a>, 则它每次运行时会更新控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 为当前选择的日期或范围. 默认情况下, 只有当用户更改选择时才会启动标签. 在 Windows XP 和更早的版本中, 由于操作系统的怪癖, 每隔两分钟也会启动标签, 以应对新的一天已经到来这种情况. 但是, 如果控件的 <em>选项</em> 中包含单词 AltSubmit, 则 <a href="Gui.htm#label">g-标签</a>会运行地更频繁, 而内置变量 A_GuiEvent 在改变日期时包含单词 Normal, 点击一个日期时包含数字 1, 而当 MonthCal 释放 "鼠标捕获" 时包含数字 2. 例如, 如果用户双击一个新日期, 则标签会运行五次: 其中一次为 Normal, 两次为 1, 还有两次为 2. 通过<a href="../Variables.htm#TickCount">计算两次数字 1 实例之间的时间间隔</a>可以检测双击.</p>
<p>指定 YYYYMMDD 格式的日期时, MM 和/或 DD 部分可以省略, 此时它们默认为 1. 例如, <code>200205</code> 被视为 20020501, 而 <code>2005</code> 被视为 20050101.</p>

<h3>MonthCal 选项</h3>
<p id="MonthCalMulti"><strong>Multi</strong>: 多选. 允许用户使用 shift-click 或 click-drag 来选择一个连续的日期范围(此时用户仍然可以选择单个日期). 可以明确指定此选项或在创建控件时通过指定一个选择范围的方法来让此选项自动生效. 例如: <code>Gui, Add, MonthCal, vMyCal, 20050101-20050108</code>. 控件创建后无法改变此选项.</p>
<p><strong>Range</strong>: 限制日历中可以选择的时间范围. 在单词 Range 后指定以 YYYYMMDD 格式表示的最小和最大的日期(它们之间使用破折号连接). 例如, <code>Range20050101-20050615</code> 将限制选区为 2005 年的前 5 个半月. 最小或最大的日期可以省略, 此时日历中在这个方向上的日期不受限制. 例如, <code>Range20010101</code> 将禁止选择早于 2001 年的日期而 <code>Range-20091231</code>(有前导的破折号) 将禁止选择迟于 2009 年的日期. 如果不含 Range 选项, 则可以选择介于 1601 和 9999 年份之间的任何日期.</p>
<p><strong>4</strong>: 在 <em>选项</em> 中指定数字 4 来在每行日期的左边显示周数(1-52). Week 1 被定义为至少包含四天的第一周.</p>
<p><strong>8</strong>: 在 <em>选项</em> 中指定数字 8 来禁止控件中当前日期往复循环.</p>
<p><strong>16</strong>: 在 <em>选项</em> 中指定数字 16 来禁止在控件的底部显示今天的日期.</p>

<h2 id="Slider">Slider</h2>
<p>描述: 一个滑动栏, 用户可以让它沿着垂直或水平轨道移动. 滑动栏的一个常见的例子是在任务栏托盘中的标准音量控件.</p>
<p>例如:</p>
<pre>Gui, Add, Slider, vMySlider, 50</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_slider.png" alt="Slider" />
<p>请在最后一个参数中指定滑动栏的初始位置. 如果最后一个参数省略, 则滑动栏初始位置为 0 或允许的范围中最接近 0 的数字.</p>
<p>用户可以通过下列方法滑动控件: 1) 使用鼠标拖拉滑动栏; 2) 用鼠标在滑动栏的轨道区域点击; 3) 当焦点在控件上时转动鼠标滚轮; 或 4) 当焦点在控件上时使用下列键: <kbd>&uarr;</kbd>, <kbd>&rarr;</kbd>, <kbd>&darr;</kbd>, <kbd>&larr;</kbd>, <kbd>PageUp</kbd>, <kbd>PageDown</kbd>, <kbd>Home</kbd> 和 <kbd>End</kbd>.</p>
<p>使用 <a href="Gui.htm#Submit">Gui Submit</a> 命令后, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 会接收到滑动栏当前的数字位置. 每当控件的 <a href="Gui.htm#label">g-标签</a>运行时也会将此位置保存到输出变量中.</p>
<p>如果滑动栏含有 <a href="Gui.htm#label">g-标签</a>, 默认情况下仅当用户停止移动滑块时它才运行(例如在拖拉滑块后释放了鼠标按钮). 但是, 如果控件的 <em>选项</em> 中包含单词 AltSubmit, 则所有滑动栏事件发生时 <a href="Gui.htm#label">g-标签</a>都会运行, 同时内置变量 A_GuiEvent 将包含下列数字或字符串的其中一个:</p>
<ul>
  <li>0: 用户按下了 <kbd>&larr;</kbd> 或 <kbd>&uarr;</kbd> 方向键.</li>
  <li>1: 用户按下了 <kbd>&rarr;</kbd> 或 <kbd>&darr;</kbd> 方向键.</li>
  <li>2: 用户按下了 <kbd>PageUp</kbd> 键.</li>
  <li>3: 用户按下了 <kbd>PageDown</kbd> 键.</li>
  <li>4: 用户用鼠标滚轮移动了滑块或已经把滑块拖放到新的位置.</li>
  <li>5: 用户正用鼠标拖动滑块, 即鼠标按钮当前是按住的.</li>
  <li>6: 用户按下了 <kbd>Home</kbd>  键来移动滑块到左端或顶部.</li>
  <li>7: 用户按下了 <kbd>End</kbd> 键来移动滑块到右端或底部.</li>
  <li>Normal: 用户已经使用鼠标或键盘移动了滑块. 注意: 除了鼠标滚轮移动(#4) 之外, <a href="Gui.htm#label">g-标签</a>将再次为 &quot;normal&quot; 事件启动, 即使它已经由上面的某个数字-事件启动过一次.</li>
</ul>

<h3>Slider 选项</h3>
<p><strong>Buddy1</strong> 和 <strong>Buddy2</strong>: 最多可以指定两个现有的控件来自动定位到滑动条的两侧. Buddy1 显示在左边或顶部(取决于是否存在 Vertical 选项). Buddy2 显示在右侧或底部. 在单词 Buddy1 或 Buddy2 后指定现有控件的<a href="Gui.htm#var">变量名</a>. 例如, <code>Buddy1MyTopText</code> 将分配变量名为 MyTopText 的控件.</p>
<p><strong>Center</strong>: 滑块(用户移动的滑动栏) 两端将是钝的而不指向其中一端.</p>
<p><strong>Invert</strong>: 反转控件, 把较低值作为右边/底端而不是左边/顶端. 此选项常用来让垂直滑动栏在传统的音量控件方向上移动. 注: 下面描述的工具提示选项不会遵循反转, 因此此时不应该使用.</p>
<p><strong>Left</strong>: 滑块(用户移动的滑动栏) 将指向上方而不是下方(原文中为顶端和底端, 这里用上/下放是为了避免和滑动栏的顶端/底端混淆). 但如果存在 Vertical 选项, 则滑块将指向左边而不是右边.</p>
<p><strong>Line</strong>: 指定当用户按下其中一个方向键时要移动位置的数目. 在单词 Line 后指定移动位置的数目. 例如: <code>Line2</code>.</p>
<p><strong>NoTicks</strong>: 不在轨道旁边显示刻度标记.</p>
<p><strong>Page</strong>: 指定当用户按下 <kbd>PageUp</kbd> 或 <kbd>PageDown</kbd> 键时移动位置的数目. 在单词 Page 后指定移动位置的数目. 例如: <code>Page10</code>.</p>
<p><strong>Range</strong>: 使用 0 到 100 外的其他范围. 在单词 Range 后指定最小值, 破折号和最大值. 例如, <code>Range1-1000</code> 将允许选择一个介于 1 和 1000 之间的数字; <code>Range-50-50</code> 将允许介于 -50 和 50 之间的数字; 而 <code>Range-10--10</code> 将允许介于 -10 和 -5 之间的数字.</p>
<p><strong>Thick</strong>: 指定滑块的长度. 在单词 Thick 后指定以像素为单位的厚度(例如 <code>Thick30</code>). 在 Windows XP 或更高版本中, 要超过一定的厚度可能需要指定 Center 选项或移除控件的主题(通过在控件的选项中指定 <code>-Theme</code> 来实现).</p>
<p><strong>TickInterval</strong>: 在轨道旁边指定间隔的位置显示刻度标记. 在单词 TickInterval 后指定间隔来显示附加的刻度标记(如果省略从未设置, 则默认为 1). 例如, <code>TickInterval10</code> 将每隔 10 位置显示一个刻度标记.</p>
<p><strong>ToolTip</strong>: 创建工具提示, 当用户拖动滑动栏时显示它的数字位置. 要让工具提示不显示在默认位置, 请指定下列单词的其中一个代替: <code>ToolTipLeft</code> 或 <code>ToolTipRight</code>(对于水平滑动条); <code>ToolTipTop</code> 或 <code>ToolTipBottom</code>(对于垂直滚动条).</p>
<p><strong>Vertical</strong>: 让控件上下滑动而不是左右滑动.</p>
<p>在控件创建后可以使用 <a href="GuiControl.htm">GuiControl</a> 改变上面的选项.</p>

<h2 id="Progress">Progress</h2>
<p>描述: 一个双彩条, 通常用来指示一个操作接近完成的程度.</p>
<p>例如:</p>
<pre>Gui, Add, Progress, w200 h20 cBlue vMyProgress, 75</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_progress.png" alt="Progress" />
<p>在最后一个参数中指定进度条的初始位置(如果省略, 则进度条的初始位置为 0 或允许的范围中最接近 0 的数字). 之后要改变进度条的位置, 请参照下面的例子, 它们都是操作<a href="Gui.htm#var">关联变量名</a>为 MyProgress 的进度条:</p>
<pre><a href="GuiControl.htm">GuiControl</a>,, MyProgress, +20  <em>; 增加 20 到当前位置.</em>
<a href="GuiControl.htm">GuiControl</a>,, MyProgress, 50  <em>; 设置当前位置为 50.</em></pre>
<p>对于水平进度条, 进度条的厚度等于控件的高度. 对于垂直进度条它等于控件的宽度.</p>

<h3>Progress 选项</h3>
<p><strong>Cn</strong>: 改变进度条的颜色. 指定 <strong>n</strong> 为 16 种 HTML <a href="Progress.htm#colors">基础颜色</a>之一或 6 位的 RGB 颜色值. 例如: <code>cRed</code>, <code>cFFFF33</code>, <code>cDefault</code>. 如果从没有使用过 C 选项(或指定 <code>cDefault</code>, 则使用系统默认的进度条颜色.</p>
<p><strong>BackgroundN</strong>: 改变进度条的背景颜色. 指定 <strong>n</strong> 为 16 种 HTML <a href="Progress.htm#colors">基础颜色</a>之一或 6 位的 RGB 颜色值. 例如: <code>BackgroundGreen</code>, <code>BackgroundFFFF33</code>, <code>BackgroundDefault</code>. 如果从没有使用过 Background 选项(或指定 <code>BackgroundDefault</code>), 则使用窗口的或进度条后<a href="#Tab">选项卡控件</a>的颜色作为背景颜色.</p>
<p><strong>Range</strong>: 使用 0 到 100 外的其他范围. 在单词 Range 后指定最小值, 破折号和最大值. 例如, <code>Range0-1000</code> 将允许一个介于 0 和 1000 之间的数字; <code>Range-50-50</code> 将允许介于 -50 和 50 之间的数字; 而 <code>Range-10--5</code> 将允许介于 -10 和 -5 之间的数字.</p>
<p><strong>Smooth</strong>: 指定 <code>-Smooth</code>(负 Smooth) 显示一段段的长度而不是一个平滑连续的进度条. 指定 <code>-Smooth</code> 也是在 Windows XP 或更高版本中显示含主题的进度条的其中一个要求. 其他的要求是没有使用自定义的颜色, 即同时省略了 C 和 Background 选项.</p>
<p><strong>Vertical</strong>: 让进度条垂直上升或下降而不是水平移动.</p>
<p>在控件创建后可以使用 <a href="GuiControl.htm">GuiControl</a> 改变上面的选项.</p>

<h2 id="GroupBox">GroupBox</h2>
<p>描述: 一个矩形的框, 常用来封装一组相关的控件. 此时最后一个参数为分组框的标题, 其(如果存在) 显示在分组框的左上角.</p>
<p>例如:</p>
<pre>Gui, Add, GroupBox, w200 h100, Geographic Criteria</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_group.png" alt="GroupBox" />
<p>默认情况下, 分组框的标题可以只有一行文本. 在 <em>选项</em> 中指定 <code>Wrap</code> 可以改变此特性.</p>
<p>要指定控件中的行数(或高度和宽度), 请参阅<a href="Gui.htm#PosSize">控件的位置和大小</a>.</p>

<span id="Tab2"></span><h2 id="Tab">Tab3</h2>
<p>描述: 一个包含多个页面的大型控件, 其中每个页面包含其他控件. 从这里开始, 这些页面被称为 "选项卡(标签页)".</p>
<p>选项卡控件有以下三种类型:</p>
<ul>
  <li><strong>Tab3</strong> <span class="ver">[v1.1.23.00+]</span>: 修复若干影响 Tab2 和 Tab 的问题. 各控件位于一个可见的 "tab dialog(标签页对话框)", 其位置和大小随选项卡控件的移动和大小的改变而改变. 选项卡控件使用默认主题.</li>
  <li><strong>Tab2</strong> <span class="ver">[v1.0.47.05+]</span>: 修正了原有 Tab 控件罕见的重绘问题, 但是引入了<a href="#Tab2_Issues">一些其他问题</a>.</li>
  <li><strong>Tab</strong>: 保留向后兼容性, 因为在 Tab2/Tab3 和 Tab 之间有着<a href="#Tab_vs">行为差异</a> .</li>
</ul>
<p>例如:</p>
<pre>Gui, Add, Tab3,, General|View|Settings</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_tab.png" alt="Tab" />
<p id="ChooseTab">上述的最后一个参数是管道分隔的选项卡名称列表. 要在窗口初次出现时预选其中的某个选项卡, 请在它后面包含两个管道符(例如 <code>Red|Green||Blue</code>). 或者, 在<em>选项</em>中包含单词 <strong>Choose</strong> 紧跟着想预选的选项卡的编号. 例如, <code>Choose5</code> 会预选第五个选项卡(和其他选项一样, 它也可以为变量, 例如 <code>Choose%Var%</code>). 要在控件创建后改变选择的选项卡, 请使用 <a href="GuiControl.htm">GuiControl</a>.</p>
<p id="TabCmd">创建选项卡控件后, 随后添加的控件自动属于其首个选项卡. 这可以在任何时候改变, 请参照这些例子:</p>
<pre>Gui, Tab  <em>; 随后的控件不属于任何选项卡控件的一部分.</em>
Gui, Tab, 3  <em>; 随后的控件属于当前选项卡控件的第三个选项卡.</em>
Gui, Tab, 3, 2  <em>; 随后的控件属于第二个选项卡控件的第三个选项卡.</em>
Gui, Tab, Name  <em>; 随后的控件属于名称以 <i>Name</i>(不区分大小写) 开始的选项卡.</em>
Gui, Tab, Name,, Exact  <em>; 与上面相同, 不过这里需要准确匹配(并区分大小写).</em></pre>
<p>还可以使用上面的每个例子分配控件到还不存在的选项卡或选项卡控件(不包括使用 <em>Name</em> 方法的情况). 但在此情况下, 不支持下面描述的相对位置选项.</p>
<p id="Tab_Positioning1"><strong>位置</strong>: 当一个选项卡控件的每个选项卡接收到其首个子控件, 此子控件在下列情况下将具有特殊的默认位置: 1) 同时省略 X 和 Y 坐标, 此时首个子控件放在选项卡控件内部的左上角(带有标准的<a href="Gui.htm#Margin">边距</a>), 而首个子控件后的其他子控件放在之前控件的下面; 2) 指定了 <a href="Gui.htm#PosPlus">X+n 和/或 Y+n </a>位置选项, 此时子控件放在相对于选项卡控件内部的左上角的位置. 例如, 指定 <code>x+10 y+10</code> 会把控件放置在左上角往右和往下各 10 个像素的位置.</p>
<p id="Tab_V"><strong>V</strong>: 当 <a href="Gui.htm#Submit">Gui Submit</a> 命令使用时, 控件的<a href="Gui.htm#var">关联输出变量</a>(如果有) 接收当前选定选项卡的名称. 然而, 如果控件有 <a href="Gui.htm#AltSubmit">AltSubmit</a> 属性, 输出变量将接收选项卡的位置号(第一个选项卡为1, 第二个选项卡为2, 以此类推.).</p>
<p id="Tab_G"><strong>G</strong>: <a href="Gui.htm#label">g-标签</a>(例如 <code><strong>g</strong>MySubroutine</code>) 可以在控件的选项中列出. 这将导致当用户切换到一个新的选项卡时 <em> MySubroutine</em> 标签将自动启动. 如果选项卡控件同时具有 <a href="Gui.htm#label">g-标签</a>和<a href="Gui.htm#var">输出变量</a>, 当用户切换到一个新的选项卡, 输出变量将会设置为先前选中的选项卡名称(或者在具有 <a href="Gui.htm#AltSubmit">AltSubmit</a> 属性时为位置号).</p>
<p id="Tab_Keyboard"><strong>键盘导航</strong>: 用户可以按下 <kbd>Control</kbd>+<kbd>PageDown</kbd>/<kbd>PageUp</kbd> 来在选项卡控件的页面间导航; 如果键盘焦点在不属于选项卡的控件上, 则会导航到窗口的首个选项卡控件. 也可以使用 <kbd>Control</kbd>+<kbd>Tab</kbd> 和 <kbd>Control</kbd>+<kbd>Shift</kbd>+<kbd>Tab</kbd>, 除非当前焦点控件在多行编辑控件中(此时它们不起作用).</p>
<p id="Tab_Limits"><strong>限制</strong>: 每个窗口的选项卡控件不能超过 255 个. 每个选项卡控件不能含有超过 256 个选项卡(页面). 此外, 选项卡控件不能包含其他选项卡控件.</p>

<h3 id="Tab_vs">Tab3 vs. Tab2 vs. Tab</h3>
<p id="Tab_Parent"><strong>父窗口</strong>: 控件的父窗口影响控件的位置和可见性以及 Tab 键的导航顺序. 如果控件添加到已存在的 Tab3 选项卡控件, 其父窗口是 "tab dialog", 该父窗口填充选项卡控件的显示区域. 大部分其他控件, 包括 Tab 或 Tab2 中的子控件, 没有父窗口除了 Gui 界面本身.</p>
<p id="Tab_Positioning"><strong>位置</strong>: 对于 Tab 和 Tab2, 子控件不需要在他们的选项卡控件的边界内: 当标签页是激活或未激活时他们总是会显示和隐藏. 这种行为特别适合下面描述的 &quot;按钮&quot; 样式.</p>
<p>对于 Tab3, 在标签页控件创建之 <em>前</em> 添加子控件的行为与 Tab 或 Tab2 是一致的. 所有其他子控件只在选项卡控件的显示区域内可见.</p>
<p>如果 Tab3 控件移动, 他的子控件也随之移动. Tab 和 Tab2 控件没有这个行为.</p>
<p>在极少数情况下 <a href="WinMove.htm">WinMove</a>(或等效的 DllCall) 用于移动控件, 坐标必须相对于控件的父窗口, 而不是 Gui(参阅<a href="#Tab_Parent">上面的信息</a>). 相比之下, <a href="GuiControl.htm#Move">GuiControl 移动</a>使用 GUI 坐标和 <a href="ControlMove.htm">ControlMove</a> 使用窗口坐标, 这些与控件的父窗口无关.</p>
<p id="Tab_Autosize"><strong>自动尺寸</strong>: 如果脚本没有指定, 在下列情况下 Tab3 控件的宽度 和/或 高度将会自动计算(在控件创建后以先到者为准):</p>
<ul>
  <li>第一次 Tab3 控件不再是当前标签页控件. 这可能是调用了 <a href="#TabCmd">Gui Tab</a>(有或没有参数) 或创建另一个标签页控件所导致的.</li>
  <li>特别的 Gui 首次调用 <a href="Gui.htm#Show">Gui Show</a>.</li>
</ul>
<p>存在的子控件计算尺寸时, 自动调整的尺寸再加上默认边距. 尺寸只计算一次, 即使添加控件也不会重新计算. 如果 Tab3 控件是空的, 与 Tab 或 Tab2 控件相同的默认大小.</p>
<p>Tab 和 Tab2 控件不会自动计算尺寸; 它们接受任意默认大小.</p>
<p id="Tab_TabOrder"><strong>Tab 键导航顺序</strong>: <kbd>Tab</kbd> 键导航顺序通常取决于控件创建的顺序. 当选项卡控件激活时, 顺序也取决于选项卡控件的类型:</p>
<ul>
  <li>Tab 和 Tab2 允许其子控件与其他控件混合.</li>
  <li>Tab2 将标签页按钮置于其子控件之后.</li>
  <li>Tab3 的子控件组合再一起并置于标签页按钮之后.</li>
</ul>
<p id="Tab_Notifs"><strong>通知消息(Tab3)</strong>: 命令和<a href="#Custom">自定义</a>控件通常向他们的<a href="#Tab_Parent">父窗口</a>发送通知消息. Tab3 控件的 <a href="#Tab_Parent">tab dialog</a> 接收到的任何 WM_COMMAND, WM_NOTIFY, WM_VSCROLL, WM_HSCROLL 或 WM_CTLCOLOR 消息转发到 GUI 窗口和能被 <a href="OnMessage.htm">OnMessage()</a> 检测. 如果标签页控件使用主题并且其子控件没有 <a href="Gui.htm#BackgroundTrans">+BackgroundTrans</a> 选项, tab dialog 处理 WM_CTLCOLORSTATIC 消息而不转发. 其他的通知消息(例如自定义消息) 不被支持.</p>
<p id="Tab2_Issues"><strong>Tab2 选项卡控件的已知问题</strong>:</p>
<ul>
  <li><a href="Gui.htm#BackgroundTrans">背景透明度</a>在 Tab2 控件中没有效果.</li>
  <li><a href="#ActiveX">WebBrowser(网页浏览)</a> 控件重绘不正确.</li>
  <li>动态窗口和其他的某些 Win32 API 调用导致其中的控件不显示.</li>
</ul>
<p id="Tab_Issues"><strong>Tab 选项卡控件的已知问题</strong>:</p>
<ul>
  <li>通过单击界面窗口中的某个控件来激活界面窗口, 例如滚动条, 将会出现重绘不正确的情况.</li>
  <li><a href="Gui.htm#BackgroundTrans">背景透明度</a>没有效果如果 Tab 控件包含 ListView 控件.</li>
  <li><a href="#ActiveX">WebBrowser(网页浏览)</a> 控件不可见.</li>
</ul>

<h3>Tab 选项</h3>
<p><strong>Choose</strong>: 请参阅<a href="#ChooseTab">上面</a>.</p>
<p><strong>Background</strong>: 指定 <code>-Background</code>(负 background) 取消<a href="Gui.htm#Color">窗口的自定义背景颜色</a>, 而使用系统默认的选项卡控件的颜色. 指定 <code>+Theme -Background</code> 来让选项卡控件适应于当前桌面主题. 然而, 在这样选项卡控件内的大多数类型的控件看起来会很奇怪, 因为它们的背景颜色不匹配选项卡控件的背景颜色. 对于某些类型的控件(例如 <a href="#Text">Text</a>), 这种情况可以在它们的选项中添加 BackgroundTrans 来修复.</p>
<p><strong>Buttons</strong>: 在控件的顶部创建一系列按钮而不是选项卡(此时在默认情况下将没有边界, 因为显示的区域实际并不包含控件).</p>
<p><strong>Left/Right/Bottom</strong>: 指定这些单词的其中一个让选项卡显示在左边, 右边或底部而不是顶部. 请参阅 <a href="../misc/Styles.htm#TCS_VERTICAL">TCS_VERTICAL</a> 了解对于 Left 和 Right 的限制.</p>
<p><strong>Wrap</strong>: 指定 <code>-Wrap</code>(负 Wrap) 阻止选项卡占用多行(此时为了适应过多的选项卡, 会显示箭头按钮以允许用户滑动来查看更多选项卡).</p>
<p>要指定控件中文本的行数(或高度和宽度), 请参阅<a href="Gui.htm#PosSize">控件的位置和大小</a>.</p>
<p><strong>在选项卡中添加图标</strong>: 通过 <a href="PostMessage.htm">SendMessage</a> 可以在每个选项卡的名称/文本旁边显示图标. 演示的例子请参阅论坛主题 <a href="https://www.autohotkey.com/forum/topic6060.html">Icons in tabs</a>.</p>

<h2 id="StatusBar">StatusBar <span class="ver">[v1.0.44+]</span></h2>
<p>描述: 附加到窗口底部的一行文本和/或图标, 通常用来报告状态的变化.</p>
<p>例如:</p>
<pre>Gui, Add, StatusBar,, Bar's starting text (omit to start off empty).
SB_SetText("There are " . RowCount . " rows selected.")</pre>
<p>外观:</p>
<img src="../static/pics/ctrl_status.png" alt="StatusBar" />
<p>状态栏最简单的用法是每当应该报告给用户一些状态改变时调用 <a href="#SB_SetText">SB_SetText()</a>. 要报告多片的信息, 请使用 <a href="#SB_SetParts">SB_SetParts()</a> 把状态栏分成多段. 要在状态栏中显示图标, 请使用 <a href="#SB_SetIcon">SB_SetIcon()</a>.</p>

<h3 id="StatusBar_Functions">StatusBar 函数</h3>
<p>下列所有的状态栏函数操作于当前线程的<a href="Gui.htm#DefaultWin">默认 GUI 窗口</a>(这可以使用 <code><a href="Gui.htm#Default">Gui, 2:Default</a></code> 进行改变). 如果默认窗口不存在或不含有状态栏, 则所有 SB 函数会返回 0 来表明此问题.</p>

<h4 id="SB_SetText">SB_SetText</h4>
<p>在状态栏指定部分显示 <em>NewText</em>.</p>
<pre class="Syntax"><span class="func">SB_SetText</span>(NewText <span class="optional">, PartNumber, Style</span>)</pre>
<p>如果省略 <em>PartNumber</em>, 则使用默认值 1. 否则, 请指定介于 1 和 256 之间的整数. 如果省略 <em>Style</em>, 则使用默认值 0, 此时使用让状态栏那部分看起来凹陷的传统边界. 否则, 指定 1 为无边框, 2 为带边框, 让状态栏看起来是凸起的. 最后, 在 <em>NewText</em> 中任意地方可以使用最多两个 tab 字符(`t): 在首个 tab 字符右边的任何内容显示在此部分中心, 而在第二个 tab 右边的内容显示为右对齐. SB_SetText() 成功时返回 1, 而失败时为 0.</p>

<h4 id="SB_SetParts">SB_SetParts</h4>
<p>根据指定的宽度(单位为像素) 把状态栏分成多个部分.</p>
<pre class="Syntax"><span class="func">SB_SetParts</span>(<span class="optional">Width1, Width2, ... Width255</span>)</pre>
<p>如果省略所有参数, 则状态栏恢复为只有一个很长的部分. 否则, 指定除了最后一部分外的其他每个部分的宽度(最后一部分将填充状态栏的剩余宽度). 例如, <code>SB_SetParts(50, 50)</code> 将创建三个部分: 前两个部分的宽度都为 50, 而最后一部分占据剩余的所有宽度.</p>
<p class="note"><strong>注意</strong>: SB_SetParts() &quot;删除&quot; 的任何部分下次显示时都不会显示文本(而且它们的图标会自动销毁).</p>
<p>成功后, SB_SetParts() 返回非零值(状态栏的 <a href="ControlGet.htm#Hwnd">HWND</a>). 失败时返回 0.</p>

<h4 id="SB_SetIcon">SB_SetIcon</h4>
<p>在指定部分的文本左边显示一个小图标.</p>
<pre class="Syntax"><span class="func">SB_SetIcon</span>(Filename <span class="optional">, IconNumber, PartNumber</span>)</pre>
<p>如果省略 <em>PartNumber</em>, 则默认为 1. <em>Filename</em> 为图标(.ICO), 光标(.CUR) 或动画光标(.ANI) 文件的名称(动画光标在状态栏上实际将不会动). 图标的其他来源包含下列类型的文件: EXE, DLL, CPL, SCR 以及包含图标资源的其他类型. 要使用文件中第一个以外的图标组, 请为 <em>IconNumber</em> 指定其编号. 例如, <code>SB_SetIcon(&quot;Shell32.dll&quot;, 2)</code> 将使用第二个图标组中的默认图标. 如果 <em>IconNumber</em> 为负数, 则假定其绝对值表示可执行文件中图标的资源 ID. SB_SetIcon() 成功时返回图标的 HICON, 而失败时返回 0. HICON 是一种系统资源, 它可以被大多数脚本安全地忽略, 因为当状态栏的窗口被销毁时它会被自动销毁. 同样, 当 SB_SetIcon() 用新图标替换旧图标时会销毁旧图标. 这种情况可以使用以下方法避免:</p>
<pre>Gui +LastFound
<a href="PostMessage.htm">SendMessage</a>, 0x40F, part_number - 1, my_hIcon, msctls_statusbar321  <em>; 0x40F 为 SB_SETICON.</em></pre>
<p><span class="ver">[v1.1.23+]:</span> <a href="../misc/ImageHandles.htm">icon handle(图标句柄)</a> 可替代文件名. 例如, <code>SB_SetIcon("HICON:" handle)</code>.</p>
<p><span class="ver">[v1.1.27+]:</span> 非图标图片文件和<a href="../misc/ImageHandles.htm">位图句柄</a>是支持替代 <em>文件名</em>. 例如, <code>SB_SetIcon("HBITMAP:" handle)</code>.</p>

<h4 id="SB_SetProgress">SB_SetProgress()</h4>
<p>创建和控制状态栏中的进度条. 此函数可以从 <a href="https://www.autohotkey.com/forum/topic37754.html">www.autohotkey.com/forum/topic37754.html</a> 获取</p>

<h3 id="StatusBar_Usage">StatusBar 的使用</h3>
<p><strong>G-标签通知</strong>: <a href="Gui.htm#label">g-标签</a>(例如 <code><strong>g</strong>MySubroutine</code>) 可以使用在此控件的选项中. 这使得当用户点击状态栏时 <em>MySubroutine</em> 标签会自动运行. 此子程序中可引用内置变量 <a href="../Variables.htm#Gui">A_Gui</a> 和 <a href="../Variables.htm#GuiControl">A_GuiControl</a>. 更重要的是, 它可以参考 <strong>A_GuiEvent</strong>, 其包含下列字符串的其中一个(考虑到和未来版本的兼容性, 脚本不应假定这些字符串是唯一可能的值):</p>
<ul>
  <li><strong>Normal</strong>: 用户左键单击了状态栏. 变量 A_EventInfo 包含目标部分的编号(然而, 如果用户点击状态栏右边靠近大小调整手柄的地方时, 目标部分的编号可能是很大的整数).</li>
  <li><strong>RightClick</strong>: 用户右键单击了状态栏. 变量 A_EventInfo 包含目标部分的编号. 注: 如果状态栏含有 g-标签将不会调用 <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a>. 此外, 当脚本需要知道用户点击的是哪个部分的编号(A_EventInfo) 时, 应该使用 g-标签的 RightClick 事件代替 <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a>.</li>
  <li><strong>DoubleClick</strong>: 用户双击了状态栏. 变量 A_EventInfo 包含目标部分的编号.</li>
  <li><strong>R</strong>: 用户 <em>右键双击</em> 了状态栏. 变量 A_EventInfo 包含目标部分的编号.</li>
</ul>
<p><strong>字体和颜色</strong>: 尽管字体大小, 外观和样式可以使用 <a href="Gui.htm#Font">Gui Font</a> 设置(像普通控件一样), 但是无法改变文本颜色. 而且, 不遵循 <a href="Gui.htm#Color">Gui Color</a> 的颜色设置; 代替的方法是, 状态栏的背景颜色可以通过在<em>选项</em>中指定单词 <strong>Background</strong> 紧跟着颜色名称(请参阅<a href="Progress.htm#colors">颜色图表</a>)或 RGB 值(0x 前缀可以省略)来改变. 例如: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>, <code>BackgroundDefault</code>.</p>
<p><strong>隐藏状态栏</strong>: 创建时, 可以使用 <code>Gui, Add, StatusBar, Hidden vMyStatusBar</code> 隐藏状态栏. 要在创建后某个时候隐藏它, 请使用 <code>GuiControl, Hide, MyStatusBar</code>. 要显示, 请使用 <code>GuiControl, Show, MyStatusBar</code>. 注意: 隐藏状态栏不会降低窗口的高度. 如果希望这样, 一个简便的方法是 <code>Gui, Show, <a href="Gui.htm#AutoSize">AutoSize</a></code>.</p>
<p><strong>样式(很少使用)</strong>: 请参阅<a href="../misc/Styles.htm#StatusBar">状态栏样式表</a>.</p>
<p><strong>已知限制</strong>: 1) 如果某个控件的位置和状态栏重叠, 那么它有可能会被绘制在状态栏的上方. 避免这种情况的一种方法是通过 <a href="Gui.htm#GuiSize">GuiSize 标签</a>动态地缩小这样的控件.2) 每个窗口只允许有一个状态栏控件.</p>
<p><strong>示例</strong>: <a href="TreeView.htm#ExAdvanced">示例 #1</a> 在 TreeView 页面底部演示了一个多部分的状态栏.</p>

<span id="IE_Control"></span><h2 id="ActiveX">ActiveX <span class="ver">[v1.1.03+]</span></h2>
<p>ActiveX 组件(例如 MSIE 浏览器控件) 可以嵌入到 GUI 窗口, 请参照此例:</p>
<pre>Gui Add, ActiveX, w980 h640 vWB, <a href="http://msdn.microsoft.com/en-us/library/aa752085">Shell.Explorer</a>  <em>; 最后一个参数是 ActiveX 组件的名称.</em>
WB.<a href="http://msdn.microsoft.com/en-us/library/aa752093">Navigate</a>("https://www.autohotkey.com/boards/")  <em>; 该句只适用于 web 浏览器控件.</em>
Gui Show</pre>
<p>创建控件时, ActiveX 对象被储存到控件的关联变量中(如果有). 可以使用 <a href="GuiControlGet.htm">GuiControlGet</a> 来获取此对象.</p>
<p>要处理由对象公开的事件, 请使用 <a href="ComObjConnect.htm">ComObjConnect()</a>, 如下所示:</p>
<pre>Gui Add, Edit, w930 r1 vURL, https://www.autohotkey.com/boards/
Gui Add, Button, x+6 yp w44 Default, Go
Gui Add, ActiveX, xm w980 h640 vWB, Shell.Explorer
<strong>ComObjConnect</strong>(WB, WB_events)  <em>; 连接 WB 事件到 WB_events 类对象.</em>
Gui Show
<em>; 继续加载初始页面:</em>
ButtonGo:
Gui Submit, NoHide
WB.Navigate(URL)
return

class WB_events
{
    <a href="http://msdn.microsoft.com/en-us/library/aa768334">NavigateComplete2</a>(wb, NewURL)
    {
        GuiControl,, URL, %NewURL%  <em>; 更新 URL 编辑控件.</em>
    }
}

GuiClose:
ExitApp</pre>
<p><a href="ComObjType.htm">ComObjType()</a> 可以用来判断保存在控件变量中的对象类型.</p>

<h2 id="Custom">Custom <span class="ver">[v1.1.10+]</span></h2>
<p>AutoHotkey 不直接支持的控件还可以嵌入到 GUI 窗口. 要实现这样的操作, 在 <em>Options</em> 中包含单词 <strong>Class</strong> 后跟所需控件的 Win32 类名. 示例:</p>
<pre>Gui, Add, Custom, ClassComboBoxEx32  <em>; 添加 <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb775740.aspx">ComboBoxEx</a> 控件.</em>
Gui, Add, Custom, ClassScintilla  <em>; 添加 <a href="http://scintilla.org/">Scintilla</a> 控件. 注意必须加载 SciLexer.dll 库后才能添加此控件.</em></pre>
<p>AutoHotkey 通过 <a href="Gui.htm#Add">Gui Add</a>, <a href="GuiControl.htm">GuiControl</a> 或 <a href="GuiControlGet.htm">GuiControlGet</a> 使用标准的 Windows 操作方法来获取或替换控件中的文本.</p>
<p><strong>G-标签通知</strong>: 类似 <code><strong>g</strong>MySubroutine</code> 这样的 <a href="Gui.htm#label">g-标签</a>可以使用在控件的选项中, 这样可以捕获控件中的事件. 此子程序中可引用内置变量 <a href="../Variables.htm#Gui">A_Gui</a> 和 <a href="../Variables.htm#GuiControl">A_GuiControl</a>. 更重要的是, 它可以参考 <strong>A_GuiEvent</strong>, 其包含下列字符串的其中一个(考虑到和未来版本的兼容性, 脚本不应假定这些字符串是唯一可能的值):</p>
<ul>
  <li><strong>Normal</strong>: 接收到 <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms647591.aspx">WM_COMMAND</a> 消息. 内置变量 A_EventInfo 包含了控件定义的通告码(相当于 C/C++ 中的 <code>HIWORD(wParam)</code>).</li>
  <li><strong>N</strong>: 接收到 <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb775583.aspx">WM_NOTIFY</a> 消息. 内置变量 A_EventInfo 包含了到控件通知结构体(NMHDR) 的指针. 把它赋值给 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 则可以向控件返回一个 32 位的有符号整型值(默认会把 g-标签线程的 ErrorLevel 设为零). 无效的值被视为零.</li>
</ul>
<p>下面这个例子演示了如何添加 <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb761374.aspx">IP 地址控件</a>:</p>
<pre>Gui, Add, Custom, ClassSysIPAddress32 r1 w150 hwndhIPControl gIPControlEvent
Gui, Add, Button, Default, OK
IPCtrlSetAddress(hIPControl, A_IPAddress1)
Gui, Show
return

GuiClose:
ExitApp

ButtonOK:
Gui, Hide
ToolTip
MsgBox % "You chose " IPCtrlGetAddress(hIPControl)
ExitApp

IPControlEvent:
if (A_GuiEvent = "Normal")
{
    <em>; 接收到 WM_COMMAND.</em>

    if (A_EventInfo = 0x0300)  <em>; EN_CHANGE</em>
        ToolTip Control changed!
}
else if (A_GuiEvent = "N")
{
    <em>; 接收到 WM_NOTIFY.    

	; 获取通告码. 一般情况下这个字段是 UInt 类型, 但 IP 地址
    ; 控件使用负值, 所以为了方便我们把它作为有符号整型读取出来.</em>
    nmhdr_code := NumGet(A_EventInfo + 2*A_PtrSize, &quot;int&quot;)
    if (nmhdr_code != -860)  <em>; IPN_FIELDCHANGED</em>
        return

    <em>; 从 NMIPADDRESS 结构体中提取信息</em>
    iField := NumGet(A_EventInfo + 3*A_PtrSize + 0, &quot;int&quot;)
    iValue := NumGet(A_EventInfo + 3*A_PtrSize + 4, &quot;int&quot;)
    if (iValue &gt;= 0)
        ToolTip Field #%iField% modified: %iValue%
    else
        ToolTip Field #%iField% left empty
}
return

IPCtrlSetAddress(hControl, IPAddress)
{
    static WM_USER := 0x400
    static IPM_SETADDRESS := WM_USER + 101

    <em>; 把 IP 地址打包成 32 位字以用于 SendMessage.</em>
    IPAddrword := 0
    Loop, Parse, IPAddress, .
        ipaddrword := (IPAddrword * 256) + A_LoopField
    SendMessage IPM_SETADDRESS, 0, IPAddrword,, ahk_id %hControl%
}

IPCtrlGetAddress(hControl)
{
    static WM_USER := 0x400
    static IPM_GETADDRESS := WM_USER + 102

    VarSetCapacity(AddrWord, 4)
    SendMessage IPM_GETADDRESS, 0, &amp;addrword,, ahk_id %hControl%
    return NumGet(AddrWord, 3, &quot;UChar&quot;) &quot;.&quot; NumGet(AddrWord, 2, &quot;UChar&quot;) &quot;.&quot; NumGet(AddrWord, 1, &quot;UChar&quot;) &quot;.&quot; NumGet(AddrWord, 0, &quot;UChar&quot;)
}</pre>

<h2>相关页面</h2>
<p><a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Gui.htm">Gui</a>, <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="Menu.htm">Menu</a></p>

</body>
</html>