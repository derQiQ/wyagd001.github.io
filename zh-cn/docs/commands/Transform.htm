<!DOCTYPE HTML>
<html>
<head>
<title>Transform | AutoHotkey</title>
<meta name="description" content="The Transform command performs miscellaneous math functions, bitwise operations, and tasks such as ASCII/Unicode conversion." />
<meta name="ahk:equiv-v2" content="commands/Math.htm" />
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Transform</h1>

<p>执行各种数学计算, 按位运算以及类似 ASCII/Unicode 转换的任务.</p>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用此命令. 有关替代详情, 请参阅下面的子命令部分.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, <a href="#SubCommands">SubCommand</a>, Value1 <span class="optional">, Value2</span></pre>
<p><em>OutputVar</em> 参数是用来保存结果的变量的名称. <em>SubCommand</em>, <em>Value1</em> 和 <em>Value2</em> 参数相互依赖, 它们的用法描述如下.</p>

<h2 id="SubCommands">子命令</h2>
<p>对于 <em>SubCommand</em>, 指定以下命令之一:</p>
<ul>
  <li><a href="#Unicode">Unicode</a>(仅适用于 ANSI 构建): 获取或保存剪贴板上的 Unicode 文本.</li>
  <li><a href="#Deref">Deref</a>: 展开变量引用和包含在其他变量中的转义序列.</li>
  <li><a href="#HTML">HTML</a>: 将指定的字符串转换为其 HTML 等效文本.</li>
  <li><a href="#Asc">Asc</a>: 检索指定字符串中第一个字符的字符码.</li>
  <li><a href="#Chr">Chr</a>: 检索字符码对应的单个字符.</li>
  <li><a href="#Mod">Mod</a>: 检索除法的余数.</li>
  <li><a href="#Exp">Exp</a>: 检索 e 的 <em>N</em> 次幂.</li>
  <li><a href="#Sqrt">Sqrt</a>: 检索一个数字的平方根.</li>
  <li><a href="#Log">Log</a>: 检索一个数字的对数(以 10 为底).</li>
  <li><a href="#Ln">Ln</a>: 检索一个数字的自然对数(以 e 为底).</li>
  <li><a href="#Round">Round</a>: 检索一个数字四舍五入到小数点后 <em>N</em> 位.</li>
  <li><a href="#Ceil">Ceil</a>: 检索一个数字向上到最近的整数.</li>
  <li><a href="#Floor">Floor</a>: 检索一个数字向下到最近的整数.</li>
  <li><a href="#Abs">Abs</a>: 检索一个数字的绝对值.</li>
  <li><a href="#Sin">Sin</a>: 检索一个数字的三角正弦.</li>
  <li><a href="#Cos">Cos</a>: 一个数字的三角余弦.</li>
  <li><a href="#Tan">Tan</a>: 一个数字的三角正切.</li>
  <li><a href="#ASin">ASin</a>: 以弧度为单位检索反正弦值.</li>
  <li><a href="#ACos">ACos</a>: 以弧度为单位检索反余弦.</li>
  <li><a href="#ATan">ATan</a>: 以弧度为单位检索反正切值.</li>
  <li><a href="#Pow">Pow</a>: 检索底数的指数幂.</li>
  <li><a href="#BitNot">BitNot</a>: 检索一个数字按位取反后的结果.</li>
  <li><a href="#BitAnd">BitAnd</a>: 检索指定数字按位与运算后的结果.</li>
  <li><a href="#BitOr">BitOr</a>: 检索指定数字按位或的结果.</li>
  <li><a href="#BitXOr">BitXOr</a>: 检索指定数字按位异或的结果.</li>
  <li><a href="#BitShiftLeft">BitShiftLeft</a>: 检索将数字向左移动 <em>N</em> 位的结果.</li>
  <li><a href="#BitShiftRight">BitShiftRight</a>: 检索将数字向右移动 <em>N</em> 位的结果.</li>
</ul>

<h3 id="Unicode">Unicode</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 使用 Unicode 版本的 AutoHotkey 代替.</p>
<p>获取或保存剪贴板上的 Unicode 文本(仅适用于 ANSI 构建).</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Unicode <span class="optional">, String</span></pre>
<p>注: 使用 <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> 的方法可以保存和恢复整个剪贴板的内容, 这样可以在不丢失剪贴板原始内容情况下使用这个子命令去操作.</p>
<p>此子命令的两种操作模式举例如下:</p>
<pre>Transform, OutputVar, Unicode  <em>; 获取剪贴板中的 Unicode 文本为 UTF-8 字符串.</em>
Transform, Clipboard, Unicode, %MyUTF_String%  <em>; 把 Unicode 文本放到剪贴板中.</em></pre>
<p>在上面的第二个例子中, 可以随意使用原义的 UTF-8 字符串代替 <code>%MyUTF_String%</code>.</p>
<p>使用热键(例如下面这个) 来得到与指定的 Unicode 字符串相应的 UTF-8 字符串:</p>
<pre>^!u::  <em>; Control+Alt+U 热键.</em>
MsgBox Copy some Unicode text onto the clipboard, then return to this window and press OK to continue.
Transform, ClipUTF, Unicode
Clipboard := "Transform, Clipboard, Unicode, %ClipUTF%`r`n"
MsgBox The clipboard now contains the following line that you can paste into your script. When executed, this line will cause the original Unicode string you copied to be placed onto the clipboard:`n`n%Clipboard%
return</pre>
<p class="note"><strong>注:</strong> <code><a href="Send.htm#sendu">Send {U+nnnn}</a></code> 命令是生成 Unicode 字符的一种备用方法.</p>

<h3 id="Deref">Deref</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 使用<a href="../Language.htm#expressions">表达式语法</a>自定义函数如 <a href="RegExMatch.htm#ExDeref">Deref()</a> 代替.</p>
<p>展开变量引用和包含在其他变量中的<a href="../misc/EscapeChar.htm">转义序列</a>.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Deref, String</pre>
<p>任何糟糕格式的变量引用在展开时会被忽略. 如果将 <em>OutputVar</em> 展开为它自身, 情况也是如此; 换句话说, 在 <em>String</em> 变量中任何对 <em>OutputVar</em> 的引用在展开时会被忽略(但请注意 <em>String</em> <strong>本身</strong>可以是 <code>%OutputVar%</code>). 在<a href="../Functions.htm">函数</a>内, <em>String</em> 中的每个变量总是被解析为局部变量, 只有在变量不存在时, 它才会解析为全局变量(如果全局变量也没有则为空).</p>
<p>在下面的例子中, 如果 Var1 包含字符串 "test" 而 Var2 包含<strong>原义</strong>的字符串 "%Var1%", <em>OutputVar</em> 会被赋值为字符串 "test".</p>
<pre>
Var1 := "test"
Var2 := "%Var1%"
Transform, OutputVar, Deref, %Var2%  <em>; OutputVar 为 test.</em>
Var3 := "%Var2%"
Transform, Out, Deref, %Var3%  <em>; Out 为 %Var1%.</em>
Transform, Out, Deref, %Out%  <em>; Out 为 test.</em>
Transform, Var1, Deref, %Var2%  <em>;对 Var1 的引用被忽略, Var1 设为空.</em>
</pre>

<h3 id="HTML">HTML</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 使用诸如 <a href="../scripts/index.htm#HTML_Entities_Encoding">EncodeHTML()</a> 这样的自定义函数来代替.</p>
<p>通过转换字符为其 ASCII 值, 值超过 127 转换为他们的 HTML 名称, 将 <em>String</em> 转换为它的 HTML 等效字符(例如 <code>&pound;</code> 变为 <code>&amp;pound;</code>).</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, HTML, String <span class="optional">, Flags</span></pre>
<p>此外, 这四个字符 <code>"&amp;&lt;&gt;</code> 依次被转换为 <code>&amp;quot;&amp;amp;&amp;lt;&amp;gt;</code>. 最后, 每个换行符(<code>`n</code>) 被转换为 <code>&lt;br&gt;`n</code>(即 <code>&lt;br&gt;</code> 后面跟着一个换行符). 忽略 <em>Flags</em> 参数.</p>
<p><strong>Unicode 版可执行文件:</strong> 除了上述的功能外, <em>Flags</em> 可以是下列值. 如果省略, 则它默认为 1.</p>
<ul>
<li>0: 不转换</li>
<li>1: 把某些字符转换成命名表示法. 例如, <code>&euro;</code> 被转换成 <code>&amp;euro;</code></li>
<li>2: 把某些字符转换成编号表示法. 例如, <code>&#8364;</code> 被转换成 <code>&amp;#8364;</code></li>
<li>3(1+2): 仅影响非 ASCII 字符. 仅在命名表示法不可用的情况下才使用编号表示法. 后面的这些字符总是需要转换: <code>"&amp;&lt;&gt;</code> 和 <code>`n</code>(换行符).</li>
</ul>

<h3 id="Asc">Asc</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Asc.htm">Asc()</a>.</p>
<p>检索 <em>String</em> 中第一个字符的字符码(一个介于 1 到 255 之间的数字, 或在 Unicode 版本中为 1 到 65535).</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Asc, String</pre>
<p>如果 <em>String</em> 为空, 则 <em>OutputVar</em> 也会被置空. 例如: <code>Transform, OutputVar, Asc, %VarContainingString%</code>. 还可以使用 <a href="Ord.htm">Ord()</a>, 用于支持 Unicode 补充字符集.</p>

<h3 id="Chr">Chr</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Chr.htm">Chr()</a>.</p>
<p>检索字符码 <em>Number</em> 对应的单个字符.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Chr, Number</pre>
<p>如果 <em>Number</em> 不是 1 到 255(或在 Unicode 版本中的 1 到 65535) 之间的数字, <em>OutputVar</em> 会被置空来表明此问题. 例如: <code>Transform, OutputVar, Chr, 130</code>. 不同于 <a href="Chr.htm">Chr()</a>, 这个子命令不支持 Unicode 补充字符集(字符码为 0x10000 到 0x10FFFF).</p>

<h3 id="Mod">Mod</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Mod">Mod()</a>.</p>
<p>检索 <em>Dividend</em>(被除数) 除以 <em>Divisor</em>(除数) 的余数.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Mod, Dividend, Divisor</pre>
<p>如果 <em>Divisor</em> 为零, <em>OutputVar</em> 被置空. <em>Dividend</em> 和 <em>Divisor</em> 都可以为小数. 如果 <em>Divisor</em> 为负数, 那么在计算中会被视为正数处理(即除数总是正的). 在下面的例子中, 结果是 2: <code>Transform, OutputVar, Mod, 5, 3</code>.</p>

<h3 id="Exp">Exp</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Exp">Exp()</a>.</p>
<p>检索 e(它的近似值为 2.71828182845905) 的 <em>N</em> 次幂.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Exp, N</pre>
<p><em>N</em> 可以为负数也可以为小数.</p>

<h3 id="Sqrt">Sqrt</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Sqrt">Sqrt()</a>.</p>
<p>检索 <em>Number</em> 的平方根.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Sqrt, Number</pre>
<p>如果 <em>Number</em> 为负数, 则 <em>OutputVar</em> 会被置空.</p>

<h3 id="Log">Log</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Log">Log()</a>.</p>
<p>检索 <em>Number</em> 的对数(以 10 为底).</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Log, Number</pre>
<p>如果 <em>Number</em> 为负数, 则 <em>OutputVar</em> 会被置空.</p>

<h3 id="Ln">Ln</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Ln">Ln()</a>.</p>
<p>检索 <em>Number</em> 的自然对数(以 e 为底).</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Ln, Number</pre>
<p>如果 <em>Number</em> 为负数, 则 <em>OutputVar</em> 会被置空.</p>

<h3 id="Round">Round</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Round">Round()</a>.</p>
<p>检索 <em>Number</em> 四舍五入到第 <em>N</em> 个小数位.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Round, Number <span class="optional">, N</span></pre>
<p>如果 <em>N</em> 省略, 则 <em>OutputVar</em> 会被设置为 <em>Number</em> 四舍五入后最接近的整数. 如果 <em>N</em> 是正数, 则 <em>Number</em> 将四舍五入到小数点后 <em>N</em> 位. 如果 <em>N</em> 是负数, 则 <em>Number</em> 四舍五入到小数点左边第 <em>N</em> 位. 例如, -1 表示四舍五入到个位, -2 表示四舍五入到十位, 而 -3 表示取整到百位. 注: 当小数四舍五入时, Round 子命令不会移除末尾的零. 例如, 12.333 四舍五入 1 个小数位变成 12.300000. 可以在操作之前使用类似 <code><a href="SetFormat.htm">SetFormat</a>, Float, 0.1</code> 的命令来改变这种行为(事实上, 使用 <a href="SetFormat.htm">SetFormat</a> 后, 可能就不再需要使用 Round 子命令了).</p>

<h3 id="Ceil">Ceil</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Ceil">Ceil()</a>.</p>
<p><em>Number</em> 向上取整.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Ceil, Number</pre>

<h3 id="Floor">Floor</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Floor">Floor()</a>.</p>
<p><em>Number</em> 向下取整.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Floor, Number</pre>

<h3 id="Abs">Abs</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Abs">Abs()</a>.</p>
<p>检索 <em>Number</em> 的绝对值.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Abs, Number</pre>
<p>这是通过移除 <em>Number</em> 前面的负号(破折号)(如果有) 来计算的.</p>

<h3 id="Sin">Sin</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Sin">Sin()</a>.</p>
<p>检索 <em>Number</em> 的三角正弦.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Sin, Number</pre>
<p><em>Number</em> 必须用弧度表示.</p>

<h3 id="Cos">Cos</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Cos">Cos()</a>.</p>
<p>检索 <em>Number</em> 的三角余弦.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Cos, Number</pre>
<p><em>Number</em> 必须用弧度表示.</p>

<h3 id="Tan">Tan</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#Tan">Tan()</a>.</p>
<p>检索 <em>Number</em> 的三角正切.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Tan, Number</pre>
<p><em>Number</em> 必须用弧度表示.</p>

<h3 id="ASin">ASin</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#ASin">ASin()</a>.</p>
<p>检索反正弦(单位: 弧度)(<em>Number</em> 是它的正弦, 译者注: sin(arcsin0.5)=0.5, arcsin(sin(pi/6))=pi/6).</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, ASin, Number</pre>
<p>如果 <em>Number</em> 小于 -1 或大于 1, <em>OutputVar</em> 会被置空.</p>

<h3 id="ACos">ACos</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#ACos">ACos()</a>.</p>
<p>检索反余弦(单位: 弧度)(<em>Number</em> 是它的余弦).</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, ACos, Number</pre>
<p>如果 <em>Number</em> 小于 -1 或大于 1, <em>OutputVar</em> 会被置空.</p>

<h3 id="ATan">ATan</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="Math.htm#ATan">ATan()</a>.</p>
<p>检索反正切(单位: 弧度)(它的正切是 <em>Number</em>).</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, ATan, Number</pre>

<h3 id="Pow">Pow</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="../Variables.htm#pow"><code>**</code> 运算符</a>.</p>
<p>检索 <em>Base</em>(底数) 的 <em>Exponent</em>(指数) 次幂.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, Pow, Base, Exponent</pre>
<p><em>Base</em> 和 <em>Exponent</em> 都可以为小数. 如果 <em>Exponent</em> 为负数, 那么即使  <em>Base</em> 和 <em>Exponent</em> 都是整数, <em>OutputVar</em> 也会被格式化为浮点数. 不支持 <em>Base</em> 为负数且 <em>Exponent</em> 为小数如 1.5; 它会使得 <em>OutputVar</em> 被置空.</p>

<h3 id="BitNot">BitNot</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="../Variables.htm#unary"><code>~</code> 运算符</a>.</p>
<p>检索 <em>Number</em> 按位取反后的结果.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, BitNot, Number</pre>
<p>在计算之前, 浮点值被截断为整数. 如果 <em>Number</em> 介于 0 和 4294967295(0xffffffff) 之间, 那么它会被视为<strong>无符号的</strong> 32 位值. 否则, 它被视为<strong>有符号的</strong> 64 位值. 后面的例子结果为 0xfffff0f0(4294963440): <code>Transform, OutputVar, BitNot, 0xf0f</code>.</p>

<h3 id="BitAnd">BitAnd</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="../Variables.htm#bitwise"><code>&amp;</code> 运算符</a>.</p>
<p>检索 <em>Number1</em> 和 <em>Number2</em> 按位与运算后的结果.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, BitAnd, Number1, Number2</pre>
<p>在计算之前, 浮点值被截断为整数. 在下面的例子中, 结果为 0xff00(65280): <code>Transform, OutputVar, BitAnd, 0xff0f, 0xfff0</code>.</p>

<h3 id="BitOr">BitOr</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="../Variables.htm#bitwise"><code>|</code> 运算符</a>.</p>
<p>检索 <em>Number1</em> 和 <em>Number2</em> 按位或的结果.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, BitOr, Number1, Number2</pre>
<p>在计算之前, 浮点值被截断为整数. 在下面的例子中, 结果为 0xf0f0(61680): <code>Transform, OutputVar, BitOr, 0xf000, 0x00f0</code>.</p>

<h3 id="BitXOr">BitXOr</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="../Variables.htm#bitwise"><code>^</code> 运算符</a>.</p>
<p>检索 <em>Number1</em> 和 <em>Number2</em> 按位异或的结果.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, BitXOr, Number1, Number2</pre>
<p>在计算之前, 浮点值被截断为整数. 在下面的例子中, 结果为 0xff00(65280): <code>Transform, OutputVar, BitXOr, 0xf00f, 0x0f0f</code>.</p>

<h3 id="BitShiftLeft">BitShiftLeft</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="../Variables.htm#bitwise"><code>&lt;&lt;</code> 运算符</a>.</p>
<p>检索将数字 <em>Number</em> 向左移动 <em>N</em> 位的结果.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, BitShiftLeft, Number, N</pre>
<p>这相当于把数字 <em>Number</em> 乘以 "2 的 <em>N</em> 次方". 在计算之前, 浮点值被截断为整数. 在下面的例子中, 结果为 8: <code>Transform, OutputVar, BitShiftLeft, 1, 3</code>.</p>

<h3 id="BitShiftRight">BitShiftRight</h3>
<p class="warning"><strong>过时的:</strong> 不推荐在新脚本中使用. 请使用 <a href="../Variables.htm#bitwise"><code>&gt;&gt;</code> 运算符</a>.</p>
<p>检索 <em>Number</em> 向右移动 <em>N</em> 位的结果.</p>
<pre class="Syntax"><span class="func">Transform</span>, OutputVar, BitShiftRight, Number, N</pre>
<p>这相当于将数字 <em>Number</em> 除以 "2 的 <em>N</em> 次方", 截除余数. 在计算之前, 浮点值被截断为整数. 在下面的例子中, 结果为 2: <code>Transform, OutputVar, BitShiftRight, 17, 3</code>.</p>

<div id="ToCodePage">
  <h3 id="FromCodePage">FromCodePage / ToCodePage</h3>
  <p><span class="ver">[AHK_L 54+]</span>: 已移除. 请使用 <a href="StrPut.htm">StrPut</a>/<a href="StrGet.htm">StrGet</a>.</p>
</div>

<h2 id="Remarks">备注</h2>
 <p>子命令接受数字参数, 也可以在它们的参数中使用<a href="../Variables.htm#Expressions">表达式</a>.</p>
<p>如果其中一个参数是浮点数, 那么下面的子命令将检索一个浮点数, 而不是一个整数: <a href="#Mod">Mod</a>, <a href="#Pow">Pow</a>, <a href="#Round">Round</a> 和 <a href="#Abs">Abs</a>. 检索的小数位数由 <a href="SetFormat.htm">SetFormat</a> 确定.</p>
 <p>要将弧度转换成角度, 请将它乘以 180/pi(约为 57.29578). 要将角度转换成弧度, 请将其乘以 pi/180(约为 0.01745329252).</p>
 <p>pi 的值(约为 3.141592653589793) 为 1 的反正切值的 4 倍.</p>

<h2 id="Related">相关</h2>
<p><a href="Math.htm">Math 函数</a>, <a href="SetFormat.htm">SetFormat</a>, <a href="../Variables.htm#Expressions">表达式</a>, <a href="../Variables.htm#Operators">运算符</a>, <a href="StringLower.htm">StringLower</a>, <a href="IfIs.htm">if var is type</a></p>

<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 检索字母 A 的 ASCII 码, 并将其存储在 <var>OutputVar</var>.</p>
<pre>Transform, OutputVar, Asc, A</pre>
</div>

</body>
</html>