<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>脚本编译器指令 | AutoHotkey</title>
<meta name="description" content="Script compiler directives allow the user to specify details of how a script is to be compiled via Ahk2Exe." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>
<h1>脚本编译器指令 <span class="ver">[v1.1.33+]</span></h1>
<h2 id="toc">目录</h2>
<ul>
  <li><a href="#Intro1">介绍</a></li>
  <li><a href="#IgnoreKeep">控制脚本行为的指令</a>:</li>
  <ul>
    <li><a href="#IgnoreKeep">IgnoreBegin</a></li>
    <li><a href="#IgnoreKeep">IgnoreEnd</a></li>
    <li><a href="#IgnoreKeep">IgnoreKeep</a></li>
  </ul>
  <li><a href="#Directives">控制可执行文件元数据的指令</a>:</li>
  <ul>
    <li><a href="#Intro2">介绍</a></li>
    <li><a href="#AddResource">AddResource</a>: 为 .exe 添加一个资源.</li>
    <li><a href="#Bin">Bin / Base</a> <span class="ver">[v1.1.33.10+]</span>: 指定 AutoHotkey 的二进制版本.</li>
    <li><a href="#ConsoleApp">ConsoleApp</a>: 设置 Console 模式.</li>
    <li><a href="#Cont">Cont</a>: 指定指令的延续行.</li>
    <li><a href="#Debug">Debug</a>: 显示指令的调试文本.</li>
    <li><a href="#ExeName">ExeName</a>: 指定 .exe 的位置和名称.</li>
    <li><a href="#Let">Let</a>: 设置一个用户变量.</li>
    <li><a href="#Obey">Obey</a>: 执行一个命令或表达式.</li>
    <li><a href="#PostExec">PostExec</a>: 编译后运行程序.</li>
    <li><a href="#ResourceID">ResourceID</a> <span class="ver">[v1.1.34+]</span>: 为主脚本指定一个非标准的资源 ID.</li>
    <li><a href="#SetMainIcon">SetMainIcon</a>: 设置主图标.</li>
    <li><a href="#SetProp">Set<i>Prop</i></a>: 设置 .exe 的一个属性.</li>
    <li><a href="#Set">Set</a>: 设置各种属性.</li>
    <li><a href="#UpdateManifest">UpdateManifest</a>: 更改 .exe 的 manifest.</li>
    <li><a href="#UseResourceLang">UseResourceLang</a>: 更改资源语言.</li>
  </ul>
</ul>
<h2 id="Intro1">介绍</h2>
<p>脚本编译器指令允许用户指定如何通过 <a href="../Scripts.htm#ahk2exe">Ahk2Exe</a> 编译脚本的细节. 其中一些特点是:</p>
<ul>
  <li>能够改变版本信息(如名称, 描述, 版本...).</li>
  <li>能够为编译后的脚本添加资源.</li>
  <li>能够调整编译的一些选项.</li>
  <li>能够从编译后的脚本中删除代码部分.</li>
</ul>
<p>脚本编译器在源代码中寻找特殊的注释, 并将其识别为编译器指令. 所有的编译器指令都是由字符串 <code>@Ahk2Exe-</code> 引入的, 前面有注释标志(通常为 <code>;</code>).</p>

<h2 id="IgnoreKeep">控制脚本行为的指令</h2>
<p>可以通过包装它们在指令中, 从编译后的脚本中删除代码片段:</p>
<pre class="NoIndent">MsgBox This message appears in both the compiled and uncompiled script
<em>;@Ahk2Exe-IgnoreBegin</em>
MsgBox This message does NOT appear in the compiled script
<em>;@Ahk2Exe-IgnoreEnd</em>
MsgBox This message appears in both the compiled and uncompiled script
</pre>
<p>反过来说也是可以的, 即标记代码片段只在编译后的脚本中执行:</p>
<pre class="NoIndent"><em>/*@Ahk2Exe-Keep
MsgBox This message appears only in the compiled script
*/</em>
MsgBox This message appears in both the compiled and uncompiled script
</pre>
<p>这比 <a href="../Variables.htm#IsCompiled">A_IsCompiled</a> 的优势在于, 在预处理过程中, 代码被完全从编译脚本中移除, 从而使编译脚本更小. 反之亦然: 不需要检查 <a href="../Variables.htm#IsCompiled">A_IsCompiled</a> 因为代码在未编译的脚本中的注释块中.</p>

<h2 id="Directives">控制可执行程序元数据的指令</h2>
<h3 id="Intro2">介绍</h3>
<p>在这些指令的参数中, 支持以下转义序列: <code>``</code>, <code>`,</code>, <code>`n</code>, <code>`r</code> 和 <code>`t</code>. <em>无论</em> 参数的位置如何, 都需要对逗号进行转义. "Integer" 是指无符号的 16 位整数(0..0xFFFF).</p>

<p>如果需要, 指令参数可以通过使用 <code>%</code>(百分号) 括住变量名来引用以下标准内置变量列表:</p>
<p id="group1"><strong>组 1:</strong> <a href="../Variables.htm#AhkPath">A_AhkPath</a>, <a href="../Variables.htm#AppData">A_AppData</a>, <a href="../Variables.htm#AppDataCommon">A_AppDataCommon</a>, <a href="../Variables.htm#ComputerName">A_ComputerName</a>, <a href="../Variables.htm#ComSpec">A_ComSpec</a>, <a href="../Variables.htm#Desktop">A_Desktop</a>, <a href="../Variables.htm#DesktopCommon">A_DesktopCommon</a>, <a href="../Variables.htm#MyDocuments">A_MyDocuments</a>, <a href="../Variables.htm#ProgramFiles">A_ProgramFiles</a>, <a href="../Variables.htm#Programs">A_Programs</a>, <a href="../Variables.htm#ProgramsCommon">A_ProgramsCommon</a>, <a href="../Variables.htm#ScriptDir">A_ScriptDir</a>, <a href="../Variables.htm#ScriptFullPath">A_ScriptFullPath</a>, <a href="../Variables.htm#ScriptName">A_ScriptName</a>, <a href="../Variables.htm#Space">A_Space</a>, <a href="../Variables.htm#StartMenu">A_StartMenu</a>, <a href="../Variables.htm#StartMenuCommon">A_StartMenuCommon</a>, <a href="../Variables.htm#Startup">A_Startup</a>, <a href="../Variables.htm#StartupCommon">A_StartupCommon</a>, <a href="../Variables.htm#Tab">A_Tab</a>, <a href="../Variables.htm#Temp">A_Temp</a>, <a href="../Variables.htm#UserName">A_UserName</a>, <a href="../Variables.htm#WinDir">A_WinDir</a>.</p>

<p><strong>组 2:</strong> <a href="../Variables.htm#AhkVersion">A_AhkVersion</a>, <a href="../Variables.htm#IsCompiled">A_IsCompiled</a>, <a href="../Variables.htm#IsUnicode">A_IsUnicode</a>, <a href="../Variables.htm#PtrSize">A_PtrSize</a>.</p>

<p id="WorkFileName">除了这些变量名之外, 特殊变量 <strong>A_WorkFileName</strong> 还保存着处理后的 .exe 文件的临时名称. 这可以用来将文件名作为参数传递给任何需要访问生成的 .exe 文件的 <a href="#PostExec">PostExec</a> 指令.</p>

<p id="PriorLine">另外, 特殊变量 <strong>A_PriorLine</strong> 包含了紧接当前编译器指令之前的源代码行. 只忽略中间的空白行和注释, 以及任何中间的编译器指令行. 这个变量可以用来从脚本源代码中 "提取" 常量信息, 并在以后的编译器指令中使用它. 一个例子是访问脚本的版本号, 因为它可能会经常改变. 以这种方式访问版本号, 意味着在源代码中只需要更改一次, 更改的内容会被复制到必要的指令中. (有关详情, 请参阅下面的 RegEx 示例.)</p>

<p>同样, 也可以使用下面描述的 <a href="#Let">Let</a> 和 <a href="#Obey">Obey</a> 指令, 创建格式为 <code>U_<i>Name</i></code> 的特殊用户变量.</p>

<p>除了可用于指令参数外, 所有的变量都可以从任何 RT_MENU, RT_DIALOG, RT_STRING, RT_ACCELERATORS, RT_HTML 和 RT_MANIFEST 文件中访问, 提供给下面的 <a href="#AddResource">AddResource</a> 指令.</p>

<p>如果需要, 从上述变量返回的值可以通过在内置变量名称结尾, 结束 <code>%</code> 的前面, 包括最多 2 个参数(称为 p2 和 p3) 来进行操作, 所有参数都用波浪号 <code>~</code> 分隔. 在 <a href="../commands/RegExReplace.htm">RegExReplace</a> 函数的第 2 个和第 3 个参数中, p2 和 p3 参数将作为原义使用, 以操作返回的值. (请参阅 <a href="RegEx-QuickRef.htm">正则快速参考</a>.) 请注意, p3 是可选的.</p>

<p>要在 p2 或 p3 中包含波浪号作为数据, 在其前面加上重音符, 即 <code>`~</code>. 要在 p2 或 p3 中包含重音符作为数据, 请将其加倍, 即 <code>``</code>.</p>

<strong>RegEx 示例:</strong>
<ul>
  <li>
    <pre class="NoIndent">%A_ScriptName~\.[^\.]+$~.exe%</pre>
    <p>这将替换扩展名加上前面的句号, 在实际的脚本名称中用 <code>.exe</code> 替换.<br>(<code>\.[^\.]+$~.exe</code> 表示扫描 <code>.</code> 后面跟着 1 或多个非-<code>.</code> 字符并后面跟着结束字符, 并将其替换为 <code>.exe</code>)</p>
  </li>
  <li>
    <p>假设有源代码行中有两个编译器指令, 如下所示:</p>
    <pre>CodeVersion := "1.2.3.4", company := "My Company"</pre>
    <pre>;@Ahk2Exe-Let U_version = %A_PriorLine~U)^(.+"){1}(.+)".*$~$2%</pre>
    <pre>;@Ahk2Exe-Let U_company = %A_PriorLine~U)^(.+"){3}(.+)".*$~$2%</pre>
    <p>这些指令将版本号 <code>1.2.3.4</code> 复制到特殊变量 <code>U_version</code>, 将公司名称 <code>My Company</code> 复制到特殊变量 <code>U_company</code> 中, 供后面其他指令使用.<br>
    (第一个正则表达式中的 <code>{1}</code> 在第二个正则表达式中改为 <code>{3}</code> 以便在第三个 <code>"</code> 之后选择提取公司名称.)</p>
  </li>
</ul>
<p><strong>其他示例:</strong> 其他的工作示例可以从<a href="https://github.com/AutoHotkey/Ahk2Exe/releases/tag/DemoCode_1">这里</a>下载和检查.</p>

<h3 id="AddResource">AddResource</h3>
<p>将资源添加到已编译的可执行文件中. (另请参阅下面的 <a href="#UseResourceLang">UseResourceLang</a>)</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-AddResource</span> FileName <span class="optional">, ResourceName</span></pre>
<dl>
  <dt>FileName</dt>
  <dd>要添加的资源的文件名. 资源的类型(作为整数或字符串) 可以通过附加一个星号显式指定: <code>*type Filename</code>. 如果省略, Ahk2Exe 会根据文件扩展名自动检测类型.</dd>
  <dt>ResourceName</dt>
  <dd><i>(可选)</i> 资源将具有的名称(可以为整数或字符串). 如果省略, 则默认为文件的名称(没有路径), 大写.</dd>
</dl>
<p>下面是缺省情况下触发它们的通用标准资源类型和扩展的列表.</p>
<ul>
  <li>2 (RT_BITMAP): <code>.bmp</code>, <code>.dib</code></li>
  <li>4 (RT_MENU)</li>
  <li>5 (RT_DIALOG)</li>
  <li>6 (RT_STRING)</li>
  <li>9 (RT_ACCELERATORS)</li>
  <li>10 (RT_RCDATA): 每一个其他的扩展名.</li>
  <li>11 (RT_MESSAGETABLE)</li>
  <li>12 (RT_GROUP_CURSOR): <code>.cur</code> (尚未支持)</li>
  <li>14 (RT_GROUP_ICON): <code>.ico</code></li>
  <li>23 (RT_HTML): <code>.htm</code>, <code>.html</code>, <code>.mht</code></li>
  <li>24 (RT_MANIFEST): <code>.manifest</code>. 如果没有指定资源的名称, 则默认为 <code>1</code></li>
</ul>
<p><strong>示例 1:</strong> 替换标准图标(除<a href="#SetMainIcon">主图标</a>外):</p>
<pre>;@Ahk2Exe-AddResource Icon1.ico, 160  ; 替换掉 '蓝色 H'
;@Ahk2Exe-AddResource Icon2.ico, 206  ; 替换掉 '绿色 S'
;@Ahk2Exe-AddResource Icon3.ico, 207  ; 替换掉 '红色 H'
;@Ahk2Exe-AddResource Icon4.ico, 208  ; 替换掉 '红色 S'</pre>

<p><strong>示例 2:</strong> <span class="ver">[v1.1.34+]</span> 要把另一个脚本作为单独的 RCDATA 资源包括在内(请参阅 <a href="../Program.htm#embedded-scripts">嵌入式脚本</a>):</p>
<pre>;@Ahk2Exe-AddResource MyScript.ahk, MYRESOURCE</pre>

<h3 id="Bin">Bin / Base <span class="ver">[v1.1.33.10+]</span></h3>
<p>指定用于生成 .exe 文件的 AutoHotkey 的基础版本. 这个指令可以被 GUI 或 CLI 中指定的基文件参数所覆盖. 如果有必要, 这个指令可以被多次指定, 但只能在最顶层的脚本文件中指定(也就是说, 不能在 <a href="../commands/_Include.htm">#Include</a> 文件中). 编译器将为每个发现的 Bin/Base 指令至少运行一次. (如果要在这个指令上附加一个实际的注释, 必须使用 <code>&nbsp;;</code> 标志. 要想真正注释这个指令, 请在第一个注释标志后插入一个空格.)</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Bin </span> [Path\]Name <span class="optional">, [Exe_path\][Name], Codepage</span> <em>; Deprecated</em>
<span class="func">;@Ahk2Exe-Base</span> [Path\]Name <span class="optional">, [Exe_path\][Name], Codepage</span> <em>; <span class="ver">[v1.1.33.10+]</span></em></pre>
<dl>
  <dt>[Path\]Name</dt>
  <dd>要使用的 *.bin 文件或在 <span class="ver">[v1.1.33.10+]</span> 中的 *.exe 文件. 如果没有提供扩展名, 则假定为 <code>.bin</code>. 可以为 <em>Name</em> 指定一个 DOS 掩码, 例如 <code>ANSI*</code>, <code>Unicode 32*</code>, <code>Unicode 64*</code> 或为这三种掩码指定 <code>*bit</code>. 如果没有指定路径, 则会搜索编译器文件夹中的标准 *.bin 或 *.exe 文件. 编译器将为每个匹配的 *.bin 文件运行. 任何内置变量替换的使用都必须是来自上述的<a href="#group1">组 1</a>.</dd>
  <dt>[Exe_path\][Name]</dt>
  <dd><i>(可选)</i> 要给 .exe 的文件名. 任何提供的扩展名都将被替换为 <code>.exe</code>. 如果没有指定路径, 则会在脚本文件夹中创建 .exe 文件. 如果没有指定名称, .exe 将使用默认名称. (这个参数可以被 <a href="#ExeName">ExeName</a> 指令覆盖.)</dd>
  <dt>Codepage</dt>
  <dd><i>(可选)</i> 覆盖用于处理脚本文件的默认<a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">代码页</a>. (脚本应该以 Unicode 字节顺序标记(BOM) 开始, 因此不需要使用这个参数.)</dd>
</dl>

<h3 id="ConsoleApp">ConsoleApp</h3>
<p>将可执行子系统更改为控制台模式.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-ConsoleApp</span></pre>

<h3 id="Cont">Cont</h3>
<p>指定前指令的延续行. 这允许格式化一个长行指令, 以便在源代码中容易读取.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Cont</span> Text</pre>
<dl>
  <dt>Text</dt>
  <dd>在处理前一个指令行之前, 附加到该指令行的文本. 文本开始于 <code>Cont</code> 关键字后面的单个空格之后.</dd>
</dl>

<h3 id="Debug">Debug</h3>
<p>显示带有支持文本的消息框, 用于调试.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Debug</span> Text</pre>
<dl>
  <dt>Text</dt>
  <dd>要显示的文本. 在 <code>%</code> 符号之间包含的任何特殊变量, 请参阅 (manipulated) 内容.</dd>
</dl>

<h3 id="ExeName">ExeName</h3>
<p>指定生成的 .exe 文件的位置和名称.(另请参阅 <a href="#Bin">Base</a> 指令.) 这个指令可以被 GUI 或 CLI 中指定的输出文件覆盖.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-ExeName</span> [Path\][Name]</pre>
<dl>
  <dt>[Path\][Name]</dt>
  <dd>.exe 文件的名称. 任何提供的扩展名都将被替换为 <code>.exe</code>. 如果没有指定路径, .exe 将在脚本文件夹中创建. 如果没有指定名称, .exe 将使用默认名称.</dd>
</dl>
<strong>示例:</strong>
<pre>;@Ahk2Exe-Obey U_bits, = %A_PtrSize% * 8
;@Ahk2Exe-Obey U_type, = "%A_IsUnicode%" ? "Unicode" : "ANSI"
;@Ahk2Exe-ExeName %A_ScriptName~\.[^\.]+$%_%U_type%_%U_bits%</pre>

<h3 id="Let">Let</h3>
<p>创建(或修改) 一个或多个用户变量, 这些变量可以通过 <code>%U_<i>Name</i>%</code> 来访问, 类似于内置变量(见上文).</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Let</span> Name = Value <span class="optional">, Name = Value, ...</span></pre>
<dl>
  <dt>Name</dt>
  <dd>变量的名称(带或不带前缀 <code>U_</code>).</dd>
  <dt>Value</dt>
  <dd>要使用的值.</dd>
</dl>

<h3 id="Obey">Obey</h3>
<p>执行独立于 AutoHotkey 的命令或表达式, 结果为 <code>U_<i>Name</i></code>.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Obey</span> Name, CmdOrExp <span class="optional">, Extra</span></pre>
<dl>
  <dt>Name</dt>
  <dd>要接收结果的变量名称(带或不带前缀 <code>U_</code>).</dd>
  <dt>CmdOrExp</dt>
  <dd>
    <p>要执行的命令或表达式.</p>
    <p><strong>Command</strong> 格式必须使用 <em>Name</em> 作为输出变量(通常是第一个参数), 例如</p>
    <pre>;@Ahk2Exe-Obey U_date, FormatTime U_date`, R D2 T2</pre>
    <p><strong>Expression</strong> 的格式必须以 <code>=</code> 开头, 例如</p>
    <pre>;@Ahk2Exe-Obey U_type, = "%A_IsUnicode%" ? "Unicode" : "ANSI"</pre>
    <p>表达式可以用命令格式来写, 例如</p>
    <pre>;@Ahk2Exe-Obey U_bits, U_bits := %A_PtrSize% * 8</pre>
    <p>如果需要, 用 <code>`n</code> 分隔多个命令和表达式.</p>
  </dd>
  <dt>Extra</dt>
  <dd><i>(可选)</i> 数字(1-9) 指定要返回的额外结果的数量. 例如, 如果 extra = 2, 结果将以 <code>U_<i>name</i></code>, <code>U_<i>name</i>1</code> 和 <code>U_<i>name</i>2</code> 的形式返回. <code><i>name</i></code>  中的值必须先由表达式或命令设置.</dd>
</dl>

<h3 id="PostExec">PostExec</h3>
<p>指定在编译成功后, 在任何<a href="../Scripts.htm#mpress">压缩程序</a>应用于 .exe 文件之前(或之后) 要执行的程序.</p>
<pre class="Syntax">
<span class="func">;@Ahk2Exe-PostExec</span> Program [parameters] <span class="optional">, When, WorkingDir, Hidden, IgnoreErrors</span></pre>
<dl>
  <dt>Program [parameters]</dt>
  <dd>要执行的程序, 加上参数. 要允许访问已处理的 .exe 文件, 请指定特殊变量 <a href="#WorkFileName">A_WorkFileName</a> 作为加引号的参数, 如 <code>"%A_WorkFileName%"</code>. 如果程序更改了 .exe, 则必须将更改的 .exe 移回程序指定的输入文件 <code>%A_WorkFileName%</code>. (注意, .exe 将包含二进制数据.)</dd>
  <dt>When</dt>
  <dd>
    <p><i>(可选)</i> 在执行任何<a href="../Scripts.htm#mpress">压缩</a>之前, 则置空. 否则设置为压缩后运行的数字如下:</p>
    <ul>
      <li>0 - 只在没有指定压缩时运行.</li>
      <li>1 - 只在指定 MPRESS 压缩时运行.</li>
      <li>2 - 仅在指定 UPX 压缩时运行.</li>
    </ul>
  </dd>
  <dt>WorkingDir <span class="ver">[v1.1.33.03+]</span></dt>
  <dd><i>(可选)</i> 程序的工作目录. 即使包含空格, 也不要用双引号括起来. 如果省略, 将使用编译器的目录(Ahk2Exe).</dd>
  <dt>Hidden <span class="ver">[v1.1.33.03+]</span></dt>
  <dd><i>(可选)</i> 如果设置为 1, 程序将被隐藏启动.</dd>
  <dt>IgnoreErrors <span class="ver">[v1.1.33.03+]</span></dt>
  <dd><i>(可选)</i> 如果设置为 1, 则不会向用户报告程序启动或运行过程中发生的任何错误.</dd>
</dl>
<p><strong>示例 1:</strong> (要使用这些例子, 首先要下载 <a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/BinMod.ahk">BinMod.ahk</a> 并根据下载的脚本中的说明进行编译.)</p>
<p>这个例子可以用来删除生成的 .exe 文件中对 "AutoHotkey" 的引用, 以掩盖它是一个编译过的 AutoHotkey 脚本:</p>
<pre>;@Ahk2Exe-Obey U_au, = "%A_IsUnicode%" ? 2 : 1    ; Script ANSI or Unicode?
;@Ahk2Exe-PostExec "BinMod.exe" "%A_WorkFileName%"
;@Ahk2Exe-Cont  "%U_au%2.&gt;AUTOHOTKEY SCRIPT&lt;. DATA              "</pre>
<p><strong>示例 2:</strong> 这个例子将改变一个 UPX 压缩的 .exe 文件, 使它不能用 <code>UPX -d</code> 来解压:</p>
<pre>;@Ahk2Exe-PostExec "BinMod.exe" "%A_WorkFileName%"
;@Ahk2Exe-Cont  "11.UPX." "1.UPX!.", 2</pre>
<p>在 <a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/BinMod.ahk">BinMod.ahk</a> 脚本中还有其他例子.</p>

<h3 id="ResourceID">ResourceID</h3>
<p>指定一个非标准的资源 ID, 用于使用 <a href="#Bin">.exe 基文件</a>编译的主脚本(请参阅 <a href="../Program.htm#embedded-scripts">嵌入脚本</a>). 这个指令可以被 GUI 或 CLI 中指定的资源 ID 所覆盖. 如果该指令出现在由 <a href="#AddResource">AddResource</a> 指令插入的脚本中, 则会被忽略.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-ResourceID</span> Name</pre>
<dl>
  <dt>Name</dt>
  <dd>要使用的资源 ID. 数字资源 ID 应该由一个哈希符号(#) 和一个十进制数字组成.</dd>
</dl>

<h3 id="SetMainIcon">SetMainIcon</h3>
<p>覆盖用于编译的自定义 EXE 图标. (要改变其他图标, 请参阅 <a href="#AddResource">AddResource</a> 示例.) 这个指令可以被 GUI 或 CLI 中指定的图标文件覆盖.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-SetMainIcon</span> <span class="optional">IcoFile</span></pre>
<dl>
  <dt>IcoFile</dt>
  <dd><i>(可选)</i> 要使用的图标文件. 如果省略, 则使用默认的 AutoHotkey 图标.</dd>
</dl>

<h3 id="SetProp">Set<em>Prop</em></h3>
<p>更改已编译可执行文件的版本信息中的属性. 注意, 无论指定属性的顺序如何, 所有属性都按字母顺序处理.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Set<i>Prop</i></span> Value</pre>
<dl>
  <dt><em>Prop</em></dt>
  <dd>
    <p>要更改的属性的名称. 必须是以下所列之一.</p>
    <table class="info">
      <tr>
        <th abbr="Prop">属性</th>
        <th abbr="Descr">描述</th>
      </tr>
      <tr>
        <td>CompanyName</td>
        <td>更改公司名称.</td>
      </tr>
      <tr>
        <td>Copyright</td>
        <td>更改法定版权信息.</td>
      </tr>
      <tr>
        <td>Description</td>
        <td>更改文件说明.</td>
      </tr>
      <tr>
        <td>FileVersion</td>
        <td>更改文件版本, 包括文本和原始二进制格式. (有关详情, 请参阅下面的 <em>Version</em>.)</td>
      </tr>
      <tr>
        <td>InternalName</td>
        <td>更改内部名称.</td>
      </tr>
      <tr>
        <td>Language</td>
        <td>更改<a href="Languages.htm">语言代码</a>. 请注意, 十六进制数字必须有 <code>0x</code> 前缀.</td>
      </tr>
      <tr>
        <td>LegalTrademarks</td>
        <td>更改合法商标信息.</td>
      </tr>
      <tr>
        <td>Name</td>
        <td>更改产品名称和内部名称.</td>
      </tr>
      <tr>
        <td>OrigFilename</td>
        <td>更改原始文件名信息.</td>
      </tr>
      <tr>
        <td>ProductName</td>
        <td>更改产品名称.</td>
      </tr>
      <tr>
        <td>ProductVersion</td>
        <td>更改产品版本, 包括文本和原始二进制格式. (有关详情, 请参阅下面的 <em>Version</em>.)</td>
      </tr>
      <tr>
        <td>Version</td>
        <td>
          <p>更改文件版本和产品版本, 包括文本和原始二进制格式.</p>
          <p>Ahk2Exe 用可能出现在版本文本开头的以周期限定的数字(最多 4 个) 填充二进制版本字段. 未填写的字段被设置为零. 例如, <code>1.3-alpha</code> 会产生 <code>1.3.0.0</code> 的二进制版本号. 如果这个属性没有被修改, 它默认为用于编译脚本的 AutoHotkey 版本.</p>
      </tr>
    </table>
  </dd>
  <dt>Value</dt>
  <dd>要设置属性的值.</dd>
</dl>

<h3 id="Set">Set</h3>
<p>改变 <a href="#SetProp">SetProp</a> 指令未覆盖的编译后的可执行文件版本信息中的其他杂项属性. 请注意, 所有的属性都是按字母顺序处理的, 而不考虑它们被指定的顺序. 此指令仅用于特殊用途.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Set</span> Prop, Value</pre>
<dl>
  <dt>Prop</dt>
  <dd>要更改的属性名称.</dd>
  <dt>Value</dt>
  <dd>属性将设置的值.</dd>
</dl>

<h3 id="UpdateManifest">UpdateManifest</h3>
<p>更改 .exe 清单中的详细信息. 此指令仅供特殊用途.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-UpdateManifest</span> RequireAdmin <span class="optional">, Name, Version, UIAccess</span></pre>
<dl>
  <dt>RequireAdmin</dt>
  <dd>设置为 1, 可执行文件运行时需要管理员权限. 设置为 2, 可执行文件运行时请求最高可用权限. 设置为 0, 则保持不变.</dd>
  <dt>Name</dt>
  <dd><i>(可选)</i> 要在清单中设置的名称.</dd>
  <dt>Version</dt>
  <dd><i>(可选)</i> 要在清单中设置的版本.</dd>
  <dt>UIAccess</dt>
  <dd><i>(可选)</i> 设置为 1, 使清单中的 UIAccess 为 true.</dd>
</dl>

<h3 id="UseResourceLang">UseResourceLang</h3>
<p>更改 <a href="#AddResource">AddResource</a> 使用的资源语言. 这条指令是位置性的, 会影响后面所有的 <a href="#AddResource">AddResource</a> 指令.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-UseResourceLang</span> LangCode</pre>
<dl>
  <dt>LangCode</dt>
  <dd><a href="Languages.htm">语言代码</a>. 请注意, 十六进制数字必须有 <code>0x</code> 前缀. 默认的资源语言是美国英语(0x0409).</dd>
</dl>

</body>

</html>