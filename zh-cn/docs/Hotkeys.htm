<!DOCTYPE HTML>
<html>
<head>
<title>热键 - 定义与使用 | AutoHotkey</title>
<meta name="description" content="Learn details about hotkeys in general, modifier symbols, context-sensitive hotkeys, custom combinations, mouse wheel hotkeys, function hotkeys, etc." />
<meta name="keywords" content="hotkey,hotkeys,hot key,hot keys,shortcut,shortcuts,shortcut key,shortcut keys,keyboard shortcut,keyboard shortcuts,button,buttons,click,press">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>热键<span class="headnote">(鼠标, 操纵杆和键盘快捷键)</span></h1>


<h2 id="toc">目录</h2>
<ul>
  <li><a href="#Intro">介绍和简单示例</a></li>
  <li><a href="#Symbols">热键修饰符</a></li>
  <li><a href="#Context">上下文相关的热键</a></li>
  <li><a href="#combo">自定义组合键</a></li>
  <li><a href="#Features">其他特性</a></li>
  <li><a href="#Wheel">鼠标滚轮热键</a></li>
  <li><a href="#Remarks">热键技巧和备注</a></li>
  <li><a href="#alttab">Alt-Tab 热键</a></li>
  <li><a href="#Function">函数热键</a> <span class="ver">[v1.1.20+]</span></li>
</ul>

<h2 id="Intro">介绍和简单示例</h2>
<p>热键有时也称为快捷键, 因为它们能简便地触发动作(例如运行程序或<a href="misc/Macros.htm">键盘宏</a>). 在下面的例子中, <kbd>Win</kbd>+<kbd>N</kbd> 被设置为启动记事本. 磅的符号 [#] 表示 <kbd>Win</kbd>, 它被称为 <em>修饰符</em>:</p>
<pre>#n::
Run Notepad
return</pre>
<p>在前面的最后一行中, <code><a href="commands/Return.htm">return</a></code> 用来结束此热键. 不过, 如果热键只需要执行单行语句, 那么此行可以直接放在双冒号的右边. 换句话说, <code>return</code> 可以省略:</p>
<pre>#n::Run Notepad</pre>
<p>要在热键中使用多个修饰键, 那么需要把它们连续地列出来(顺序无关紧要). 下面的例子中使用 <code>^!s</code> 来表示 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>:</p>
<pre>^!s::
<a href="commands/Send.htm">Send</a> Sincerely,{enter}John Smith  <em>; 此行发送键击到活动(最前面的) 窗口.</em>
return</pre>
<h2 id="Symbols">热键修饰符</h2>
<p>在定义热键时您可以使用下列修饰符:</p>
<table class="info">
  <tr>
    <th class="center" style="width:30px">符号</th>
    <th abbr="Descr">描述</th>
  </tr>
  <tr>
    <td class="center bold">#</td>
    <td>
    <p><kbd>Win</kbd> (Windows 徽标键).</p>
    <p id="win-l"><span class="ver">[v1.0.48.01+]</span>: 对于 Windows Vista 及以上版本, 包含 <kbd>Win</kbd> 的热键(例如 #a) 会等待 <kbd>Win</kbd> 被释放后才发送任何包含 <kbd>L</kbd> 的文本. 这样避免了这种热键中的 <a href="commands/Send.htm">Send</a> 锁定 PC. 这种行为适用于除 <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>(这里不需要) 和<a href="commands/Send.htm#blind">盲从模式(Blind)</a> 外的所有发送模式. <span class="ver">[v1.1.29+]:</span> <a href="commands/Send.htm#SendText">文本模式</a>也被排除在外.</p></p>
      <p class="note"><strong>注意:</strong> 按下包含 <kbd>Win</kbd> 的热键可能会导致额外的模拟击键(默认为 <kbd>Ctrl</kbd>). 请参阅 <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a>.</p>
    </td>
  </tr>
  <tr>
    <td class="center bold">!</td>
    <td>
    <p><kbd>Alt</kbd></p>
      <p class="note"><strong>注意:</strong> 按下包含 <kbd>Alt</kbd> 的热键可能会导致额外的模拟击键(默认为 <kbd>Ctrl</kbd>). 请参阅 <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a>.</p>
    </td>
  </tr>
  <tr>
    <td class="center bold">^</td>
    <td><kbd>Ctrl</kbd></td>
  </tr>
  <tr>
    <td class="center bold">+</td>
    <td><kbd>Shift</kbd></td>
  </tr>
  <tr>
    <td class="center bold">&amp;</td>
    <td>和符号可以用来组合任意两个按键或鼠标按钮, 让它们成为自定义热键. 详情请参阅<a href="#combo">下文</a>.</td>
  </tr>
  <tr id="LeftRight">
    <td class="center bold">&lt;</td>
    <td><a name="LeftRight"></a>使用成对按键中左边的那个. 例如 &lt;!a 相当于 !a, 只是使用左边的 <kbd>Alt</kbd> 才可以触发.</td>
  </tr>
  <tr>
    <td class="center bold">&gt;</td>
    <td>使用成对按键中右边的那个.</td>
  </tr>
  <tr id="AltGr">
    <td class="center bold">&lt;^&gt;!</td>
    <td><p><kbd>AltGr</kbd>(<a href="https://en.wikipedia.org/wiki/AltGr_key">alternate graph, or alternate graphic</a>)(译者注: 标准键盘上没有该键). 如果您键盘布局中含 <kbd>AltGr</kbd> 而非右 <kbd>Alt</kbd>, 那么这一系列符号一般可用于表示 <kbd>AltGr</kbd>. 例如:</p>
      <pre>&lt;^&gt;!m::MsgBox You pressed AltGr+m.
&lt;^&lt;!m::MsgBox You pressed LeftControl+LeftAlt+m.</pre>
      <p>或者, 让 <kbd>AltGr</kbd> 自己成为热键, 请使用下面的热键(不像上面出现的任何热键):</p>
      <pre>LControl &amp; RAlt::MsgBox You pressed AltGr itself.</pre></td>
  </tr>
  <tr id="wildcard">
    <td class="center bold">*</td>
    <td><p>通配符: 即使附加的修饰键被按住也能激发热键. 这常与<a href="misc/Remap.htm">重映射</a>按键或按钮组合使用. 例如:</p>
      <pre>*#c::Run Calc.exe  <em>; Win+C, Shift+Win+C, Ctrl+Win+C 等都会触发此热键.</em>
*ScrollLock::Run Notepad  <em>; 即使在按住其他修饰键时按下 ScrollLock 也会触发此热键.</em></pre>
      <p>通配符热键总是使用键盘钩子, 因此通配符热键使按下任何热键失效. 例如, <code>*a::</code> 出现后会将 <code>^a::</code> 改为使用键盘钩子.</p></td>
  </tr>
  <tr id="Tilde">
    <td class="center bold">~</td>
    <td><p>触发热键时, 热键中按键原有的功能不会被屏蔽(对操作系统隐藏). 在下面的两个例子中, 用户的鼠标按钮点击会被发送到活动窗口:</p>
      <pre>~RButton::MsgBox You clicked the right mouse button.
~RButton &amp; C::MsgBox You pressed C while holding down the right mouse button.</pre>
      <p>与其他前缀符号不同, 可以在热键的某些<a href="commands/_IfWinActive.htm#variant">变体</a>中使用颚化符(波浪号) 前缀而其他的不使用. 然而, 如果应用于颚化符(波浪号) <a href="#prefix">前缀</a>的任何自定义组合键没有被关闭或暂停, 它会影响那个前缀键在 <em>所有</em> 组合中的行为.</p>
      <p>用于替代 <a href="#alttab">alt-tab</a> 的特殊按键总是忽略颚化符(波浪号) 前缀.</p>
      <p><span class="ver">[v1.1.14+]:</span> 如果把颚化符(<a href="#prefix">前缀键</a>) 用在自定义修饰键中且此修饰键自身也作为热键, 则在按下此修饰键时会触发热键而不会被延迟到按键释放的时候. 例如, 上文中 <em>~RButton</em> 热键在按下此按键时就会触发. 对于 <span class="ver">[v1.1.14]</span> 之前的版本(或未使用颚化符前缀), 则会在按键释放时触发其自身的热键, 不过仅在未触发 <em>RButton &amp; C</em> 组合键的时候.</p>
      <p>如果颚化符前缀只应用于自定义组合键, 而不应用于非组合热键, 按键的原生功能将持续被屏蔽. 例如, 下面的脚本, 按住 <kbd>Menu</kbd> 将会一直显示一个工具提示而不会触发上下文菜单:</p>
      <pre>AppsKey::ToolTip Press &lt; or &gt; to cycle through windows.
AppsKey Up::ToolTip
~AppsKey &amp; &lt;::Send !+{Esc}
~AppsKey &amp; &gt;::Send !{Esc}</pre>
      <p>只要有一个键盘热键有颚化符修饰, 热键总是使用键盘钩子.</p>
    </td>
  </tr>
  <tr id="prefixdollar">
    <td class="center bold">$</td>
    <td>
      <p>通常只在脚本使用 <a href="commands/Send.htm">Send</a> 命令发送包含了热键自身的按键时才需要使用此符号, 否则可能会导致热键触发自己. $ 前缀强制使用<a href="commands/_InstallKeybdHook.htm">键盘钩子</a>来实现此热键, 作为副作用这样阻止了 <a href="commands/Send.htm">Send</a> 命令触发它自己. $ 前缀相当于在此热键定义之前的某个位置指定了 <code><a href="commands/_UseHook.htm">#UseHook</a></code>.</p>
      <p>$ 前缀对于鼠标热键不起作用, 因为它们始终使用鼠标钩子. 它对于已经启用了键盘钩子的热键同样无效, 包括任何带有<a href="#Tilde">颚化符(~)</a> 或<a href="#wildcard">通配符(*)</a> 修饰符的热键, key-up 热键以及自定义组合. 要确定特定热键是否使用了键盘钩子, 请使用 <a href="commands/ListHotkeys.htm">ListHotkeys</a> 查看.</p>
      <p><span class="ver">[v1.1.06+]:</span> <a href="commands/_InputLevel.htm">#InputLevel</a> 和 <a href="commands/SendLevel.htm">SendLevel</a> 对 Send 命令是否触发热键和热字串提供了额外的控制功能.</p>
    </td>
  </tr>
  <tr id="keyup">
    <td class="center">UP</td>
    <td><p>单词 UP 可以跟在热键名后面使得在释放按键时触发热键, 而不是按下时. 下面的例子把左 <kbd>Win</kbd> <a href="misc/Remap.htm">重映射</a>为左 <kbd>Ctrl</kbd>:</p>
      <pre>*LWin::Send {LControl down}
*LWin Up::Send {LControl up}
</pre>
      <p>"Up" 也可以用于普通热键中, 例如: <code>^!r Up::MsgBox You pressed and released Ctrl+Alt+R</code>. 它还可以用在<a href="#combo">组合键</a>(例如 <code>F1 &amp; e Up::</code>)</p>      
      <p>限制: 1) "Up" 不能和<a href="KeyList.htm">游戏杆按钮</a>一起使用; 2) 在没有普通/按下热键副本的 "Up" 热键会完全接管那个按键以防被卡住. 避免这种情况的一种方法是添加<a href="#Tilde">颚化符(波浪号) 前缀</a>(例如 <code>~LControl up::</code>)</p>
      <p>"Up" 热键和其同行的键(如果有的话) 总是使用键盘钩子.</p>
      <p>相关提示, 类似于上面的一种技术是让热键成为前缀键. 好处是尽管热键会在按键松开时激发, 但仅在您之前按住此前缀键时没有按其他任何键的情况下才会如此. 例如:</p>
      <pre>LControl &amp; F1::return  <em>; 通过把左 control 键放在 "&amp;" 前面至少一次来让它成为前缀键.</em>
LControl::MsgBox You released LControl without having used it to modify any other key.</pre></td>
  </tr>
</table>
<p class="note"><strong>注意</strong>: 请参阅<a href="KeyList.htm">按键列表</a>来了解键盘按键和鼠标/操纵杆按钮的完整列表.</p>
<p>多个热键可以垂直地叠放来让它们执行相同的动作. 例如:</p>
<pre>^Numpad0::
^Numpad1::
MsgBox Pressing either Control+Numpad0 or Control+Numpad1 will display this message.
return</pre>
<p>通过不为按键或按键组合的热键指定任何操作可以在整个系统中完全禁用它们. 下面的例子中禁用了右 <kbd>Win</kbd>:</p>
<pre>RWin::return</pre>

<h2 id="Context">上下文相关的热键</h2>
<p><a href="commands/_IfWinActive.htm">#IfWinActive/Exist</a> 和 <a href="commands/_If.htm">#If</a> 指令可以用来让热键根据不同的条件执行不同的动作(或什么都不做). 例如:</p>
<pre>#IfWinActive, ahk_class Notepad
^a::MsgBox 你在记事本中按下了 Ctrl-A. 而在其他窗口中按下 Ctrl-A 将原样发送.
#c::MsgBox 你在记事本中按下了 Win-C 组合键.

#IfWinActive
#c::MsgBox 你在非记事本程序中按下了 Win-C .

#If MouseIsOver("ahk_class Shell_TrayWnd") <em>; 有关 MouseIsOver, 请参阅 <a href="commands/_If.htm#ExVolume">#If 示例 1</a>.</em>
WheelUp::Send {Volume_Up}     <em>; 在任务栏上滚动滚轮: 增加/减小音量.</em>
WheelDown::Send {Volume_Down} <em>;</em>
</pre>

<h2 id="combo">自定义组合键</h2>
<p>通过在两个按键(不包括操纵杆按钮) 间使用 "&amp;" 可以定义定制的组合键. 在下面的例子中, 您在按住 Numpad0 接着按下第二个按键时会触发此热键:</p>
<pre id="prefix">Numpad0 &amp; Numpad1::MsgBox You pressed Numpad1 while holding down Numpad0.
Numpad0 &amp; Numpad2::Run Notepad</pre>
<p><strong>前缀键导致失去它原有的功能:</strong> 在上面的例子中, Numpad0 成为 <em>前缀键</em>; 但是这也让 Numpad0 在被按下时失去了它原有的功能. 为了避免此问题, 脚本中可以配置 Numpad0 执行新的动作, 例如下列热键的其中一个:</p>
<pre>Numpad0::WinMaximize A   <em>; 最大化活动/前端窗口.</em>
Numpad0::Send {Numpad0}  <em>; 让 Numpad0 <i>释放</i> 时产生 Numpad0 键击. 请参阅下面的注释.</em></pre>
<p><strong>释放时触发:</strong> 使用上面的其中一个自定义组合热键可以在 <em>释放</em> Numpad0 时执行指定的动作, 但不包括按住 Numpad0 时您又按下了其他按键的情况. 从 <span class="ver">[v1.1.14+]</span> 开始, 可以在其中某个热键前使用<a href="#Tilde">颚化符(波浪号) 前缀</a>来避免这种行为.</p>
<p id="combo_mods"><strong>修饰:</strong> 与普通热键不同的是, 自定义组合在默认情况下表现得就像拥有一个<a href="#wildcard">通配符(*)</a> 修饰一样. 例如, <code>1 &amp; 2::</code> 当按下 <kbd>1</kbd> 和 <kbd>2</kbd> 时, 无论 <kbd>Ctrl</kbd> 或 <kbd>Alt</kbd> 是否被按住都会触发, 然而 <code>^1::</code> 仅在 <kbd>Ctrl</kbd>+<kbd>1</kbd> 组合键时触发, 而 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>1</kbd> 不会触发.</p>
<p>对于普通的修饰键, 一般的热键会比 "自定义" 组合工作得更好. 例如, <code>&lt;+s::</code> 就是比 <code>LShift &amp; s::</code> 更好的用法.</p>
<p>不支持组合三个或更多的键. 一般来说组合键支持你键盘上物理存在的所有按键, 都可以用 <a href="commands/_If.htm">#If</a> 和 <a href="commands/GetKeyState.htm#function">GetKeyState()</a> 探测状态, 但是也可能出现不一致的情况. 例如:</p>
<pre><em>; 以任何顺序按下 AppsKey 和 Alt, 然后按下反斜杠键(/).</em>
#if GetKeyState("AppsKey", "P")
Alt &amp; /::MsgBox Hotkey activated.

<em>; 如果对调 AppsKey 和 Alt, 则必须先按下 Alt(一次按一个):</em>
#if GetKeyState("Alt", "P")
AppsKey &amp; /::MsgBox Hotkey activated.

<em>; 同时按下这三个键: [ &amp; ] &amp; \::</em>
#if GetKeyState("[") &amp;&amp; GetKeyState("]")
\::MsgBox</pre>
<p><strong>键盘钩子:</strong> 自定义的组合键总是使用键盘钩子, 如使用前缀键作为后缀的任何热键. 例如, <code>a &amp; b::</code> 导致 <code>^a::</code> 使用键盘钩子.</p>

<h2 id="Features">其他特性</h2>
<p><strong>NumLock, CapsLock 和 ScrollLock:</strong> 这些键可以被强制设置为 "AlwaysOn" 或 "AlwaysOff". 例如: <code><a href="commands/SetNumScrollCapsLockState.htm">SetNumLockState</a> AlwaysOn</code>.</p>
<p><strong>覆盖资源管理器热键:</strong> 在脚本中可以为 Windows 内置的热键例如 <kbd>Win</kbd>+<kbd>E</kbd>(#e) 和 <kbd>Win</kbd>+<kbd>R</kbd>(#r) 指定一个动作来个别的替换. 请参阅<a href="misc/Override.htm">覆盖页面</a>了解详情.</p>
<p><strong>替换 Alt-Tab:</strong> 热键可以提供 Alt-Tab 切换窗口的可选方法. 例如, 下面的两个热键可以让您用右手进行 alt-tab:</p>
<pre>RControl &amp; RShift::AltTab  <em>; 按住右 control 后接着反复下右 shift 来向前移动.</em>
RControl &amp; Enter::ShiftAltTab  <em>; 甚至不需要释放右 control, 直接按 Enter 来反向移动.</em></pre>
<p>想了解更多细节, 请参阅 <a href="#alttab">Alt-Tab</a>.</p>

<h2 id="Wheel">鼠标滚轮热键</h2>
<p>通过键名 WheelDown 和 WheelUp 可以支持转动滚轮来激发热键. 这里是一些鼠标滚轮热键的例子:</p>
<pre>MButton &amp; WheelDown::MsgBox You turned the mouse wheel down while holding down the middle button.
^!WheelUp::MsgBox You rotated the wheel up while holding down Control+Alt.</pre>
<p id="HWheel"><span class="ver">[v1.0.48+]</span>: 也支持 WheelLeft 和 WheelRight, 但在早于 Windows Vista 的操作系统上没有效果. 有些鼠标只有一个滚轮, 可以向上或向下滚动或向左或向右倾斜. 通常, 在这些情况下, 将滚轮固定在一侧时会重复发送 WheelLeft 或 WheelRight 信号, 以模拟连续滚动. 这通常会导致热键重复执行.</p>
<p><span class="ver">[v1.0.43.03+]</span>: 内置变量 <strong>A_EventInfo</strong> 包含了滚轮转动的格数, 通常为 1. 然而在后面的情况中, A_EventInfo 可能大于或小于 1:</p>
<ul>
  <li>如果鼠标硬件报告小于一格的距离, 那么 A_EventInfo 可能为 0;</li>
  <li>如果快速滚动滚轮(取决于鼠标类型), 那么 A_EventInfo 可能大于 1. 像后面这样的热键可以帮助您分析鼠标: <code>~WheelDown::ToolTip %A_EventInfo%</code>.</li>
</ul>
<p>鼠标滚轮最有用的一些热键包括滚动窗口文本的可选方法. 例如, 使用下面的一对热键可以在您按住左 <kbd>Ctrl</kbd> 并转动滚轮时进行水平滚动而不是垂直滚动:</p>
<pre>~LControl &amp; WheelUp::  <em>; 向左滚动.</em>
ControlGetFocus, fcontrol, A
Loop 2  <em>; &lt;-- 增加这个值来加快滚动速度.</em>
    SendMessage, 0x0114, 0, 0, %fcontrol%, A  <em>; 0x0114 是 WM_HSCROLL, 它后面的 0 是 SB_LINELEFT.</em>
return

~LControl &amp; WheelDown::  <em>; 向右滚动.</em>
ControlGetFocus, fcontrol, A
Loop 2  <em>; &lt;-- 增加这个值来加快滚动速度.</em>
    SendMessage, 0x0114, 1, 0, %fcontrol%, A  <em>; 0x0114 是 WM_HSCROLL, 它后面的 1 是 SB_LINERIGHT.</em>
return</pre>
<p>最后, 由于鼠标滚轮热键只产生按下事件(从没有弹起事件), 所以它们无法用作<a href="#keyup">弹起的按键热键</a>.</p>

<h2 id="Remarks">热键技巧和备注</h2>
<p>根据 <kbd>NumLock</kbd> 的状态, 每个小键盘上的按键可以运行两个不同的热键子程序. 可选的, 可以让小键盘上的按键不论状态如何都运行相同的子程序. 例如:</p>
<pre>NumpadEnd::
Numpad1::
MsgBox, This hotkey is launched regardless of whether NumLock is on.
return</pre>
<p>如果<a href="#Tilde">波浪号(~)</a> 和<a href="#prefix">前缀键</a>一起使用, 即使只是一次, 那么其中的前缀键总是会被发送到活动窗口. 例如, 在下面的两个热键中, 活动窗口都会接收到右键点击, 尽管只是其中一个热键使用了波浪号:</p>
<pre>~RButton &amp; LButton::MsgBox You pressed the left mouse button while holding down the right.
RButton &amp; WheelUp::MsgBox You turned the mouse wheel up while holding down the right button.</pre>
<p><a href="commands/Suspend.htm">Suspend</a> 命令可以临时禁用所有的热键, 但不包括您要排除的那些. 要得到更大的选择性, 请使用 <a href="commands/_IfWinActive.htm">#IfWinActive/Exist</a>.</p>
<p>通过使用 <a href="commands/Hotkey.htm">Hotkey</a> 命令, 可以在脚本运行时动态创建热键. Hotkey 命令还能单独地修改, 禁用或启用脚本现有的热键.</p>
<p>操纵杆热键当前不支持修饰符前缀, 例如 ^(<kbd>Ctrl</kbd>) 和 #(<kbd>Win</kbd>). 不过, 您可以使用 <a href="commands/GetKeyState.htm">GetKeyState</a> 来模仿这种效果, 如下所示:</p>
<pre>Joy2::
if not GetKeyState("Control")  <em>; 左边和右边的 Control 键都没有按下.</em>
    return  <em>; 即什么都不做.</em>
MsgBox You pressed the first joystick's second button while holding down the Control key.
return</pre>
<p>如果热键应该在继续执行前等待其修饰键被释放, 这可能需要一些时间. 请参考下面的例子:</p>
<pre>^!s::Send {Delete}</pre>
<p>按下 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd> 会让系统以为您按下了 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>(由于系统对此热键侵略性的检测). 要解决此问题, 请使用 <a href="commands/KeyWait.htm">KeyWait</a> 来等待按键释放; 例如:</p>
<pre>^!s::
KeyWait Control
KeyWait Alt
Send {Delete}
return</pre>
<p>如果像 <code>#z::</code> 这样的热键标签产生了类似 "无效热键" 的错误, 那么您的系统键盘布局/语言可能不包含特殊字符(此时为"Z"). 尝试使用您键盘布局中您知道的其他字符.</p>
<p>热键标签可以作为 <a href="commands/Gosub.htm">Gosub</a> 或 <a href="commands/Goto.htm">Goto</a> 的目标. 例如: <code>Gosub ^!s</code>. 有关详情, 请参阅<a href="misc/Labels.htm#hotkeys-and-hotstrings">标签</a>.</p>
<p>热键的一个常见用途是启动和停止重复的动作, 例如一系列的键击或鼠标点击. 关于这方面的例子, 请参阅<a href="FAQ.htm#repeat">这个 FAQ 主题</a>.</p>
<p>最后, 每个脚本都是<a href="misc/Threads.htm">准多线程的</a>, 这样可以在之前的热键子程序还在运行时启动新的热键. 例如, 即使在当前热键显示<a href="commands/MsgBox.htm">消息框</a>时也能启动新热键.</p>

<h2 id="alttab">Alt-Tab 热键</h2>
<p>Alt-Tab 热键简化了新组合键到系统 Alt-Tab 热键的映射, 它被用来调用切换任务(激活窗口) 的菜单.</p>
<p>每个 Alt-Tab 热键必须是一个键或两个键的组合, 通常通过和符号(&amp;) 实现. 在下面的例子中, 按住右 <kbd>Alt</kbd> 然后按下 <kbd>J</kbd> 或 <kbd>K</kbd> 来浏览 alt-tab 菜单:</p>
<pre>RAlt &amp; j::AltTab
RAlt &amp; k::ShiftAltTab</pre>
<p><em>AltTab</em> 和 <em>ShiftAltTab</em> 是两个特殊的命令, 它们仅在与热键在同一行时才能被识别. 这里是完整的列表:</p>
<p><strong>AltTab</strong>: 如果 alt-tab 菜单可见, 那么在菜单中前移. 否则, 显示菜单(仅当热键为两个按键的组合键时; 否则, 它什么都不做).</p>
<p><strong>ShiftAltTab</strong>: 与上面相同, 不过这里在菜单中后移.</p>
<p><strong>AltTabMenu</strong>: 显示或隐藏 alt-tab 菜单.</p>
<p><strong>AltTabAndMenu</strong>: 如果 alt-tab 菜单可见, 那么在菜单中前移. 否则, 显示菜单.</p>
<p><strong>AltTabMenuDismiss</strong>: 关闭 Alt-tab 菜单.</p>
<p>为了举例说明上述命令, 可以用鼠标滚轮完全代替 Alt-tab. 当下面的热键生效时, 点击鼠标中键显示菜单, 转动滚轮在菜单中导航:</p>
<pre>MButton::AltTabMenu
WheelDown::AltTab
WheelUp::ShiftAltTab</pre>
<p>要取消 Alt-Tab 菜单而不激活选择的窗口, 按下或发送 <kbd>Esc</kbd>. 在下面的例子中, 按住左 <kbd>Ctrl</kbd> 并按下 <kbd>CapsLock</kbd> 来显示菜单并在其中向前移动. 然后释放左 <kbd>Ctrl</kbd> 激活所选窗口, 或按下鼠标滚轮取消. 在运行这个例子之前, 定义 <a href="#AltTabWindow">AltTabWindow</a> 窗口组, 如下所示.</p>
<pre>LCtrl &amp; CapsLock::AltTab
#IfWinExist ahk_group AltTabWindow <em>; 表示 alt-tab 菜单出现在屏幕上.</em>
*MButton::Send {Blind}{Escape} <em>; * 前缀允许它被触发, 无论 Alt 是否被按住.</em>
#If</pre>
<p>如果脚本发送 <code>{Alt Down}</code>(例如调用 Alt-Tab 菜单), 那么也可能需要发送 <code>{Alt Up}</code>, 如下面的例子所示.</p>

<h3 id="AltTabRemarks">一般说明</h3>
<p>当前, 所有特殊的 Alt-tab 动作必须像上面的例子那样直接指定到热键上(即它们无法像命令那样使用). 它们<span class="red">不受 <a href="commands/_IfWinActive.htm">#IfWin</a> 或 <a href="commands/_If.htm">#If</a> 的影响</span>.</p>
<p>无论是否使用 <code>up</code> 关键字, alt-tab 动作都可以在 key-down 和/或 key-up 生效, 并且不能与同一键上的其他动作相结合. 例如, 同时使用 <code>F1::AltTabMenu</code> 和 <code>F1 up::OtherAction()</code> 是不支持的.</p>
<p id="AltTabWindow">自定义的 alt-tab 动作还可以通过热键创建. 由于不同版本的操作系统对 alt-tab 菜单的标识不同, 使用如下所示的窗口组可能会有帮助. 在上面和下面例子中使用 <code>ahk_group AltTabWindow</code>, 这个窗口组是在<a href="Scripts.htm#auto">脚本启动段</a>定义的. 另外, <code>ahk_group AltTabWindow</code> 也可以用适合你的系统的 <code>ahk_class</code> 来代替.</p>
<pre>GroupAdd AltTabWindow, ahk_class MultitaskingViewFrame  <em>; Windows 10</em>
GroupAdd AltTabWindow, ahk_class TaskSwitcherWnd  <em>; Windows Vista, 7, 8.1</em>
GroupAdd AltTabWindow, ahk_class #32771  <em>; 更早的系统, 或启用了经典的 alt-tab</em></pre>
<p>在下面的例子中, 按下 <kbd>F1</kbd> 来显示菜单并向前移动. 然后可以按下 <kbd>F2</kbd> 来激活选择的窗口, 或按下 <kbd>Esc</kbd> 取消:</p>
<pre>*F1::Send {Alt down}{tab} <em>; 这里需要星号.</em>
!F2::Send {Alt up}  <em>; 释放 Alt 键激活选择的窗口.</em>
#IfWinExist ahk_group AltTabWindow
~*Esc::Send {Alt up} <em>; 取消菜单时, 自动释放 Alt 键.
;*Esc::Send {Esc}{Alt up} ; 如果不使用(~), 则需要发送 Escape 键.</em>
#If</pre>

<h2 id="Function">函数热键<span class="ver">[v1.1.20+]</span></h2>
<p>紧跟在热键标签后面的函数, 通过简单的定义, 一个或多个热键可以关联到此<a href="Functions.htm">函数</a>, 如下例所示:</p>
<pre><em>; Ctrl+Shift+O 在资源管理器中打开包含文件夹.
; Ctrl+Shift+E 打开文件夹并选中当前编辑文件.
; 支持 SciTE 和 Notepad++.</em>
^+o::
^+e::
    editor_open_folder() {
        WinGetTitle, path, A
        if RegExMatch(path, "\*?\K(.*)\\[^\\]+(?= [-*] )", path)
            if (FileExist(path) &amp;&amp; A_ThisHotkey = "^+e")
                Run explorer.exe /select`,"%path%"
            else
                Run explorer.exe "%path1%"
    }</pre>
<p id="function-details"><span class="ver">[v1.1.28+]:</span> 热字串也可以这样定义. 可以将多个热键或热字串组合在一起, 以调用相同的函数.</p>
<p>在热键/热字串标签和函数之间仅允许空白, 注释或者指令. 以这种方式定义的热键/热字串标签对 <a href="commands/IsLabel.htm">IsLabel()</a>, <a href="commands/Gosub.htm">Gosub</a> 或其他命令是不可见的; 然而, 即使关联了函数, <a href="Scripts.htm#auto">自动执行段</a>也会以第一个热键/热字串结束.</p>
<p>使用函数的的主要好处是可以使用局部变量, 当两个或多个热键为了不同的目的使用相同的变量名时, 避免了冲突. 它也鼓励自我记录热键, 就像上面的代码在函数内描述热键.</p>
<p><a href="commands/Hotkey.htm">Hotkey</a> 也可以关联函数或函数对象.</p>

</body>
</html>