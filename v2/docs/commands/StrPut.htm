<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>StrPut - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The StrPut function copies a string to a memory address or buffer, optionally converting it to a given code page." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>StrPut</h1>

<p>复制字符串到内存地址或缓冲, 可选地将字符串转换到给定的代码页.</p>

<pre class="Syntax"><span class="func">StrPut</span> String <span class="optional">, Encoding := <i>None</i></span> 
<span class="func">StrPut</span> String, Target <span class="optional">, Length</span> <span class="optional">, Encoding := <i>None</i></span>
</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>String</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>任何字符串. 如果给定一个数字, 它将自动转换为字符串.</p>
    <p><em>String</em> 被假定为使用<a href="../Concepts.htm#string-encoding">原生编码</a>.</p>
  </dd>

  <dt>Target</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#objects">对象</a>或<a href="../Concepts.htm#numbers">整数</a></p>
    <p>类<a href="../objects/Buffer.htm">缓冲</a>对象或内存地址, 字符串将写入其中.</p>
    <p>可以使用任何实现 <a href="../objects/Buffer.htm#Ptr">Ptr</a> 和 <a href="../objects/Buffer.htm#Size">Size</a> 属性的对象, 但此函数针对原生的<a href="../objects/Buffer.htm">缓冲</a>对象进行了优化. 传递具有这些属性的对象可确保函数不会将内存写入无效位置; 这样做可能会导致崩溃或其他不可预测的行为.</p>
    <p class="warning"><strong>注意:</strong> 如果需要在代码页之间进行转换, 则所需的缓冲大小可能与源字符串的大小不同. 对于这种情况, 调用带有两个参数的 StrPut 来计算所需的大小.</p>
  </dd>

  <dt>Length</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>要写入的最大<a href="../Concepts.htm#character">字符</a>数, 需要时包含<a href="../Concepts.htm#null-termination">空终止符</a>.</p>
    <p>如果 <em>Length</em> 为 0 或小于转换后的计划长度(或不需要转换时, 源字符串的长度), 则抛出异常.</p>
    <p>当 <em>Target</em> 是一个普通的内存地址时, 不能省略 <em>Length</em>, 除非已知缓冲的大小足够大, 例如, 如果缓冲是基于先前调用的 StrPut 而分配的, 具有相同的 <em>Source</em> 和 <em>Encoding</em>.</p>
    <p>如果 <em>Target</em> 是一个对象, 指定一个超过 <code><i>Target</i>.Size</code> 计算出的缓冲大小的 <em>Length</em> 被认为是一个错误, 即使转换后的字符串大小在缓冲内.</p>
    <p class="warning"><strong>注意:</strong> 当指定 <em>Encoding</em> 时, <em>Length</em> 应该是缓冲的大小(以字符为单位), <strong>而不是</strong> <em>String</em> 或子字符串的长度, 因为转换可能会增加其长度.</p>
    <p class="warning"><strong>注意:</strong> <em>Length</em> 是以字符数来计算的, 而缓冲大小通常以字节度量, StrPut 的返回值也是如此. 若要以字节为单位来指定缓冲大小, 请在 <em>Target</em> 参数中使用类<a href="../objects/Buffer.htm">缓冲</a>对象.</p>
  </dd>

  <dt>Encoding</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a>或<a href="../Concepts.htm#numbers">整数</a></p>
    <p>目标编码; 例如, <code>"UTF-8"</code>, <code>"UTF-16"</code> 或 <code>"CP936"</code>. 对于数字标识符, 只有在指定 <em>Length</em> 时, 才可以省略前缀 "CP". 指定空字符串或 <code>"CP0"</code> 则使用系统默认 ANSI 代码.</p>
  </dd>

</dl>

<h2 id="Return_Value">返回值</h2>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>如果省略了 <em>Target</em>, 函数返回以字节数表示的所需的缓冲大小, 包含了空终止符.</p>
<p>如果指定了 <em>Target</em>, 函数返回写入的字节数. 只有当有足够的空间时, 才会写入空终止符并包含在返回值中; 也就是说, 当 <em>Length</em> 或 <code><i>Target</i>.Size</code>(乘以一个字符的大小) 正好等于转换后的字符串的长度时, 则会省略空终止符.</p>

<h2 id="Error_Handling">错误处理</h2>
<p>如果检测到无效参数, 则抛出 <a href="../objects/Error.htm#ValueError">ValueError</a>, 例如转换后的字符串会超过 <em>Length</em> 或 <code><i>Target</i>.Size</code> 所允许的长度.</p>
<p>如果转换无法执行, 则抛出 <a href="../objects/Error.htm#OSError">OSError</a>.</p>

<h2 id="Remarks">备注</h2>
<p>注意, <i>String</i> 参数总是假定使用当前可执行文件的<a href="../Concepts.htm#string-encoding">原生编码</a>, 而 <i>Encoding</i> 指定写入给定 <i>Target</i> 的字符串的编码. 如果没有指定 <em>Encoding</em>, 则只测量或复制字符串, 而不进行任何转换.</p>

<h2 id="Related">相关</h2>
<p><a href="../Concepts.htm#string-encoding">字符编码</a>, <a href="StrGet.htm">StrGet</a>, <a href="../Compat.htm">二进制兼容性</a>, <a href="FileEncoding.htm">FileEncoding</a>, <a href="DllCall.htm">DllCall</a>, <a href="../objects/Buffer.htm">缓冲对象</a>, <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a></p>

<h2 id="ex1">示例</h2>
<div class="ex" id="ExNumEnc">
<p><a class="ex_number" href="#ExNumEnc"></a> <em>Length</em> 或 <em>Encoding</em> 都可以直接在 <em>Target</em> 后面指定, 但在这种情况下 <em>Encoding</em> 必须是非数字的.</p>
<pre>
StrPut(str, address, "cp0")  <em>; 代码页 0, 未指定缓冲大小</em>
StrPut(str, address, n, 0)   <em>; 最大 n 字符, 代码页 0</em>
StrPut(str, address, 0)      <em>; 不支持(最大长度为 0 的字符)</em>
</pre>
</div>

<div class="ex" id="ExEncoding">
<p><a class="ex_number" href="#ExEncoding"></a> 可以调用一次 StrPut, 来计算特定编码中的字符串所需的缓冲大小, 然后再次对字符串进行编码并将其写入缓冲. 这个过程可以通过利用这个函数来简化.</p>
<pre filename="StrBuf.ahk"><em>; 返回包含字符串的<a href="../objects/Buffer.htm">缓冲</a>对象.</em>
StrBuf(str, encoding)
{
    <em>; 计算所需的大小并分配缓冲.</em>
    buf := Buffer(StrPut(str, encoding))
    <em>; 复制或转换字符串.</em>
    StrPut(str, buf, encoding)
    return buf
}</pre>
</div>

</body>
</html>