<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>WinGetText - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The WinGetText function retrieves the text from the specified window." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>WinGetText</h1>

<p>从指定窗口检索文本.</p>

<pre class="Syntax">Text := <span class="func">WinGetText</span>(<span class="optional">WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>WinTitle</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a>, <a href="../Concepts.htm#numbers">整数</a>或<a href="../Objects.htm">对象</a></p>
    <p>识别目标窗口的窗口标题或其他条件. 请参阅 <a href="../misc/WinTitle.htm">WinTitle</a>.</p>
  </dd>

  <dt>WinText</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>如果存在, 此参数必须是目标窗口的单个文本元素的子字符串(和内置的 Window Spy 工具显示的一样). 如果 <a href="DetectHiddenText.htm">DetectHiddenText</a> 为 ON, 那么会检测隐藏文本元素.</p>
  </dd>

  <dt>ExcludeTitle</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>标题中含有此参数值的窗口将被排除.</p>
  </dd>

  <dt>ExcludeText</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>文本中含有此参数值的窗口将被排除.</p>
  </dd>

</dl>

<h2 id="Return_Value">返回值</h2>
<p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
<p>函数返回指定窗口的文本.</p>

<h2 id="Error_Handling">错误处理</h2>
<p>如果找不到窗口, 则抛出 <a href="../objects/Error.htm#TargetError">TargetError</a>.</p>
<p>如果在检索窗口文本时出现问题, 则抛出 <a href="../objects/Error.htm">Error</a>.</p>

<h2 id="Remarks">备注</h2>
<p>通常情况下获取的文本和 Window Spy 中显示的相同. 但是, 如果 <a href="DetectHiddenText.htm">DetectHiddenText</a> 为关闭状态, 则返回值中省略了隐藏的文本.</p>
<p>每个文本元素都以回车换行符(CR+LF) 结束, 它们在脚本中表示为 `r`n. 要提取个别行或子字符串, 请使用类似 <a href="InStr.htm">InStr</a> 和 <a href="SubStr.htm">SubStr</a> 的函数. <a href="LoopParse.htm">解析循环</a>还可用于逐个检查每行或每个单词.</p>
<p>如果获取的文本看起来像被截短了(不完整), 可能需要通过 <a href="SendMessage.htm">SendMessage</a> 发送 WM_GETTEXT 消息来获取文本. 这是很有必要的, 因为有些应用程序不能正确响应 WM_GETTEXTLENGTH 消息, 这会导致 AutoHotkey 将返回值设置得太小, 无法容纳所有的文本. 因为某些应用程序不能正确响应 WM_GETTEXTLENGTH 消息, 所以这是必要的, 否则会导致 AutoHotkey 把输出变量设的过小以致无法保存所有的文本.</p>
<p>如果目标窗口(例如打开大文档的编辑器) 包含大量文本, 则此函数可能会使用大量 RAM. 为了避免这种情况, 可以通过使用 <a href="ControlGetText.htm">ControlGetText</a> 来仅检索窗口文本的一部分. 无论如何, 以后可以通过将变量赋值为空来释放变量的内存, 例如 <code>Text := ""</code>.</p>
<p>要获取窗口中所有控件的列表, 请参照此例: <code>Controls := <a href="WinGetControls.htm">WinGetControls</a>(<i>WinTitle</i>)</code></p>
<p>窗口标题和文本是区分大小写的. 除非 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 被打开, 否则不会检测隐藏窗口.</p>

<h2 id="Related">相关</h2>
<p><a href="ControlGetText.htm">ControlGetText</a>, <a href="WinGetTitle.htm">WinGetTitle</a>, <a href="WinGetPos.htm">WinGetPos</a></p>
<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 打开计算器, 等待其存在, 并检索和报告其文本.</p>
<pre>Run "calc.exe"
WinWait "Calculator"
MsgBox "The text is:`n" WinGetText()  <em>; 使用由 WinWait 找到的窗口.</em></pre>
</div>

</body>
</html>