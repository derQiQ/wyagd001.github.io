<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>KeyWait - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The KeyWait function waits for a key or mouse/joystick button to be released or pressed down." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>KeyWait</h1>

<p>等待按键或鼠标/操纵杆按钮被松开或按下.</p>

<pre class="Syntax"><span class="func">KeyWait</span> KeyName <span class="optional">, Options</span></pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>KeyName</dt>
  <dd>
      <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
      <p>此参数可以是键盘中任何的单个字符或<a href="../KeyList.htm">按键列表</a>中的一个键名, 例如鼠标/操纵杆按钮. 不支持除操纵杆按钮外的其他操纵杆属性.</p>
      <p>还可以指定明确的虚拟按键代码, 例如 <code>vkFF</code>. 只有在一个按键没有指定名称且按下时不产生可见的字符这样少见的情况下, 这种方法才有用. 它的虚拟按键代码可以通过<a href="../KeyList.htm#SpecialKeys">按键列表页面</a>底部的步骤来确定.</p></dd>

  <dt>Options</dt>
  <dd>
      <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
      <p>如果此参数为空, 则函数会无限期等待用户松开指定的按键或鼠标/操纵杆按钮. 不过, 如果没有安装<a href="InstallKeybdHook.htm">键盘钩子</a>并且 <em>KeyName</em> 是使用类似 <a href="Send.htm">Send</a> 函数模拟释放的键盘按键, 则此按键会被视为物理松开了. 没有安装<a href="InstallMouseHook.htm">鼠标钩子</a>时, 对鼠标按钮同样如此.</p>
      <p>Options: 由一个或多个下列字母组成的字符串(可任意顺序, 字母间可以用空格分隔):</p>
      <p><strong>D</strong>: 等待按键被按下.</p>            
      <p><strong>L</strong>: 检测按键的逻辑状态, 这是操作系统和活动窗口所认为的按键所处的状态(可能和它的物理状态不一致). 对于操纵杆按钮会忽略此选项.</p>
      <p><strong>T</strong>: 超时(例如 <code>T3</code>). 超时前等待的秒数, 超时后返回 0. 如果按键或按钮达到指定的状态, 则函数不再等待超时时间到期. 相反地, 它会立即返回 1.</p>
      <p>此超时时间值可以为浮点数(例如 2.5), 但不能为十六进制值(例如 0x03).</p></dd>

</dl>

<h2 id="Return_Value">返回值</h2>
<p>类型: <a href="../Concepts.htm#boolean">整数(布尔值)</a></p>
<p>如果该函数超时, 则此函数返回 0(false), 否则返回 1(true).</p>

<h2 id="Remarks">备注</h2>
<p>如果没有安装键盘和/或鼠标钩子, 则按键或鼠标按钮的物理状态通常和逻辑状态一致(有时逻辑状态可能比物理状态滞后); 如果安装了钩子, 则它会准确反映出用户是否按下了按键. 您可以通过 <a href="KeyHistory.htm">KeyHistory</a> 函数或菜单项确定脚本中是否使用了钩子. 通过添加 <a href="InstallKeybdHook.htm">InstallKeybdHook</a> 和 <a href="InstallMouseHook.htm">InstallMouseHook</a> 函数到脚本中你可以强制安装其中一种或两种钩子.</p>
<p>当函数处于等待状态时, 可以通过<a href="../Hotkeys.htm">热键</a>, <a href="../objects/Menu.htm">自定义菜单项</a>或<a href="SetTimer.htm">计时器</a>启动新的<a href="../misc/Threads.htm">线程</a>.</p>
<p>要等待两个或多个按键被释放, 请连续使用 KeyWait. 例如:</p>
<pre>KeyWait "Control"  <em>; 等待 Control 和 Alt 被释放.</em>
KeyWait "Alt"</pre>
<p>要等待一组按键中的任意一个被按下, 请参阅 <a href="InputHook.htm">InputHook</a> 函数的示例部分.</p>
<h2 id="Related">相关</h2>
<p><a href="GetKeyState.htm">GetKeyState</a>, <a href="../KeyList.htm">Key List</a>, <a href="InputHook.htm">InputHook</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="InstallKeybdHook.htm">InstallKeybdHook</a>, <a href="InstallMouseHook.htm">InstallMouseHook</a>, <a href="ClipWait.htm">ClipWait</a>, <a href="WinWait.htm">WinWait</a></p>
<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 等待 A 被释放.</p>
<pre>KeyWait "a"</pre>
</div>

<div class="ex" id="ExDown">
<p><a class="ex_number" href="#ExDown"></a> 等待鼠标左键被按下.</p>
<pre>KeyWait "LButton", "D"</pre>
</div>

<div class="ex" id="ExTimeout">
<p><a class="ex_number" href="#ExTimeout"></a> 等待第一个操纵杆按钮在 3 秒内被按下.</p>
<pre>KeyWait "Joy1", "D T3"</pre>
</div>

<div class="ex" id="ExLogical">
<p><a class="ex_number" href="#ExLogical"></a> 等待左 Alt 键被逻辑释放.</p>
<pre>KeyWait "LAlt", "L"</pre>
</div>

<div class="ex" id="ExHotkey">
<p><a class="ex_number" href="#ExHotkey"></a> 当按下这个热键时, KeyWait 会等待用户物理释放 CapsLock 键. 因此, 后续的语句是在释放而不是按下时执行的. 这个行为类似于 <code>~CapsLock up::</code>.</p>
<pre>~CapsLock::
{
    KeyWait "CapsLock"  <em>; 等待用户物理释放按键.</em>
    MsgBox "按下和释放了 CapsLock 键."
}</pre>
</div>

<div class="ex" id="ExRemap">
<p><a class="ex_number" href="#ExRemap"></a> 重映射按键或鼠标按钮(这里仅为了演示, 因为使用<a href="../misc/Remap.htm">内置的重映射功能</a>会更容易). 当 NumpadAdd 按下时持续按住鼠标左键, 这样实际上把 NumpadAdd 映射成了鼠标左键.</p>
<pre>*NumpadAdd::
{
    MouseClick "left",,, 1, 0, "D"  <em>; 按住鼠标左键.</em>
    KeyWait "NumpadAdd"  <em>; 等待按键被释放.</em>
    MouseClick "left",,, 1, 0, "U"  <em>; 释放鼠标按钮.</em>
}</pre>
</div>

<div class="ex" id="ExDouble">
<p><a class="ex_number" href="#ExDouble"></a> 检测什么时候按下了某个按键两次(类似于双击). 当您按下 RControl 修饰另一个键时, 使用 KeyWait 来停止键盘自动重复功能以避免产生不想要的两次按下. 它通过保持热键线程的运行来实现这一点, 这依赖于 #MaxThreadsPerHotkey 默认设置值为 1, 从而阻止自动重复. 注意: 在 <a href="SetTimer.htm">SetTimer</a> 页面的底部有一个更精巧的脚本, 能分辨出单次, 两次和三次按下的区别.</p>
<pre>~RControl::
{
    if (A_PriorHotkey != "~RControl" or A_TimeSincePriorHotkey &gt; 400)
    {
        <em>; 两次按下时间间隔太长, 所以这不是按下两次.</em>
        KeyWait "RControl"
        return
    }
    MsgBox "两次按下右 control 键."
}</pre>
</div>

</body>
</html>