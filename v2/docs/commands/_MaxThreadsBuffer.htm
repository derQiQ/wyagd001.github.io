<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>#MaxThreadsBuffer - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The #MaxThreadsBuffer directive causes some or all hotkeys to buffer rather than ignore keypresses when their #MaxThreadsPerHotkey limit has been reached." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>#MaxThreadsBuffer</h1>

<p>当某些或所有的<a href="../Hotkeys.htm">热键</a>达到 <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> 限制时, 这个指令让它们缓冲而不是忽略键击.</p>

<pre class="Syntax"><span class="func">#MaxThreadsBuffer</span> <span class="optional">Setting</span></pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>Setting</dt>
  <dd>
    <p>指定以下值之一(如果省略, 则默认为 <strong>True</strong>):</p>
    <p><strong>True</strong> 或 <strong>1</strong>: 从这里到下一个 <code>#MaxThreadsBuffer False</code> 指令间的所有热键子程序在它们的子程序数目达到 <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> 限制时会缓存而不是忽略它们热键的键击.</p>
    <p><strong>False</strong> 或 <strong>0</strong>: 这是默认行为. 当运行的热键线程数已经达到最大数目(通常为 1, 不过可通过 <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> 改变) 时, 热键的键击会被忽略.</p>
  </dd>

</dl>

<h2 id="Remarks">备注</h2>
<p>很少使用此指令, 因为这种类型的缓冲通常都弊大于利, 所以默认情况下的设置为 OFF. 例如, 此设置为 ON 时, 如果您不小心按了两次热键, 会使该热键的子例程在其第一个<a href="../misc/Threads.htm">线程</a>完成时间少于 1 秒的情况下自动运行第二次(根据设计, 此类缓冲将在 1 秒后过期). 注意 AutoHotkey 中有多种其他方法可以缓冲热键(例如 <code><a href="Thread.htm">Thread</a> "Interrupt"</code> 和 <code><a href="Critical.htm">Critical</a></code>). 只是这种特殊的方法可能是有害的, 所以默认设置为 OFF.</p>
<p>此指令主要用于增加键盘自动重复功能的响应性. 例如, 当您按下一个 <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> 设置为 1(默认) 的热键时, 如果此热键的子程序正在运行中, 那么传入的键击会被忽略. 因此, 从子程序结束到下一次自动重复键击传入, 它可能需要等待 50 ms 或更多时间, 因为这是捕获到自动重复循环的键击的间隔. 为任何需要最好响应性的自动重复热键启用此指令可以避免这 50 ms 的延迟.</p>
<p>和所有的 # 指令一样, 这个指令不应该像函数那样放在脚本中(即它不需要被包含在子程序中). 相反, 应该把它放在您希望影响的首个热键之前.</p>
<p>和其他指令一样, #MaxThreadsBuffer 不能有条件地执行.</p>

<h2 id="Related">相关</h2>
<p><a href="_MaxThreads.htm">#MaxThreads</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="Critical.htm">Critical</a>, <a href="Thread.htm">Thread (函数)</a>, <a href="../misc/Threads.htm">线程</a>, <a href="Hotkey.htm">Hotkey</a>, <a href="../misc/A_MaxHotkeysPerInterval.htm">A_MaxHotkeysPerInterval</a>, <a href="_HotkeyInterval.htm">#HotkeyInterval</a>, <a href="ListHotkeys.htm">ListHotkeys</a></p>
<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 当达到 #MaxThreadsPerHotkey 限制时, 会使前两个热键缓冲而不是忽略按键.</p>
<pre>#MaxThreadsBuffer True
#x::MsgBox "This hotkey will use this type of buffering."
#y::MsgBox "And this one too."
#MaxThreadsBuffer False
#z::MsgBox "But not this one."</pre>
</div>

</body>
</html>