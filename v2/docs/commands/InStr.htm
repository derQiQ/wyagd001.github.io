<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>InStr - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The InStr function searches for a given occurrence of a string, from the left or the right." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>InStr</h1>

<p>在一个字符串中向右或向左搜索指定内容.</p>

<pre class="Syntax">FoundPos := <span class="func">InStr</span>(Haystack, Needle <span class="optional">, CaseSense, StartingPos, Occurrence</span>)</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>Haystack</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>搜索其内容的字符串.</p>
  </dd>
  
  <dt>Needle</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>要搜索的字符串.</p>
  </dd>
  
  <dt>CaseSense</dt>
  <dd>
    <p>类型:  <a href="../Concepts.htm#numbers">整数</a>或<a href="../Concepts.htm#strings">字符串</a></p>
    <p>下列值之一(如果省略, 默认为 0):</p>
    <p><code>"On"</code> 或 <code>1</code>(<code>True</code>): 搜索区分大小写.</p>
    <p><code>"Off"</code> 或 <code>0</code>(<code>False</code>): 字母 A-Z 被视为与其小写字母相同.</p>
    <p><code>"Locale"</code>: 根据当前用户的区域设置规则, 搜索是不区分大小写的. 例如, 在大多数英语及西欧地区, 不仅将 A-Z 视为等同于它们的小写形式, 同时也将非-ASCII 字母(如 &Auml; 和 &Uuml;) 视为等同的. 根据被比较字符串的性质, <em>Locale</em> 比 <em>Off</em> 慢 1 到 8 倍.</p>
  </dd>

  <dt>StartingPos</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>省略 <em>StartingPos</em> 来搜索整个字符串. 否则, 指定开始搜索的位置, 其中 1 是第一个字符, 2 是第二个字符, 以此类推. 负值从 <em>Haystack</em> 的末尾开始计算, 所以 -1 是最后一个字符, -2 倒数第二个, 以此类推.</p>
    <p>如果省略 <em>Occurrence</em>, 负的 <em>StartingPos</em> 会导致搜索从右到左进行. 然而, 如果指定了 <em>Occurrence</em>, <em>StartingPos</em> 对搜索的方向没有影响.</p>
    <p>对于从右到左的搜索, <em>StartingPos</em> 指定了第一个可能出现的 <em>Needle</em> 的 <em>最后</em> 一个字符的位置. 例如, <code>InStr("abc", "bc",, 2, +1)</code> 会找到一个匹配, 但 <code>InStr("abc", "bc",, 2, -1)</code> 则不会.</p>
    <p>如果 <em>StartingPos</em> 的绝对值大于 <em>Haystack</em> 的长度, 将返回 0.</p>
  </dd>

  <dt>Occurrence</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>如果省略 <em>Occurrence</em>, 它默认为 <em>Haystack</em> 中 <em>Needle</em> 的第一个匹配. 如果 <em>StartingPos</em> 为负数, 搜索将从右向左进行; 否则将从左向右进行.</p>
    <p>如果 <em>Occurrence</em> 是正数, 搜索总是从左到右进行. 为 <em>Occurrence</em> 指定 2 来返回第二个匹配的位置, 3 来返回第三个匹配的位置, 等等.</p>
    <p>如果 <em>Occurrence</em> 是负数, 搜索总是从右到左进行. 例如, -2 搜索从右边开始的第二次出现.</p>
  </dd>

  </dl>

<h2 id="Return_Value">返回值</h2>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>该函数返回字符串 <em>Needle</em> 在字符串 <em>Haystack</em> 中的出现位置. 位置 1 表示第一个字符; 因为 0 等同于 "false", 使它能提供直觉上 "没找到" 的意义.</p>
<p>不管 <em>StartingPos</em> 或 <em>Occurrence</em> 的值是多少, 返回值总是相对于 <em>Haystack</em> 中的第一个字符. 例如, "abc" 在 "123abc789" 中的位置始终是 4.</p>
<p>传统上, 空字符串(<code>""</code>) 的出现可以在任何位置找到. 然而, 由于空白的 <em>Needle</em> 通常只会被误传, 因此会被视为一个错误(抛出异常).</p>

<h2 id="Error_Handling">错误处理</h2>
<p>在以下任何一种情况下都会抛出 <a href="../objects/Error.htm#ValueError">ValueError</a>:</p>
<ul>
  <li><em>Needle</em> 是一个空(零长度) 字符串.</li>
  <li><em>CaseSense</em> 是无效的.</li>
  <li><em>Occurrence</em> 或 <em>StartingPos</em> 为 0 或非数字.</li>
</ul>

<h2 id="Remarks">备注</h2>
<p><a href="RegExMatch.htm">RegExMatch</a> 可用于搜索字符串中的模式(正则表达式), 这使得它比 InStr 更为灵活. 但是, 在搜索简单的子字符串时, InStr 通常比 RegExMatch 更快.</p>
<p>InStr 只搜索到第一个二进制零(空终止符), 而 RegExMatch 搜索整个字符串的<a href="StrLen.htm">长度</a>, 即使它包含二进制零.</p>

<h2 id="Related">相关</h2>
<p><a href="RegExMatch.htm">RegExMatch</a>, <a href="Is.htm">Is 函数</a></p>

<h2 id="Examples">示例</h2>
<div class="ex" id="ExRetValue">
<p><a class="ex_number" href="#ExRetValue"></a> 报告子字符串 "abc" 在字符串 "123abc789" 中以 1 开始的位置.</p>
<pre>MsgBox InStr("123abc789", "abc") <em>; 返回 4</em></pre>
</div>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 在 <var>Haystack</var> 中搜索 <var>Needle</var>.</p>
<pre>Haystack := "The Quick Brown Fox Jumps Over the Lazy Dog"
Needle := "Fox"
If InStr(Haystack, Needle)
    MsgBox "The string was found."
Else
    MsgBox "The string was not found."</pre>
</div>

<div class="ex" id="ExCaseSens">
<p><a class="ex_number" href="#ExCaseSens"></a> 演示不区分大小写和区分大小写搜索的区别.</p>
<pre>Haystack := "The Quick Brown Fox Jumps Over the Lazy Dog"
Needle := "the"
MsgBox InStr(Haystack, Needle, false, 1, 2) <em>; 不区分大小写的搜索, 返回第二次匹配的位置</em>
MsgBox InStr(Haystack, Needle, true) <em>; 区分大小写的搜索, 返回首次匹配的位置, 结果同上</em>
</pre>
</div>

</body>
</html>