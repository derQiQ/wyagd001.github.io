<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>ListView (GUI) - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="In its most recognizable form, the ListView control displays a tabular view of rows and columns. This page contains the methods to modify it." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>

<body>
<h1>ListView</h1>

<h2 id="toc">目录</h2>
<ul>
  <li><a href="#Intro">入门和简单示例</a></li>
  <li><a href="#Options">选项参数的选项和样式</a></li>
  <li><a href="#View">视图模式</a>: 报告(默认), 图标, 平铺, 小图标和列表.</li>
  <li><a href="#BuiltIn">ListView 的内置方法</a></li>
  <li><a href="#Events">事件</a></li>
  <li><a href="#IL">图像列表</a>(把图标添加到 ListView 的方法)</li>
  <li><a href="#Remarks">备注</a></li>
  <li><a href="#Examples">示例</a></li>
</ul>
<h2 id="Intro">入门和简单示例</h2>
<p>List-View 是由操作系统提供的最精心设计的控件之一. 在其最容易识别的形式中, 它显示一个多行多列组成的表格视图, 最常见的例子是资源管理器的文件和文件夹列表(详细信息视图).</p>
<p>ListView 通常是这样的:</p>
<img src="../static/ctrl_listview.png" alt="ListView" />
<p>尽管它可能是精细的, 但 ListView 的基本功能也易于使用. 创建 ListView 的语法为:</p>
<pre class="Syntax" id="GuiAdd">LV := GuiObj.<span class="func">Add</span>("ListView", Options, ["ColumnTitle1","ColumnTitle2","..."])</pre>
<p>这是一个可运行脚本, 它创建并显示一个 ListView 其中包含用户的 "我的文档" 目录中的文件列表:</p>
<pre><em>; 创建窗口:</em>
MyGui := Gui()

<em>; 创建含名称和大小两列的 ListView:</em>
LV := MyGui.Add("ListView", "r20 w700", ["Name","Size (KB)"])

<em>; 每当用户双击某行时, 通知脚本:</em>
LV.OnEvent("DoubleClick", LV_DoubleClick)

<em>; 从文件夹中获取文件名列表并把它们放入 ListView:</em>
Loop Files, A_MyDocuments "\*.*"
    <a href="#Add">LV.Add</a>(, A_LoopFileName, A_LoopFileSizeKB)

<a href="#ModifyCol">LV.ModifyCol</a>  <em>; 根据内容自动调整每列的大小.</em>
LV.ModifyCol(2, "Integer")  <em>; 为了进行排序, 指出列 2 是整数.</em>

<em>; 显示窗口:</em>
MyGui.Show

LV_DoubleClick(LV, RowNumber)
{
    RowText := <a href="#GetText">LV.GetText</a>(RowNumber)  <em>; 从行的第一个字段中获取文本.</em>
    ToolTip("You double-clicked row number " RowNumber ". Text: '" RowText "'")
}</pre>
<h2 id="Options">Options 参数的选项和样式</h2>
<p><strong>Background:</strong> 指定单词 Background 后面紧跟着颜色名称(请参阅<a href="../misc/Colors.htm">颜色列表</a>) 或 RGB 值(0x 前缀可以省略). 例如: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. 如果此选项不存在, ListView 初始默认为系统默认的背景色. 指定 <code>BackgroundDefault</code> 或 <code>-Background</code> 来应用系统的默认背景颜色(通常为白色). 例如, 使用 <code>LV.Opt("+BackgroundDefault")</code> 可以把 ListView 恢复为默认的颜色.</p>
<p><strong>C</strong>: 文本颜色. 指定字母 C 后面紧跟着颜色名称(请参阅<a href="../misc/Colors.htm">颜色列表</a>) 或 RGB 值(0x 前缀可以省略). 例如: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p id="Checked"><strong>Checked:</strong> 在每行的左侧提供一个复选框. 当<a href="#Add">添加</a>行时, 在其选项中指定单词 <em>Check</em> 来让复选框初始为选中而不是未选中状态. 用户可以点击复选框或按下空格键来选中或取消选中一行.</p>
<p id="Count"><strong>Count:</strong> 指定单词 Count 后面跟着 ListView 最后会包含的总行数. 这不是限制: 超过此数目后仍然可以添加行. 相反, 此选项给控件一个暗示, 允许它一次性的而不是每次添加一行时分配内存, 这样极大地提高了添加行时的性能(这也可以提高排序性能). 要提升更多的性能, 请在添加大量行之前使用 <code>LV.Opt("-Redraw")</code>. 随后, 使用 <code>LV.Opt("+Redraw")</code>  来重新启用重绘(这样也重绘了控件).</p>
<p><strong>Grid:</strong> 提供水平的和垂直的线以形象地显示出行与行和列与列之间的边界.</p>
<p><strong>Hdr:</strong> 指定 <code>-Hdr</code>(负 Hdr) 来隐藏标题(包含列标题的顶行). 后面要让它显示, 请使用 <code>LV.Opt("+Hdr")</code>.</p>
<p id="LVS_EX"><strong>LV:</strong> 指定字符串 LV 后面紧跟着<a href="../misc/Styles.htm#LVS_EX">扩展 ListView 样式</a>的数字. 这些样式完全独立于通用扩展样式. 例如, 指定 <code><strong>-E</strong>0x200</code> 会移除通用扩展样式 WS_EX_CLIENTEDGE, 这样将会移除控件的默认边框. 与之相比, 指定 <code><strong>-LV</strong>0x20</code> 会移除 <a href="#frs">LVS_EX_FULLROWSELECT</a> 选择整行的效果.</p>
<p><strong>LV0x10</strong>: 指定 <code>-LV0x10</code> 阻止用户通过拖动列标题到左边或右边来对它们重新排序. 然而, 通常没必要这么做, 因为列的实际重排不会影响脚本看到的列顺序. 例如, 从脚本的角度看第一列总是列 1, 即使用户实际已经把它移动到其他列的右边.</p>
<p id="frs"><strong>LV0x20</strong>: 指定 <code>-LV0x20</code> 来要求点击一行的第一个字段才可以进行选择(正常情况下, 点击 <em>任意</em> 字段都可以选择). 这样的好处是用户可以更方便地拖动矩形包围一组行来选择它们.</p>
<p><strong>Multi:</strong> 指定 <code>-Multi</code>(负 Multi) 来禁止用户一次选择多行.</p>
<p><strong>NoSortHdr:</strong> 禁止点击标题. 此时会显示平坦的外观而不是正常的类似按钮的外观. 与其他大多数 ListView 样式不同, 此样式在 ListView 创建后无法改变.</p>
<p id="NoSort"><strong>NoSort:</strong> 关闭当用户点击标题时发生的自动排序. 然而, 标题的外观看起来仍像按钮(除非指定了 NoSortHdr). 此外, <a href="../objects/GuiOnEvent.htm#ColClick">ColClick</a> 事件仍然会被触发, 所以脚本可以用自定义的排序或其他操作来响应.</p>
<p id="ReadOnly"><strong>ReadOnly:</strong>  指定 <code>-ReadOnly</code>(负 ReadOnly) 来允许编辑每行首列的文本. 要编辑某行, 请在选择后按下 <kbd>F2</kbd> 键(请参阅下面的 <a href="#WantF2">WantF2</a> 选项). 或者, 您可以对一行点击一次来选择它, 至少等待半秒钟, 然后再次点击同一行进行编辑.</p>
<p><strong>R</strong>: 行高(创建时). 指定字母 R 后面紧跟着要在控件中留出空间的行数. 例如, <code>R10</code> 会设置控件为 10 行的高度. 如果 ListView 是用报表视图以外的<a href="#View">视图模式</a>创建的, 那么控件的大小将适合于图标行而不是文本行. 注意: 在 ListView 的行中添加<a href="#IL">图标</a>将增加每行的高度, 这将使该选项不准确.</p>
<p id="Sort"><strong>Sort:</strong> 控件根据第一列的内容按字母顺序进行排序.</p>
<p id="SortDesc"><strong>SortDesc:</strong> 和上面一样, 不过这里是降序排列.</p>
<p id="WantF2"><strong>WantF2</strong>: 指定 <code>-WantF2</code>(负 WantF2) 阻止 <kbd>F2</kbd> 键<a href="#ReadOnly">编辑</a>当前聚焦的行. 这个设置会被忽略, 除非 <code>-<a href="#ReadOnly">ReadOnly</a></code> 也有效.</p>
<p><strong>(未命名的数值样式):</strong> 由于上述以外的其他样式很少使用, 所以没有为它们命名. 请参阅 <a href="../misc/Styles.htm#ListView">ListView 样式表</a>了解这些样式.</p>
<h2 id="View">视图模式</h2>
<p>ListView 有五种视图模式, 其中最常见的是报告视图(这是默认的). 要使用其他某种视图, 请在选项列表中指定它的名称. 还可以在控件创建后改变视图模式; 例如: <code>LV.Opt("+IconSmall")</code>.</p>
<p><strong>Icon:</strong> 显示大图标视图. 在该视图和除 <em>Report</em> 之外的所有其他视图中, 除第一列之外的其他列中的文本是不可见的. 要在这种模式下显示图标, 必须有一个大图标 <a href="#IL">ImageList</a> 分配给它.</p>
<p><strong>Tile</strong>: 显示大图标视图, 但具有人体工学差异, 例如每项的文本显示在图标的右边而不是下面. <a href="#Checked">Checkbox</a> 在此视图中不起作用.</p>
<p><strong>IconSmall:</strong> 显示小图标视图.</p>
<p><strong>List:</strong> 以列表格式显示小图标视图, 其中图标显示在列中. 列数取决于控件的宽度和其中最宽的文本项的宽度.</p>
<p><strong>Report:</strong> 切换回报告视图, 这是最初的默认模式. 例如: <code>LV.Opt("+Report")</code>.</p>
<h2 id="BuiltIn">ListViews 的内置方法</h2>
<p>除了<a href="../objects/GuiControl.htm"> GUI 控件的默认方法/属性</a>外, ListView 控件还有以下方法.</p>
<p id="RowNumber">当在此页面使用短语 "行号" 时, 它指的是行在 ListView 中的当前位置. 最上面的行是 1, 第二行是 2, 以此类推. 当行被添加后, 它的行号往往会因为其他行的排序, 删除和插入而改变. 因此, 如果要根据行的内容找到特定的行, 通常最好在循环中使用 <a href="#GetText">GetText 方法</a>.</p>
<p><strong>行的方法:</strong></p>
<ul>
  <li><a href="#Add">Add</a>: 添加新行到列表底部.</li>
  <li><a href="#Insert">Insert</a>: 在指定行号插入一个新行.</li>
  <li><a href="#Modify">Modify</a>: 修改行的属性和/或文本.</li>
  <li><a href="#Delete">Delete</a>: 删除指定行或所有行.</li>
</ul>
<p><strong>列的方法:</strong></p>
<ul>
  <li><a href="#ModifyCol">ModifyCol</a>: 修改指定列和标题的属性和/或文本.</li>
  <li><a href="#InsertCol">InsertCol</a>: 在指定列号插入一个新列.</li>
  <li><a href="#DeleteCol">DeleteCol</a>: 删除指定的列及其中所有内容.</li>
</ul>
<p><strong>检索方法:</strong></p>
<ul>
  <li><a href="#GetCount">GetCount</a>: 返回控件中行或列的总数.</li>
  <li><a href="#GetNext">GetNext</a>: 返回下一个选择, 选中或具有焦点的行的行号.</li>
  <li><a href="#GetText">GetText</a>: 检索指定行号和列号的文本.</li>
</ul>
<p><strong>其他方法:</strong></p>
<ul>
  <li><a href="#SetImageList">SetImageList</a>: 设置或替换用于显示图标的 ImageList.</li>
</ul>

  <div class="methodShort" id="Add">
    <h3>Add</h3>
    <p>添加新行到列表底部, 并返回新的<a href="#RowNumber">行号</a>, 如果 ListView 具有 <a href="#Sort">Sort</a> 或 <a href="#SortDesc">SortDesc</a> 样式, 则不一定是最后一行.</p>
    <pre class="Syntax">NewRowNumber := LV.<span class="func">Add</span>(<span class="optional">Options, Col1, Col2, ...</span>)</pre>
    <dl>
      <dt id="RowOptions">Options</dt>
      <dd>
<p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
<p>一个包含零个或多个下表中单词的字符串(不区分大小写). 在单词间使用空格或 tab 分隔. 要移除某个选项, 请在该选项前加上负号. 要添加选项, 在选项前的正号可以省略.</p>
<p><strong>Check</strong>: 在行中显示选中标记(需要 ListView 含有 <a href="#Checked">Checkbox</a>). 以后要取消选中它, 请使用 <code>LV.Modify(RowNumber, "-Check")</code>.</p>
<p id="ColN"><strong>Col</strong>: 指定单词 Col 后紧跟着列号, 从此列开始往后应用参数 <em>Col1</em> 及以后. 此选项通常和 <a href="#Modify">Modify 方法</a>一起使用来修改行中的个别字段, 而不会影响其左侧的字段.</p>
<p id="Focus"><strong>Focus</strong>: 设置键盘焦点到此行(通常和 Select 一起使用). 以后要取消它的焦点, 请使用 <code>LV.Modify(RowNumber, "-Focus")</code>.</p>
<p><strong>Icon</strong>: 指定单词 Icon 后紧跟着这行图标的编号, 这行图标显示在首列的左侧. 如果此选项不存在, 则使用 <a href="#IL">ImageList</a> 中的首个图标. 要显示空白图标, 请指定一个大于图像列表中图标数目的数字. 如果控件没有小图标的图像列表, 则<a href="#View">报告视图</a>中既不显示图标也不为其保留空间.</p>
<p><strong>Select</strong>: 选择行. 以后要取消选择, 请使用 <code>LV.Modify(RowNumber, "-Select")</code>. 当选择行时, 通常最好确保至少有一行总含有<a href="#Focus">聚焦属性</a>, 为这样允许 Apps 键在焦点行附近显示其<a href="../objects/GuiOnEvent.htm#ContextMenu">上下文菜单</a>(如果有). 单词 <em>Select</em> 后可以紧跟着 0 或 1 来表示初始状态. 换句话说, both <code>"Select"</code> 和 <code>"Select" <strong>.</strong> VarContainingOne</code> 是一样的(此处的句点是<a href="../Variables.htm#concat">连接运算符</a>). 这种技术也适用于上面的 <em>Focus</em> 和 <em>Check</em>.</p>
<p id="Vis"><strong>Vis</strong>: 必要时通过滚动 ListView 来确保指定行完全可见. 此参数仅对 LV.Modify 有效; 例如: <code>LV.Modify(RowNumber, "Vis")</code>.</p>
      </dd>
      <dt>Col1, Col2, ...</dt>
      <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>新行的列, 可以是文本或数字(包括数字<a href="../Variables.htm#Expressions">表达式</a>的结果). 要使任何字段成为空, 请指定 "" 或等价物. 如果字段太少无法填满所有的列, 那么末尾的列将被留空. 如果字段太多, 末尾的字段将被完全忽略.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Insert">
    <h3>Insert</h3>
    <p>在指定行之前插入一个新行, 并返回新的<a href="#RowNumber">行号</a>.</p>
    <pre class="Syntax">NewRowNumber := LV.<span class="func">Insert</span>(RowNumber <span class="optional">, Options, Col1, Col2, ...</span>)</pre>
    <dl>
      <dt>RowNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>新插入的行的行号. 任何位于 <em>RowNumber</em> 或其下方的行都会被向下移动, 以便为新行腾出空间. 如果 <em>RowNumber</em> 大于列表中的行数(甚至大于 2147483647), 新的行将被添加到列表的最后.</p>
      </dd>
      <dt>Options</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
        <p>请参阅 <a href="#RowOptions">row 选项</a>.</p>
      </dd>
      <dt>Col1, Col2, ...</dt>
      <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>新行的列, 可以是文本或数字(包括数字<a href="../Variables.htm#Expressions">表达式</a>的结果). 要使任何字段成为空, 请指定 "" 或等价物. 如果字段太少无法填满所有的列, 那么末尾的列将被留空. 如果字段太多, 末尾的字段将被完全忽略.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Modify">
    <h3>Modify</h3>
    <p>修改行的属性和/或文本, 成功后返回 1, 失败后返回 0.</p>
    <pre class="Syntax">LV.<span class="func">Modify</span>(RowNumber <span class="optional">, Options, NewCol1, NewCol2, ...</span>)</pre>
    <p>注意: 如果只存在前两个参数, 则仅修改行的属性而不改变其文本.</p>
    <dl>
      <dt>RowNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>要修改的行. 如果 <em>RowNumber</em> 为 0, 那么控件中的 <u>所有</u> 的行都会被修改(在这种情况下, 如果操作完全成功, 返回值为 1, 如果操作的任何部分失败, 返回值为 0).</p>
      </dd>
      <dt>Options</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
        <p><a href="#ColN">ColN 选项</a>可用于更新特定的列而不影响其他列. 有关其他选项, 请参阅 <a href="#RowOptions">row 选项</a>.</p>
      </dd>
      <dt>NewCol1, NewCol2, ...</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
        <p>指定行的新列, 可以是文本或数字(包括数字<a href="../Variables.htm#Expressions">表达式</a>的结果). 要使任何字段成为空, 请指定 "" 或等价物. 如果字段太少无法填满所有的列, 那么末尾的列将被留空. 如果字段太多, 末尾的字段将被完全忽略.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Delete">
    <h3>Delete</h3>
    <p>删除指定行或所有行, 成功后返回 1, 失败后返回 0.</p>
    <pre class="Syntax">LV.<span class="func">Delete</span>(<span class="optional">RowNumber</span>)</pre>
    <dl>
      <dt>RowNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>要删除的行. 如果省略此参数, 则删除 ListView 中 <strong>所有的</strong> 行.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="ModifyCol">
    <h3>ModifyCol</h3>
    <p>修改指定列和标题的属性和/或文本, 成功后返回 1, 失败后返回 0.</p>
    <pre class="Syntax">LV.<span class="func">ModifyCol</span>(<span class="optional">ColumnNumber, Options, ColumnTitle</span>)</pre>
    <p>注意: 如果省略所有参数, 则调整所有列的宽度以适应行的内容. 如果仅存在首个参数, 则仅调整指定列的大小. 只有在报告(详细信息) 视图中自动调整大小才有效果.</p>
    <dl>
      <dt>ColumnNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>要修改的列. 第一列编号为 1(不是 0).</p>
      </dd>
      <dt id="ColOptions">Options</dt>
      <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>一个包含零个或多个下表中单词的字符串(不区分大小写). 在单词间使用空格或 tab 分隔. 要移除选项, 请在选项前加上负号. 要添加选项, 在选项前的正号可以省略.</p>
    <hr>
    <p><strong><em>常规选项</em></strong></p>
    <p><strong>N</strong>: 指定 N 为列的新宽度, 单位为像素. 如果是唯一的选择, 这个数字可以不加引号. 例如, 后面两种形式都是有效的: <code>LV.ModifyCol(1, 50)</code> and <code>LV.ModifyCol(1, "50 Integer")</code>.</p>
    <p><strong>Auto</strong>: 调整列宽来适应其内容. 只有在报告(详细信息) 视图中此选项才有效果.</p>
    <p><strong>AutoHdr</strong>: 调整列宽来适应其内容和列标题的文本, 以其中较宽的为准. 当应用于最后一列时, 它将被设置为至少和 ListView 中剩余空间的宽度一样. 通常最好仅在行已经添加后才应用此设置, 因为这样允许当调整最后一列的大小时考虑到可能新增加的垂直滚动栏. 只有在报告(详细信息) 视图中此选项才有效果.</p>
    <p><strong>Icon</strong>: 指定单词 Icon 后紧跟着<a href="#IL">图像列表</a>中要显示在列标题文本后的图标的编号. 指定 <code>-Icon</code>(负 icon) 来移除任何现有的图标.</p>
    <p><strong>IconRight</strong>:  把图标放在列的右边而不是左.</p>
    <hr>
    <p><strong><em>数据类型选项</em></strong></p>
    <p><strong>Float</strong>: 为了进行排序, 指明此列包含浮点数(不支持十六进制格式). 浮点数和文本列的排序性能最多可能比整数列的慢 25 倍.</p>
    <p id="Integer"><strong>Integer</strong>: 为了进行排序, 指明此列包含整数. 要正确排序, 每个整数必须是 32 位的; 即在范围 -2147483648 到 2147483647 内. 任何非整数的值在排序时将被视为零(不过如果这些值以一个数字开头, 则使用这个数字). 数字格式可以为十进制或十六进制(例如 <code>0xF9E0</code>).</p>
    <p id="Text"><strong>Text</strong>: 更改列返回到文本模式进行排序, 这是每列初始默认的排序方式. 在排序时只有文本开始的 8190 个字符是有意义的(如果如果使用了 <a href="#Logical"><em>Logical</em> 选项</a>, 此时限制为 4094).</p>
    <hr>
    <p><strong><em>对齐选项</em></strong></p>
    <p><strong>Center</strong>: 让文本居于列中央. 要让 Integer 或 Float 列居中, 请把单词 Center 加到 Integer 或 Float 后.</p>
    <p><strong>Left</strong>: 左对齐列文本, 这是每列初始默认的对齐方式. 在较旧的操作系统中, 首列可能会强制进行左对齐.</p>
    <p><strong>Right</strong>: 右对齐列文本. 对于 Integer 和 Float 列不需要指定此属性, 因为它们默认是右对齐的. 通过指定例如 <code>"Integer Left"</code> 或 <code>"Float Center"</code> 的字符串可以覆盖此默认的对齐方式.</p>
    <hr>
    <p><strong><em>排序选项</em></strong></p>
    <p id="Case"><strong>Case</strong>: 让列排序区分大小写(仅影响<a href="#Text">文本</a>列). 如果 <em>Case</em>, <em>CaseLocale</em> 和 <em>Logical</em> 选项都省略, 则在排序中大写字母 A-Z 被视为等同于它们相应的小写形式.</p>
    <p><strong>CaseLocale</strong>: 让列排序基于当前用户的区域设置且不区分大小写(仅影响<a href="#Text">文本</a>列). 例如, 大多数英语和西欧地区把字母 A-Z 和 ANSI 字母例如 &Auml; 和 &Uuml; 等同于它们的小写形式. 这种方法也使用 "单词排序", 它把单词中的连字符和撇号例如 "coop" 和 "co-op" 保持在一起.</p>
    <p id="Desc"><strong>Desc</strong>: 降序排列. 用户首次对此列排序时使用下降的顺序.</p>
    <p id="Logical"><strong>Logical</strong>: 与 <em>CaseLocale</em> 相同, 除了把文本中的任何数字位序列看成真正的数字而不仅仅字符. 例如, 字符串 "T33" 将被视为大于 "T4". <em>Logical</em> 和 <em>Case</em> 是互斥的: 只有最近指定的那个才有效.</p>
    <p><strong>NoSort</strong>: 避免用户点击此列对自动排序产生的影响. 然而, <a href="../objects/GuiOnEvent.htm#ColClick">ColClick</a> 事件仍然会被触发, 所以脚本可以用自定义的排序或其他操作来响应. 要禁用所有列的排序而不仅是其中的子集, 请在 ListView 的选项中包含 <a href="#NoSort">NoSort</a>.</p>
    <p><strong>Sort</strong>: 立即对列按升序排列(即使它含有 <a href="#Desc">Desc</a> 选项).</p>
    <p><strong>SortDesc</strong>: 立即对列按降序排列.</p>
    <p><strong>Uni</strong>: 单向排序. 此选项防止在相同列进行第二次点击来反转排序方向.</p>
      </dd>
      <dt>ColumnTitle</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
        <p>新列的标题. 省略此参数, 使其保持不变.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="InsertCol">
    <h3>InsertCol</h3>
    <p>在指定列之前插入一个新列, 并返回新的列的位置编号.</p>
    <pre class="Syntax">NewColumnNumber := LV.<span class="func">InsertCol</span>(ColumnNumber <span class="optional">, Options, ColumnTitle</span>)</pre>
    <dl>
      <dt>ColumnNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>新插入列的列号. 在 <em>ColumnNumber</em> 处和其右侧的任何列都会向右移动, 以便为新列腾出空间. 第一列的编号为 1(不是 0). ListView 中的最大列数是 200. 如果 <em>ColumnNumber</em> 大于当前控件中的列数, 则新列被添加到列表的末尾(最右边). 新插入的列初始内容为空, 然而如果它是首列则会继承原来首列的内容, 同时原来首列的内容变为空的.</p>
      </dd>
      <dt>Options</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
        <p>新列的属性 -- 如是否使用<a href="#Integer">整数排序</a> -- 总是以默认值开始, 除非通过 <em><a href="#ColOptions">选项</a></em> 更改.</p>
      </dd>
      <dt>ColumnTitle</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
        <p>新列的标题.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="DeleteCol">
    <h3>DeleteCol</h3>
    <p>删除指定的列及其中所有内容, 成功后返回 1, 失败后返回 0.</p>
    <pre class="Syntax">LV.<span class="func">DeleteCol</span>(ColumnNumber)</pre>
    <dl>
      <dt>ColumnNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>要删除的列. 当一列被删除后, 位于其右侧的列号将减少 1. 因此, 调用 <code>LV.DeleteCol(2)</code> 两次将删除第二列和第三列.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="GetCount">
    <h3>GetCount</h3>
    <p>返回控件中行或列的总数.</p>
    <pre class="Syntax">CountNumber := LV.<span class="func">GetCount</span>(<span class="optional">Mode</span>)</pre>
    <dl>
      <dt>Mode</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
        <p>当此参数被省略时, 返回控件中的总行数. 当此参数为 "S" 或 "Selected" 时, 计数只包括选中/高亮的行. 当该参数为 "Col" 或 "Column" 时, 返回控件中的列数. 返回值将被即时检索, 因为控件会跟踪这些计数.</p>
      </dd>
    </dl>
    <p>这个方法通常用于 Loop 的顶行, 在这种情况下, 这个方法只会被调用一次(在首次循环前). 例如:</p>
    <pre>Loop LV.GetCount
{
    RetrievedText := LV.GetText(A_Index)
    if InStr(RetrievedText, "some filter text")
        LV.Modify(A_Index, "Select")  <em>; 选择首个字段包含过滤文本的所有行.</em>
}</pre>
    <p>要获取 ListView 的列宽 -- 用于例如保存它们到 INI 文件以便在会话期间保持一致 -- 请参照此例:</p>
    <pre>
Loop LV.GetCount("Column")
{
    ColWidth := SendMessage(0x101D, A_Index - 1, 0, LV)  <em>; 0x101D 是 LVM_GETCOLUMNWIDTH.</em>
    MsgBox("Column " A_Index "'s width is " ColWidth ".")
}</pre>
  </div>
  <div class="methodShort" id="GetNext">
    <h3>GetNext</h3>
    <p>返回下一个选择, 选中或具有焦点的行的行号, 否则为零.</p>
    <pre class="Syntax">RowNumber := LV.<span class="func">GetNext</span>(<span class="optional">StartingRowNumber, RowType</span>)</pre>
    <dl>
      <dt>StartingRowNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>如果省略或小于 1, 则从列表的顶部开始搜索. 否则, 从 <em>StartingRowNumber</em> 行后开始搜索.</p>
      </dd>
      <dt>RowType</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
        <p>如果省略 , 则搜索下一个选择的/高亮的行. 否则, 指定 "C" 或 "Checked" 来寻找下一个选中的行; 或 "F" 或 "Focused" 来寻找焦点行(在整个列表中不可能有多个焦点行, 且有时甚至没有).</p>
      </dd>
    </dl>
    <p>下面的例子, 报告 ListView 中所有选择的行:</p>
    <pre>RowNumber := 0  <em>; 这样使得首次循环从列表的顶部开始搜索.</em>
Loop
{
    RowNumber := LV.GetNext(RowNumber)  <em>; 在前一次找到的位置后继续搜索.</em>
    if not RowNumber  <em>; 上面返回零, 所以选择的行已经都找到了.</em>
        break
    Text := LV.GetText(RowNumber)
    MsgBox('The next selected row is #' RowNumber ', whose first field is "' Text '".')
}</pre>
    <p>判断一个特定的行是否被选中的另一种方法如下:</p>
    <pre>
ItemState := SendMessage(0x102C, RowNumber - 1, 0xF000, LV)  <em>; 0x102C 是 LVM_GETITEMSTATE. 0xF000 是 LVIS_STATEIMAGEMASK.</em>
IsChecked := (ItemState &gt;&gt; 12) - 1  <em>; 如果 <i>RowNumber</i> 为选中的则设置 IsChecked 为真, 否则为假.</em></pre>
  </div>
  <div class="methodShort" id="GetText">
    <h3>GetText</h3>
    <p>检索指定行号和列号的文本.</p>
    <pre class="Syntax">RetrievedText := LV.<span class="func">GetText</span>(RowNumber <span class="optional">, ColumnNumber</span>)</pre>
    <dl>
      <dt>RowNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>要检索文本的行的编号. 如果该参数为 0, 则获取列标题的文本. <em>RetrievedText</em> 的最大长度为 8191.</p>
      </dd>
      <dt>ColumnNumber</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>列的编号, 指定行所在的位置. 如果省略, 默认为 1(第一列的文本). 脚本看到的列号不会因为用户拖放列而改变. 例如, 最初首列的编号仍是 1, 即使用户把它拖到其他列的右边.</p>
      </dd>
    </dl>
  </div>
  <h3 id="bifIcon">设置图标</h3>
  <div class="methodShort" id="SetImageList">
    <h3>SetImageList</h3>
    <p>设置或替换用于显示图标的 <a href="#IL">ImageList(图像列表)</a>, 并返回之前与该控件相关联的 ImageListID(如果没有, 则返回 0).</p>
    <pre class="Syntax">PrevImageListID := LV.<span class="func">SetImageList</span>(ImageListID <span class="optional">, IconType</span>)</pre>
    <dl>
      <dt>ImageListID</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>从之前调用 <a href="ListView.htm#IL_Create">IL_Create</a> 返回的数字.</p>
      </dd>
      <dt>IconType</dt>
      <dd>
        <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
        <p>如果省略第二个参数, 则自动检测 ImageList 中的图标类型为大图标或小图标. 否则, 指定 0 为大图标, 1 为小图标, 2 为状态图标(状态图标还不直接支持, 但可以通过 <a href="SendMessage.htm">SendMessage</a> 使用).</p>
      </dd>
    </dl>
<p>这个方法通常在向 ListView 添加任何行之前被调用.</p>
    <p>一个 ListView 最多可以有两个图像列表: 小图标和/或大图标. 当脚本允许用户在大图标视图之间进行切换时, 这很有用. 要再关联一个图像列表到 ListView, 请再次调用 SetImageList 方法, 指定第二个列表的 ImageListID. 一个同时拥有大图标和小图标 ImageList 的 ListView 应该确保两个列表中的图标顺序相同. 这是因为相同的 ID 号被用来引用特定图标的大版本和小版本.</p>
<p>尽管除了图标模式和平铺模式外, 传统的所有的<a href="#View">视图模式</a>都显示小图标, 但可以通过传递一个大图标列表到 SetImageList 方法, 并且在第二个参数中指定 1(小图标) 覆盖此行为. 这也增加了 ListView 中每行的高度以适合大图标.</p>
    <p>
      任何这种分离的图像列表通常都应该通过 <a href="ListView.htm#IL_Destroy">IL_Destroy</a> 来销毁.</p>
  </div>

<h2 id="Events">事件</h2>
<p>以下事件可以通过调用 <a href="../objects/GuiOnEvent.htm">OnEvent</a> 来注册一个回调函数或方法来检测:</p>
<table class="info">
  <tr><th>事件</th><th>当...触发</th></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Click">Click</a></td><td>控件被点击.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a></td><td>控件被双击.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ColClick">ColClick</a></td><td>列标题被点击.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a></td><td>当控件拥有键盘焦点时, 用户右键单击控件或按下 <kbd>Menu</kbd> 或 <kbd>Shift</kbd>+<kbd>F10</kbd>.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Focus">Focus</a></td><td>控件获得键盘焦点.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a></td><td>控件失去键盘焦点.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemCheck">ItemCheck</a></td><td>一个项目被选中或取消选中.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemEdit">ItemEdit</a></td><td>一个项目的标签被用户编辑.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemFocus">ItemFocus</a></td><td>焦点项目改变.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemSelect">ItemSelect</a></td><td>一个项目被选中或取消选中.</td></tr>
</table>
<p>额外的(很少使用的) 通知可以通过使用 <a href="../objects/GuiOnNotify.htm">OnNotify</a> 来检测. 这些通知在 <a href="https://msdn.microsoft.com/library/ff485962">MSDN 上都有文档</a>. MSDN 没有显示每个通知代码的数值; 这些可以在 Windows SDK 中找到, 或者在互联网上搜索.</p>

<h2 id="IL">ImageList(图像列表)</h2>
<p>图像列表是存储在内存中的一组相同大小的图标. 在创建时, 每个图像列表是空的. 脚本重复调用 IL_Add 来添加图标到列表中, 且给每个图标分配一个序号, 序号从 1 开始. 脚本引用此编号在一行中或列标题中显示一个特定的图标. 这是个可运行示例, 其中演示了如何在 ListView 的行中显示图标:</p>
<pre>MyGui := Gui()  <em>; 创建 MyGui 窗口.</em>
LV := MyGui.Add("ListView", "h200 w180", ["Icon &amp; Number","Description"])  <em>; 创建 ListView.</em>
ImageListID := <a href="#IL_Create">IL_Create</a>(10)  <em>; 创建加载 10 个小图标的图像列表.</em>
LV.<a href="#SetImageList">SetImageList</a>(ImageListID)  <em>; 把上面的图像列表指定给当前的 ListView.</em>
Loop 10  <em>; 把 DLL 中的一系列图标装入图像列表.</em>
    <a href="#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index) 
Loop 10  <em>; 在 ListView 中添加行(出于演示的目的, 每个图标一行).</em>
    LV.Add("Icon" . A_Index, A_Index, "n/a")
LV.ModifyCol("Hdr")  <em>; 自动调整列宽.</em>
MyGui.Show</pre>
<h3 id="IL_Create">IL_Create</h3>
  <p>创建一个新的图像列表, 初始为空, 返回图像列表的唯一 ID(失败时为 0).</p>
  <pre class="Syntax">ImageListID := <span class="func">IL_Create</span>(<span class="optional">InitialCount := 2, GrowCount := 5, LargeIcons := false</span>)</pre>
  <dl>
    <dt>InitialCount</dt>
    <dd>
      <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
      <p>你希望立即放入列表中的图标数量(如果省略, 默认为 2).</p>
    </dd>
    <dt>GrowCount</dt>
    <dd>
      <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
      <p>列表的图标数量, 每次超过当前列表的容量时, 列表的图标数量将增长(如果省略, 默认为 5).</p>
    </dd>
    <dt>LargeIcons</dt>
    <dd>
      <p>类型: <a href="../Concepts.htm#boolean">整数(布尔值)</a></p>
      <p>如果这个参数为 1(true), 则图像列表将包含大图标. 如果为 0(false), 则它包含小图标(这是省略时的默认情况). 会按比例对添加到列表中的图标自动进行缩放以符合系统中大图标和小图标的尺寸.</p>
    </dd>
  </dl>
<h3 id="IL_Add">IL_Add</h3>
  <p>添加图标或图片到指定的图像列表, 并返回新图标的索引(首个图标索引为 1, 第二个为 2, 依此类推).</p>
  <pre class="Syntax">IconIndex := <span class="func">IL_Add</span>(ImageListID, Filename <span class="optional">, IconNumber, ResizeNonIcon</span>)</pre>
  <dl>
    <dt>ImageListID</dt>
    <dd>
      <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
      <p><a href="#IL_Create">IL_Create</a> 创建的图像列表的 ID.</p>
    </dd>
    <dt>Filename</dt>
    <dd>
      <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
      <p>图标(.ICO), 光标(.CUR) 或动画光标(.ANI) 文件的名称(动态光标在 ListView 中显示时实际将不会动), 或<a href="../misc/ImageHandles.htm">位图或图标句柄 </a>, 如 <code>"HBITMAP:" handle</code>. 图标的其他来源包含下列类型的文件: EXE, DLL, CPL, SCR, 以及包含图标资源的其他类型.</p>
    </dd>
    <dt>IconNumber</dt>
    <dd>
      <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
      <p>要使用文件中第一个以外的图标组, 请在 <em>IconNumber</em> 指定它的编号. 如果 <em>IconNumber</em> 为负数, 则假定其绝对值表示可执行文件中图标的资源 ID. 在下面的例子中, 将使用第二个图标组中的默认图标: <code>IL_Add(ImageListID, "C:\My Application.exe", 2)</code>.</p>
    </dd>
    <dt>ResizeNonIcon</dt>
    <dd>
      <p>类型: <a href="../Concepts.htm#boolean">整数(布尔值)</a></p>
      <p>还可以加载非图标图像, 例如 BMP, GIF 和 JPG. 然而, 此时应该指定最后两个参数以确保正确执行: <em>IconNumber</em> 应该为屏蔽的/透明的颜色编码(对于大多数图片 0xFFFFFF[白色] 可能是最佳的); 而 <em>ResizeNonIcon</em> 应该为非零值来缩放图片为单个图标, 或者为零来把图像分割为多个可以匹配实际宽度的图标.</p>
      <p>支持的图片类型包括 ANI, BMP, CUR, EMF, Exif, GIF, ICO, JPG, PNG, TIF 和 WMF.</p>
    </dd>
  </dl>
<h3 id="IL_Destroy">IL_Destroy</h3>
  <p>删除指定的图像列表, 成功时返回 1, 而失败返回 0.</p>
  <pre class="Syntax">Success := <span class="func">IL_Destroy</span>(ImageListID)</pre>
  <dl>
    <dt>ImageListID</dt>
    <dd>
      <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
      <p><a href="#IL_Create">IL_Create</a> 创建的图像列表的 ID.</p>
    </dd>
  </dl>
  <p>
    注意: 通常没必要销毁图像列表, 因为一旦关联到 ListView, 当 ListView 或其父窗口销毁时它们会被自动销毁. 但是, 如果一个 ListView 和其他 ListView 共享图像列表(通过在选项中包含 <code>0x40</code>), 在所有使用此图像列表的 ListView 销毁后脚本应该显式地销毁它. 同样地, 如果脚本使用一个新的图像列表代替 ListView 中原来的, 则应该显式销毁原来的图像列表.</p>

<h2 id="Remarks">备注</h2>
<p><a href="../objects/Gui.htm#Submit">Gui.Submit</a> 对 ListView 控件没有效果.</p>
<p>在对某个列进行排序后 -- 通过用户点击其标题或脚本调用 <code>LV.<a href="#ModifyCol">ModifyCol</a>(1, "Sort")</code> -- 任何随后添加的行将出现在列表的底部而不会遵循排序顺序. 例外情况是 <a href="#Sort">Sort</a> 和 <a href="#SortDesc">SortDesc</a> 样式, 它们会把新添加的行移动正确的位置.</p>
<p id="Enter">当 ListView 拥有焦点时如果要检测到用户是否按下 <kbd>Enter</kbd> 键, 请使用<a href="GuiControls.htm#DefaultButton">默认按钮</a>(如果需要则可以隐藏它). 例如:</p>
<pre>MyGui.Add("Button", "Hidden Default", "OK").OnEvent("Click", LV_Enter)
...
LV_Enter(*) {
    global
    if MyGui.FocusedCtrl != LV
        return
    MsgBox("Enter was pressed. The focused row number is " LV.GetNext(0, "Focused"))
}</pre>
<p>使用键盘除了在行与行之间导航外, 用户还可以通过输入首列中一个项目名称的前几个字符来进行增量搜索. 这使得选择对象跳转到最近匹配的行.</p>
<p>尽管 ListView 中的每个字段可以存储任意长度的文本, 但仅显示开始的 260 个字符.</p>
<p>尽管 ListView 中可以使用的最大行数仅受系统可用内存的限制, 但参照 <a href="#Count">Count</a> 选项中描述的方法可以极大地提高添加行的性能.</p>
<p>可以使用图片作为 ListView 周围的背景(即作为 ListView 的框架). 要实现这个效果, 请在 ListView 后创建<a href="GuiControls.htm#Picture">图片控件</a>并且在图片控件的 <em>Options</em> 中包含 <code>0x4000000</code>(这是 WS_CLIPSIBLINGS).</p>
<p>脚本可以在每个窗口中创建多个 ListView.</p>
<p>最好不要使用 <a href="SendMessage.htm">SendMessage</a> 直接插入或删除列. 这是因为程序为每个列维护一个<a href="#Integer">排序参数</a>集, 而这会让它们无法同步. 作为替代, 请使用<a href="#BuiltIn">内置的列的方法</a>.</p>
<p>要对 ListView 执行一些操作(例如调整大小, 隐藏或改变字体), 请参阅 <a href="../objects/GuiControl.htm">GuiControl 对象</a>.</p>
<p>要从外部 ListView(那些不属于脚本自身的) 中提取文本, 请使用 <a href="ListViewGetContent.htm">ListViewGetContent</a>.</p>
<h2 id="Related">相关</h2>
<p><a href="TreeView.htm">TreeView</a>, <a href="GuiControls.htm">其他控件类型</a>, <a href="../objects/Gui.htm#Call">Gui</a>, <a href="../objects/GuiOnEvent.htm#ContextMenu">ContextMenu 事件</a>, <a href="../objects/Gui.htm">Gui 对象</a>, <a href="../objects/GuiControl.htm">GuiControl 对象</a>, <a href="../misc/Styles.htm#ListView">ListView 样式列表</a></p>
<h2 id="Examples">示例</h2>

<div class="ex" id="ExAllRows">
<p><a class="ex_number" href="#ExAllRows"></a> 指定行号为 0 来选择或取消选择所有行.</p>
<pre>LV.<a href="#Modify">Modify</a>(0, "Select")   <em>; 选择所有行.</em>
LV.Modify(0, "-Select")  <em>; 取消选择所有行.</em>
LV.Modify(0, "-Check")  <em>;取消选中所有<a href="#Checked">复选框</a>.</em></pre>
</div>

<div class="ex" id="ExAutoSize">
<p><a class="ex_number" href="#ExAutoSize"></a> 自动根据内容调整所有列的宽度.</p>
<pre>LV.<a href="#ModifyCol">ModifyCol</a>  <em>; 此模式不需要参数.</em></pre>
</div>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> 下面是一个比页面顶部的脚本更复杂的可工作的脚本. 它显示用户选择的文件夹中的文件, 且每个文件分配一个与其类型关联的图标. 用户在一个文件上双击或在一个或多个文件上右击后, 会显示上下文菜单.</p>
<pre><em>; 创建 GUI 窗口:</em>
MyGui := Gui("+Resize")  <em>; 允许用户最大化窗口或拖动来改变窗口的大小.</em>

<em>; 创建一些按钮:</em>
B1 := MyGui.Add("Button", "Default", "Load a folder")
B2 := MyGui.Add("Button", "x+20", "Clear List")
B3 := MyGui.Add("Button", "x+20", "Switch View")

<em>; 通过 <a href="#GuiAdd">MyGui.Add</a> 创建 ListView 及其列:</em>
LV := MyGui.Add("ListView", "xm r20 w700", ["Name","In Folder","Size (KB)","Type"])
<a href="#ModifyCol">LV.ModifyCol</a>(3, "Integer")  <em>; 为了排序, 表示 Size 列中的内容是整数.</em>

<em>; 创建图像列表, 这样 ListView 才可以显示图标:</em>
ImageListID1 := <a href="#IL_Create">IL_Create</a>(10)
ImageListID2 := IL_Create(10, 10, true)  <em>; 搭配小图标列表的大图标列表.</em>

<em>; 将图像列表附加到 ListView 上, 这样它就可以在以后显示图标:</em>
<a href="#SetImageList">LV.SetImageList</a>(ImageListID1)
LV.SetImageList(ImageListID2)

<em>; 应用控件事件:</em>
LV.OnEvent("<a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>", RunFile)
LV.OnEvent("<a href="../objects/GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a>", ShowContextMenu)
B1.OnEvent("Click", LoadFolder)
B2.OnEvent("Click", (*) =&gt; <a href="#Delete">LV.Delete</a>())
B3.OnEvent("Click", SwitchView)

<em>; 应用窗口事件:</em>
MyGui.OnEvent("Size", Gui_Size)

<em>; 显示窗口:</em>
MyGui.Show()

LoadFolder(*)
{
    static IconMap := Map()
    MyGui.Opt("+OwnDialogs") <em>; 强制用户在使用主窗口之前关闭下面的对话框.</em>
    Folder := DirSelect(, 3, "Select a folder to read:")
    if not Folder  <em>; 用户取消对话框.</em>
        return

    <em>; 检查文件夹名称的最后一个字符是否为反斜杠, 对于根目录则会如此,
    ; 例如 C:\. 如果是, 则移除这个反斜杠以避免之后出现两个反斜杠.</em>
    if SubStr(Folder, -1, 1) = "\"
        Folder := SubStr(Folder, 1, -1)  <em>; 移除尾部的反斜杠.</em>

    <em>; 计算 SHFILEINFO 结构需要的缓冲大小.</em>
    sfi_size := A_PtrSize + 688
    sfi := Buffer(sfi_size)

    <em>; 获取所选择文件夹中的文件名列表并添加到 ListView:</em>
    LV.Opt("-Redraw")  <em>; 在加载时禁用重绘来提升性能.</em>
    Loop Files, Folder "\*.*"
    {
        FileName := A_LoopFilePath  <em>; 必须保存到可写的变量中供后面使用.</em>

        <em>; 建立唯一的扩展 ID 以避免变量名中的非法字符,
        ; 例如破折号. 这种使用唯一 ID 的方法也会执行地更好,
        ; 因为在数组中查找项目不需要进行搜索循环.</em>
        SplitPath(FileName,,, &amp;FileExt)  <em>; 获取文件扩展名.</em>
        if FileExt ~= "^(EXE|ICO|ANI|CUR)$"
        {
            ExtID := FileExt  <em>; 特殊 ID 作为占位符.</em>
            IconNumber := 0  <em>; 将其标记为未找到, 以便这些类型可以有一个唯一的图标.</em>
        }
        else  <em>; 其他的扩展名/文件类型, 计算它们的唯一 ID.</em>
        {
            ExtID := 0  <em>; 进行初始化来处理比其他更短的扩展名.</em>
            Loop 7     <em>; 限制扩展名为 7 个字符, 这样之后计算的结果才能存放到 64 位值.</em>
            {
                ExtChar := SubStr(FileExt, A_Index, 1)
                if not ExtChar  <em>; 没有更多字符了.</em>
                    break
                <em>; 把每个字符与不同的位置进行运算来得到唯一 ID:</em>
                ExtID := ExtID | (Ord(ExtChar) &lt;&lt; (8 * (A_Index - 1)))
            }
            <em>; 检查此文件扩展名的图标是否已经在图像列表中. 如果是,
            ; 可以避免多次调用并极大提高性能,
            ; 尤其对于包含数以百计文件的文件夹而言:</em>
            IconNumber := IconMap.Has(ExtID) ? IconMap[ExtID] : 0
        }
        if not IconNumber  <em>; 此扩展名还没有相应的图标, 所以进行加载.</em>
        {
            <em>; 取与此文件扩展名关联的高质量小图标:</em>
            if not DllCall("Shell32\SHGetFileInfoW", "Str", FileName
            , "Uint", 0, "Ptr", sfi, "UInt", sfi_size, "UInt", 0x101)  <em>; 0x101 是 SHGFI_ICON+SHGFI_SMALLICON</em>
                IconNumber := 9999999  <em>; 把它设置到范围外来显示空图标.</em>
            else <em>; 成功加载图标.</em>
            {
                <em>; 从结构中提取 hIcon 成员:</em>
                hIcon := NumGet(sfi, 0, "Ptr")
                <em>; 直接添加 HICON 到小图标和大图标列表.
                ; 下面加上 1 来把返回的索引从基于零转换到基于一:</em>
                IconNumber := DllCall("ImageList_ReplaceIcon", "Ptr", ImageListID1, "Int", -1, "Ptr", hIcon) + 1
                DllCall("ImageList_ReplaceIcon", "Ptr", ImageListID2, "Int", -1, "Ptr", hIcon)
                <em>; 现在已经把它复制到图像列表, 所以应销毁原来的:</em>
                DllCall("DestroyIcon", "Ptr", hIcon)
                <em>; 缓存图标来节省内存并提升加载性能:</em>
                IconMap[ExtID] := IconNumber
            }
        }

        <em>; 在 ListView 中创建新行并把它和上面的图标编号进行关联:</em>
        <a href="#Add">LV.Add</a>("Icon" . IconNumber, A_LoopFileName, A_LoopFileDir, A_LoopFileSizeKB, FileExt)
    }
    LV.Opt("+Redraw")  <em>; 重新启用重绘(上面把它禁用了).</em>
    LV.ModifyCol()  <em>; 根据内容自动调整每列的大小.</em>
    LV.ModifyCol(3, 60)  <em>; 把 Size 列加宽一些以便显示出它的标题.</em>
}

SwitchView(*)
{
    static IconView := false
    if not IconView
        LV.Opt("+Icon")        <em>; 切换到图标视图.</em>
    else
        LV.Opt("+Report")      <em>; 切换回详细信息视图.</em>
    IconView := not IconView   <em>; 进行反转以为下次做准备.</em>
}

RunFile(LV, RowNumber)
{
    FileName := LV.GetText(RowNumber, 1) <em>; 获取首个字段的文本.</em>
    FileDir := LV.GetText(RowNumber, 2)  <em>; 获取第二个字段的文本.</em>
    try
        Run(FileDir "\" FileName)
    catch
        MsgBox("Could not open " FileDir "\" FileName ".")
}

ShowContextMenu(LV, Item, IsRightClick, X, Y)  <em>; 响应右键或 Apps 键.</em>
{
    <em>; 创建弹出式菜单, 作为上下文菜单使用:</em>
    static ContextMenu := Menu()
    ContextMenu.Add("Open", OpenOrProperties)
    ContextMenu.Add("Properties", OpenOrProperties)
    ContextMenu.Add("Clear from ListView", ClearRows)
    ContextMenu.Default := "Open"  <em>; 将 "Open(打开)" 改为粗体字, 以表明这是双击的默认动作.
    ; 在所提供的 X 和 Y 坐标处显示菜单.
    ; 这些应该被使用, 因为即使用户按了 Apps 键, 它们也能提供正确的坐标:</em>
    ContextMenu.Show(X, Y)

    OpenOrProperties(ItemName, *)  <em>; 用户在上下文菜单中选择了 "Open" 或 "Properties".</em>
    {
        FileName := LV.GetText(Item, 1) <em>; 获取首个字段的文本.</em>
        FileDir := LV.GetText(Item, 2)  <em>; 获取第二个字段的文本.</em>
        try
        {
            if (ItemName = "Open")  <em>; 用户在上下文菜单中选择了 "Open".</em>
                Run(FileDir "\" FileName)
            else
                Run("properties " FileDir "\" FileName)
        }
        catch
            MsgBox("Could not perform requested action on " FileDir "\" FileName ".")
    }

    ClearRows(*)  <em>; 用户在上下文菜单中选择了 "Clear".</em>
    {
        RowNumber := 0  <em>; 这会使得首次循环从顶部开始搜索.</em>
        Loop
        {
            <em>; 由于删除了一行使得此行下面的所有行的行号都减小了,
            ; 所以把行号减 1, 这样搜索里包含的行号才会与之前找到的行号相一致
            ; (以防选择了相邻行):</em>
            RowNumber := LV.GetNext(RowNumber - 1)
            if not RowNumber  <em>; 上面返回零, 所以没有更多选择的行了.</em>
                break
            LV.Delete(RowNumber)  <em>; 从 ListView 中删除行.</em>
        }
    }
}

Gui_Size(thisGui, MinMax, Width, Height)  <em>; 扩大或缩小 ListView 来响应用户对窗口大小的改变.</em>
{
    if MinMax = -1  <em>; 窗口被最小化了. 无需进行操作.</em>
        return
    <em>; 否则, 窗口的大小被调整过或被最大化了. 调整 ListView 的大小来适应.</em>
    LV.Move(,, Width - 20, Height - 40)
}</pre>
</div>

</body>
</html>