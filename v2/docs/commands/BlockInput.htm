<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>BlockInput - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The BlockInput function disables or enables the user's ability to interact with the computer via keyboard and mouse." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>BlockInput</h1>

<p>禁用或启用用户通过键盘和鼠标与计算机交互的能力.</p>

<pre class="Syntax"><span class="func">BlockInput</span> OnOff
<span class="func">BlockInput</span> SendMouse
<span class="func">BlockInput</span> MouseMove</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>OnOff</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a>或<a href="../Concepts.htm#boolean">整数(布尔值)</a></p>
    <p>此模式无条件地阻塞所有用户输入. 指定下列值之一:</p>
    <p><strong>On</strong> 或 1(<a href="../Variables.htm#True">true</a>): 阻止用户与计算机交互(鼠标和键盘输入都无效).</p>
    <p><strong>Off</strong> 或 0(<a href="../Variables.htm#False">false</a>): 重新启用输入.</p>
  </dd>
  <dt>SendMouse</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>此模式仅在执行特定的发送和/或鼠标函数时阻塞用户输入. 指定下列单词的其中一个:</p>
    <p><strong>Send</strong>: 当 <a href="Send.htm">SendEvent</a> 进行时(如果使用了 <code>SendMode "Event"</code>, 包括 <a href="Send.htm">Send</a> 和 <a href="Send.htm">SendText</a>), 用户的键盘和鼠标输入将被忽略. 这样避免了用户的键击扰乱模拟键击流. 当 Send 结束时, 会重新启用输入(在之前没有使用 <code>BlockInput "On"</code> 阻塞的情况下).</p>
    <p><strong>Mouse</strong>: 当 <a href="Click.htm">Click</a>, <a href="MouseMove.htm">MouseMove</a>, <a href="MouseClick.htm">MouseClick</a> 或 <a href="MouseClickDrag.htm">MouseClickDrag</a>  进行时(仅对于传统的 <a href="SendMode.htm">SendEvent 模式</a>), 用户的键盘和鼠标输入被忽略. 这样避免了用户的鼠标移动和点击扰乱模拟鼠标事件. 当鼠标命令结束时, 会重新启用输入(在之前没有使用 <code>BlockInput "On"</code> 阻塞的情况下).</p>
    <p><strong>SendAndMouse</strong>: 上面两种模式的组合.</p>
    <p><strong>Default</strong>: 同时关闭 <em>Send</em> 和 <em>Mouse</em> 模式, 但不改变当前输入阻塞的状态. 例如, 如果 <code>BlockInput "On"</code> 当前有效, 使用 <code>BlockInput "Default"</code> 不会将其关闭.</p>
  </dd>
  <dt id="MouseMove">MouseMove</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>此模式仅阻止鼠标光标移动. 指定下列单词的其中一个:</p>
    <p><strong>MouseMove</strong>: 鼠标光标不会随用户对鼠标的物理移动而移动(DirectInput 应用程序可能是个例外). 脚本中首次使用此函数时, 会安装<a href="InstallMouseHook.htm">鼠标钩子</a>(如果还没有安装). 鼠标钩子将保持安装, 直到下一次使用 <a href="Suspend.htm">Suspend</a> 或 <a href="Hotkey.htm">Hotkey</a> 函数, 此时如果任何热键或热字符串不需要它, 它将被移除(请参阅 <a href="_Hotstring.htm">#Hotstring NoMouse</a>).</p>
    <p><strong>MouseMoveOff</strong>: 允许用户移动鼠标光标.</p>
  </dd>

</dl>

<h2 id="Remarks">备注</h2>
<p>所有这三种 BlockInput 模式 (<em>OnOff</em>, <em>SendMouse</em> 和 <em>MouseMove</em>) 都是独立运行的. 例如, <code>BlockInput "On"</code> 会继续阻塞输入直到使用了 <code>BlockInput "Off"</code>, 即使 <em>SendMouse</em> 中的一个单词也有效. 另一个例子是, 如果 <code>BlockInput "On"</code> 和 <code>BlockInput "MouseMove"</code> 都有效, 鼠标移动将被阻塞, 直到它们都被关闭.</p>
<p class="note"><strong>注意:</strong> <em>OnOff</em> 和 <em>SendMouse</em> 模式将在 UAC 开启或脚本不是以管理员权限运行的时候失效. 更多详情, 请参阅 <a href="../FAQ.htm#uac">FAQ</a>.</p>
<p>比起 BlockInput, 通常优先考虑使用 <code><a href="SendMode.htm">SendMode</a> "Input"</code> 或 <code><a href="SendMode.htm">SendMode</a> "Play"</code>, 这样键击和鼠标点击会变得不可中断. 因为它们与 BlockInput 不一样, 这些模式不会丢弃发送期间用户输入的内容; 相反, 这些键击被缓冲起来在之后发送. 不使用 BlockInput 也避免了下文所描述的需要解决的粘滞按键问题..</p>
<p>如果在用户按住按键时启用 BlockInput, 可能会导致这些键 "卡住". 通过等待这些按键释放后才启用 BlockInput 可以避免此问题, 如本例所示:</p>
<pre>^!p::
{
    KeyWait "Control"  <em>; 等待按键被释放. 为每个热键修饰符使用一次 KeyWait.</em>
    KeyWait "Alt"
    BlockInput True
    <em>; ... 发送键击和鼠标点击 ...</em>
    BlockInput False
}</pre>
<p>每当发送 <kbd>Alt</kbd> 事件时, 输入阻塞会自动和临时禁用(之后重新启用).</p>
<p>BlockInput 生效时, 用户的输入被拦截, 不过 AutoHotkey 可以模拟键击和鼠标点击. 然而由于 Windows API 的特性, 按下 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 将重新启用输入.</p>
<p>某些类型的<a href="_UseHook.htm">钩子热键</a>在 BlockInput 启用时仍然可以被触发. 例如包括 <code>MButton</code>(鼠标钩子) 和 <code>LWin &amp; Space</code>(含有除修饰符 "$#"  外的显式前缀的键盘钩子).</p>
<p>当脚本关闭时会自动重新启用输入.</p>
<h2 id="Related">相关</h2>
<p><a href="SendMode.htm">SendMode</a>, <a href="Send.htm">Send</a>, <a href="Click.htm">Click</a>, <a href="MouseMove.htm">MouseMove</a>, <a href="MouseClick.htm">MouseClick</a>, <a href="MouseClickDrag.htm">MouseClickDrag</a></p>
<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 打开记事本, 并在 BlockInput 开启时通过发送 F5 粘贴时间/日期. 注意, BlockInput 可能只在脚本以管理员身份运行的情况下工作.</p>
<pre>BlockInput true
Run "notepad"
WinWaitActive "ahk_class Notepad"
Send "{F5}" <em>; 粘贴时间和日期</em>
BlockInput false</pre>
</div>
</body>
</html>