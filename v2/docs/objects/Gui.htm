<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Gui 对象 - 方法 &amp; 属性 | AutoHotkey v2</title>
<meta name="description" content="The Gui object provides an interface for a GUI window to perform actions, such as adding new controls, or to retrieve or set values, such as colors." />
<meta name="ahk:equiv-v1" content="commands/Gui.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Gui 对象</h1>
<pre class="NoIndent">class Gui extends Object</pre>

<p>提供用于创建和管理窗口以及创建控件的接口. 这些窗口可以用作数据输入表单或自定义用户界面.</p>
<p>Gui 对象可以通过 <a href="../objects/Gui.htm#Call">Gui()</a> 来创建, 也可以通过 <a href="../commands/GuiFromHwnd.htm">GuiFromHwnd</a> 来检索.</p>

<p>下面使用 "MyGui" 作为任何 Gui 对象的占位符(和示例中的变量名), 因为 "Gui" 就是类本身.</p>
<p>除了从 <a href="Object.htm">Object</a> 继承的方法和属性外, Gui 对象还具有以下预定义的方法和属性.</p>

<h2 id="toc">目录</h2>
<ul class="indent">
  <li><a href="#Static_Methods">静态方法</a>:
    <ul>
      <li><a href="#Call">Call</a>: 创建新 Gui 对象.</li>
    </ul>
  </li>
  <li><a href="#Methods">方法</a>:
    <ul>
      <li><a href="#Add">Add</a>: 创建文本, 按钮或复选框等控件.</li>
      <li><a href="#Destroy">Destroy</a>: 删除窗口.</li>
      <li><a href="#Flash">Flash</a>: 闪烁窗口及其任务栏按钮.</li>
      <li><a href="#GetClientPos">GetClientPos</a>: 检索窗口客户端区域的位置和大小.</li>
      <li><a href="#GetPos">GetPos</a>: 检索窗口的位置和大小.</li>
      <li><a href="#Hide">Hide</a>: 隐藏窗口.</li>
      <li><a href="#Maximize">Maximize</a>: 打开并最大化窗口.</li>
      <li><a href="#Minimize">Minimize</a>: 打开并最小化窗口.</li>
      <li><a href="#Move">Move</a>: 移动和/或调整 GUI 窗口的大小.</li>
      <li><a href="#OnEvent">OnEvent</a>: 注册一个函数或方法, 当给定的事件被触发时调用.</li>
      <li><a href="#Opt">Opt</a>: 为窗口的外观和行为设置各种选项和样式.</li>
      <li><a href="#Restore">Restore</a>: 如果窗口事先最小化或最大化, 则打开并还原窗口.</li>
      <li><a href="#SetFont">SetFont</a>: 设置随后创建的控件的字体, 大小, 样式, 和文本颜色.</li>
      <li><a href="#Show">Show</a>: 显示窗口. 它还可以最小化, 最大化或移动窗口.</li>
      <li><a href="#Submit">Submit</a>: 从命名的控件中收集值, 并将它们组合成一个<a href="Object.htm">对象</a>. 可选择性地隐藏窗口.</li>
      <li><a href="#__Enum">__Enum</a>: 允许遍历 GUI 的控件.</li>
      <li><a href="#__New">__New</a>: 构造一个新的 Gui 实例.</li>
    </ul>
  </li>
  <li><a href="#Properties">属性</a>:
    <ul>
      <li><a href="#BackColor">BackColor</a>: 检索或设置窗口的背景色.</li>
      <li><a href="#FocusedCtrl">FocusedCtrl</a>: 检索 GUI 的焦点控件的 <a href="GuiControl.htm">GuiControl 对象</a>.</li>
      <li><a href="#Hwnd">Hwnd</a>: 检索 GUI 窗口的窗口句柄(HWND).</li>
      <li><a href="#MarginX">MarginX</a>: 检索或设置两侧与随后创建控件之间的水平边距的大小.</li>
      <li><a href="#MarginY">MarginY</a>: 检索或设置两侧与随后创建控件之间的垂直边距的大小.</li>
      <li><a href="#MenuBar">MenuBar</a>: 检索或设置窗口的菜单栏.</li>
      <li><a href="#Name">Name</a>: 检索或设置 GUI 窗口的自定义名称.</li>
      <li><a href="#Title">Title</a>: 检索或设置 GUI 的标题.</li>
      <li><a href="#__Item">__Item</a>: 检索与指定名称, 文本, ClassNN 或 HWND 关联的 <a href="GuiControl.htm">GuiControl 对象</a>.</li>
    </ul>
  </li>
  <li>常规:</li>
    <ul>
      <li><a href="#Navigate">键盘导航</a></li>
      <li><a href="#Appear">窗口外观</a></li>
      <li><a href="#GenRemarks">常规备注</a></li>
      <li><a href="#Related">相关</a></li>
      <li><a href="#Examples">示例</a></li>
    </ul>
  </li>
</ul>

<h2 id="Static_Methods">静态方法</h2>
<div class="methodShort" id="Call">
<h3>Call</h3>
<p>创建并返回一个新的 Gui 对象.</p>
<pre class="Syntax">MyGui := <span class="func">Gui</span>(<span class="optional">Options, Title, EventObj</span>)</pre>
<dl>
  <dt>Options</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>这个参数可以包含 <a href="#Opt">Gui.Opt</a> 支持的任何选项.</p>
  </dd>
  <dt>Title</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>窗口的标题. 如果省略, 则默认为 <a href="../Variables.htm#ScriptName">A_ScriptName</a> 的当前值.</p>
  </dd>
  <dt id="EventObj">EventObj</dt><dd>
    <p>类型: <a href="../Concepts.htm#objects">对象</a></p>
    <p>一个 "事件接收器", 或绑定事件的对象. 如果指定了 <em>EventObj</em>, 那么 <a href="GuiOnEvent.htm">OnEvent</a>, <a href="GuiOnNotify.htm">OnNotify</a> 和 <a href="GuiOnCommand.htm">OnCommand</a> 可以用来注册 <em>EventObj</em> 的方法, 以便在事件发生时被调用. 如果省略或为空, 传递给 OnEvent 的 <em>Function</em> 参数的任何字符串都被解释为函数名.</p>
  </dd>
</dl>
</div>

<h2 id="Methods">Methods</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>添加控件到 GUI 窗口, 并返回 <a href="GuiControl.htm">GuiControl 对象</a>.</p>
<pre class="Syntax">MyGui.<span class="func">Add</span>(ControlType <span class="optional">, Options, Text</span>)
MyGui.<span class="func">Add</span>ControlType(<span class="optional">Options, Text</span>)</pre>
<dl>
  <dt>ControlType</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>下列的其中一个: <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Edit">Edit</a>, <a href="../commands/GuiControls.htm#UpDown">UpDown</a>, <a href="../commands/GuiControls.htm#Picture">Picture</a>, <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Checkbox">Checkbox</a>, <a href="../commands/GuiControls.htm#Radio">Radio</a>, <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a>, <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#Hotkey">Hotkey</a>, <a href="../commands/GuiControls.htm#DateTime">DateTime</a>, <a href="../commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="../commands/GuiControls.htm#Slider">Slider</a>, <a href="../commands/GuiControls.htm#Progress">Progress</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Tab">Tab</a>, <a href="../commands/GuiControls.htm#StatusBar">StatusBar</a>, <a href="../commands/GuiControls.htm#ActiveX">ActiveX</a>, <a href="../commands/GuiControls.htm#Custom">Custom</a></p>
  <p>例如:</p>
  <pre>MyGui := Gui()
MyGui.Add("Text",, "Please enter your name:")
MyGui.AddEdit("vName")
MyGui.Show</pre></dd>
  <dt>Options</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p id="PosSize"><strong>控件的位置和大小</strong></p>
  <p>如果在 <em>Options</em> 中省略了某些尺寸和/或坐标, 则会根据前一个控件确定它的位置, 根据控件的类型和内容确定它的大小.</p>
  <p>支持下列选项:</p>
  <p id="R"><strong>R</strong>: 文本的行数(可以为浮点数, 如 R2.5). <strong>R</strong> 通常比指定 <strong>H</strong>(高度) 更合适. 如果同时指定 <strong>R</strong> 和 <strong>H</strong> 选项, 则<strong>R</strong> 优先考虑. 对于 GroupBox, 此选项设置是指在框内保留空间的控件数量. 对于 <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a> 和 <a href="../commands/GuiControls.htm#ListBox">ListBox</a>, 它是指在控件的列表部分内一次可见的项目数(但对于 DropDownList 和 ComboBoxit 通常最好省略 <strong>R</strong> 和 <strong>H</strong> 选项, 因为弹出列表会自动利用用户桌面的可用高度). 对于其他控件类型, <strong>R</strong> 是指可视的容纳在控件内的文本行数.</p>
  <p><strong>W</strong>: 宽度, 单位为像素. 如果省略, 对于某些控件则根据其内容自动计算宽度. Tab 默认为 30 倍的当前字体大小加上 3 倍的<a href="#MarginX">行边距</a>; 垂直进度条默认为两倍的当前字体大小, 水平进度条, 水平滑动条, DropDownList, ComboBox, ListBox, GroupBox,  Edit 和 Hotkey: 15 倍的当前字体大小(GroupBox 除外, 其默认宽度为 18 倍, 这样可以显示内部的边距).</p>
  <p><strong>H</strong>: 高度, 单位为像素. 如果同时省略 <strong>H</strong> 和 <strong>R</strong> 选项, DropDownList, ComboBox, ListBox 和空的多行 Edit 控件默认为 3 行; GroupBox 默认为 2 行; 垂直滑动条和进度条默认为 5 行; 水平滑动条默认为 30 像素(在没有指定其厚度时); 水平进度条默认为 2 倍的当前字体大小; Hotkey 控件默认为 1 行; 而 Tab 控件默认为 10 行. 对于其他类型的控件, 根据它们的内容自动计算高度. 请注意对于 DropDownList 和 ComboBox, <strong>H</strong> 为控件总是可见的部分(大概指列表上面的框) 和其列表部分相加的高度(但即使高度设置很小, 也至少会在下拉列表中显示一个项目). 同时对于所有类型的控件, 通过 <strong>R</strong> 选项指定行数比使用 <strong>H</strong> 更可取, 因为这样可以避免在控件中显示部分/不完整的文本行.</p>
  <p><strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong>, <strong>hp-n</strong>(其中 <strong>n</strong>为任意数字) 用来设置控件的宽度和/或高度等于前一个添加控件的宽度或高度, 可以使用加号或减号进行调整. 例如, <code>wp</code> 将设置控件的宽度等于之前的控件, 而 <code>wp-50</code> 则设置宽度为之前的控件宽度减去 50 像素.</p>
  <p id="XY"><strong>X</strong>, <strong>Y</strong>: X-坐标, Y-坐标. 例如, 指定 <code>x0 y0</code> 将把控件放置到窗口工作区的左上角, 窗口工作区是在标题栏和菜单栏(如果有) 下面的区域.</p>
  <p id="PosPlus"><strong>x+n</strong>, <strong>y+n</strong>(其中 <strong>n</strong> 可以为任意数字): 可以包括一个可选的加号, 以相对于前一个添加的控件的右边缘或底边缘(分别) 定位一个控件. 例如, 指定 <code>Y+10</code> 将把控件放置在前一个控件底部下面 10 个像素的位置, 而不使用标准的填充间距. 同样地, 指定 <code>X+10</code> 将把控件放置在前一个控件右边缘的右边 10 个像素的位置. 由于负数如 <code>X-10</code> 表示绝对的位置, 因此要使用负的位置偏移, 需要在前面加上一个加号. 例如: <code>X+-10</code>.</p>
  <p id="PosPlusMargin">对于 <strong>X+</strong> 和 <strong>Y+</strong>, 可以用字母 <strong>M</strong> 来代替窗口的当前<a href="#MarginX">边距</a>. 例如, <code>x+m</code> 使用前一个控件的右边缘位置加上标准填充间隔. <code>xp y+m</code> 将控件放置于前一个之下, 而单独指定一个相对的 X 坐标(使用 xp 或 x+), 相当于默认情况下隐式的 <code>yp</code>.</p>
  <p id="xp"><strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong>, <strong>yp-n</strong>(其中 <strong>n</strong> 可以为任意数字) 可以用来指定控件相对于前一个控件左上角的位置, 此选项常用于 <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a> 中的封装控件.</p>
  <p id="xm"><strong>xm</strong> 和 <strong>ym</strong> 可以用来将一个控件分别定位在窗口的最左边和最上面的<a href="#MarginX">边距</a>(它们后面也可以加上一个正/负号和一个数字).</p>
  <p id="xs"><strong>xs</strong> 和 <strong>ys</strong>: 这与 <strong>xm</strong> 和 <strong>ym</strong> 类似, 只是它们是相对于前一个选项中带有 <a href="#Section">Section</a> 单词的控件所保存的坐标(窗口的第一个控件总是开始一个新列, 即使这个单词没有在其选项中指定). 例如:</p>
  <pre>MyGui := Gui()
MyGui.Add("Edit", "w600")  <em>; 在窗口的顶部添加一个非常宽的编辑控件.</em>
MyGui.Add("Text", "<strong>section</strong>", "First Name:")  <em>; 保存此控件位置并定义一个新控件段.</em>
MyGui.Add("Text",, "Last Name:")
MyGui.Add("Edit", "<strong>ys</strong>")  <em>; 在此控件段中开始一个新列.</em>
MyGui.Add("Edit")
MyGui.Show</pre>
  <p><strong>xs</strong> 和 <strong>ys</strong> 后面可以跟着一个加号/减号和一个数字. 并且, 还可以在控件的选项中同时指定单词 <a href="#Section">Section</a> 和 xs/ys; 这样可以让当前控件使用之前的控件段, 但为后续控件定义一个新段.</p>
  <p>省略 <strong>X</strong>, <strong>Y</strong> 的其中一个或同时省略, 有助于 GUI 布局自动调整, 以适应将来可能对控件大小或字体所做的任何更改. 相比之下, 为每个控件指定绝对位置可能需要手动移动正在放大或缩小的控件下面和/或右侧的所有控件的位置.</p>
  <p>如果 <strong>X</strong> 和 <strong>Y</strong> 都被省略, 控件将使用标准填充距离(当前<a href="#MarginX">边距</a>) 被放置在前一个控件的下面.</p>
  <p>如果只省略了一个组件, 它的默认值取决于使用哪个选项来指定其他组件:</p>
  <table class="info">
    <tr><th>指定了 X</th><th>Y 的默认值</th></tr>
    <tr><td>x<em>n</em> 或 xm</td><td>在所有之前控件的下方(最大 Y 范围加边距).</td></tr>
    <tr><td>xs</td><td>在最近一次使用 <a href="#Section">Section</a> 选项后的所有之前控件的下方.</td></tr>
    <tr><td>x+<em>n</em> 或 xp+<em>非零值</em></td><td>等同于前一个控件的顶部边缘(<a href="#xp">yp</a>).</td></tr>
    <tr><td>xp 或 xp+0</td><td>前一个控件的下方(底部边缘加上边距).</td></tr>
    <tr><th>指定了 Y</th><th>X 的默认值</th></tr>
    <tr><td>y<em>n</em> 或 ym</td><td>在所有之前控件的右边(最大 X 范围加边距).</td></tr>
    <tr><td>ys</td><td>自最近一次使用 <a href="#Section">Section</a> 选项以来, 所有先前控件的右边.</td></tr>
    <tr><td>y+<em>n</em> 或 yp+<em>非零值</em></td><td>等同于前一个控件的左边缘(<a href="#xp">xp</a>).</td></tr>
    <tr><td>yp or yp+0</td><td>前一个控件的右边(右边缘加上边距).</td></tr>
  </table>

  <p id="Events"><strong>存储和响应用户的输入</strong></p>
  <p id="var"><strong>V</strong>: 设置控件的<a href="GuiControl.htm#Name">名称</a>. 在字母 V 后指定一个名称, V 不包含在名称中. 例如, 指定 <code><strong>v</strong>MyEdit</code> 会将控件命名为 "MyEdit".</p>
  <p id="label"><strong>Events</strong>: 事件处理程序(如当用户点击或更改控件时自动调用的函数) 不能在控件的 <em>Options</em> 中进行设置. 而是, 使用 <a href="#OnEvent.htm">OnEvent</a> 可以为每个感兴趣的事件注册一个回调函数或方法.</p>
  
  <p id="OtherOptions"><strong>控件: 常用样式和其他选项</strong></p>
  <p>注意: 选项前的符号省略时, 默认为加号; 例如, <code>Wrap</code> 等同于 <code>+Wrap</code>. 相反地, <code>-Wrap</code> 将去除自动换行属性.</p>
  <p id="AltSubmit"><strong>AltSubmit</strong>: 使用替代的提交方法. 对于 DropDownList, ComboBox, ListBox 和 Tab, 会让 <a href="#Submit">Gui.Submit</a> 保存选择项目的位置而不是其文本. 如果没有选择项目, 则对于 ComboBox  命令保存选项项目的位置而不是其文本. 如果没有选择项目, 则对于 ComboBox 会保存其编辑区域的文本.</p>
  <p><strong>C</strong>: 文本颜色(对<a href="../commands/GuiControls.htm#Button">按钮</a>控件无效). 指定字母 C 后面紧跟着颜色名称(请参阅<a href="../misc/Colors.htm">颜色图表</a>) 或 RGB 值(0x 前缀可以省略). 例如: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
  <p id="Disabled"><strong>Disabled</strong>: 让可输入型控件变为灰色禁用状态, 这样可以防止取得焦点或用户改变其内容. 以后可以使用 <a href="GuiControl.htm#Enabled">GuiCtrl.Enabled</a> 来启用控件. 注意: 要让编辑控件为只读状态, 请指定字符串 <code>ReadOnly</code> 代替. 并且, 还可以在单词 Disabled 后紧跟着 0 或 1 来表示控件的初始状态(0 为启用而 1 为禁用). 换句话说, <code>Disabled</code> 和 <code>"Disabled" VarContainingOne</code> 是一样的.</p>
  <p><strong>Hidden</strong>: 让控件初始为隐藏状态. 以后可以使用 <a href="GuiControl.htm#Visible">GuiCtrl.<span style="color: #4280ca;">Visible</span></a> 来让它显示. 可以在单词 Hidden 后跟着 0 或 1 来表示初始状态(0 为可见而 1 为隐藏). 换句话说, <code>Hidden</code> 和 <code>"Hidden" VarContainingOne</code> 是一样的.</p>
  <p><strong>Left</strong>: 在控件的可用宽度内左对齐控件的文本. 该选项会影响以下控件: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
  <p><strong>Right</strong>: 在控件的可用宽度内右对齐控件的文本. 对于复选框和单选按钮, 此选项也同时把框放置在控件的右边而不是左边. 该选项会影响以下控件: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
  <p><strong>Center</strong>: 在控件的可用宽度内居中对齐控件的文本. 该选项会影响以下控件: Text, Edit, Button, Checkbox, Radio, Slider, GroupBox.</p>
  <p id="Section"><strong>Section</strong>: 定义一个新的控件段并保存当前控件的位置, 以便以后使用<a href="#xs">上面</a>描述的 <em>xs</em> 和 <em>ys</em> 定位选项.</p>
  <p id="Tabstop"><strong>Tabstop</strong>: 使用 <code>-Tabstop</code>(即负 Tabstop) 可以让用户按 <kbd>Tab</kbd> 导航时跳过输入型控件.</p>
  <p id="Wrap"><strong>Wrap</strong>: 让控件的文本自动换行. 因为几乎所有类型的控件初始状态都启用了自动换行, 所以需要通过 <code>-Wrap</code> 禁用它.</p>
  <p><strong>VScroll</strong>: 当控件支持时为其提供一个垂直滚动条.</p>
  <p><strong>HScroll</strong>: 当控件支持时为其提供一个水平滚动条. 这个段落的剩余部分仅适用于 <a href="../commands/GuiControls.htm#ListBox">ListBox</a>. 水平滚动宽度默认为 ListBox 宽度的 3 倍. 要使用其他的滚动宽度, 请在单词 HScroll 后紧跟着一个数字表示. 例如, <code>HScroll500</code> 将在 ListBox 中使用 500 像素的滚动栏宽度. 但是, 如果指定的滚动宽度小于 ListBox 的宽度, 则不显示滚动条(不过在这种含有 <em>HScroll</em> 的情况下, 可以在之后通过 <code>MyScrollBar.<a href="GuiControl.htm#Opt">Opt</a>("+HScroll500")</code>, 来添加水平滚动条, 否则是无法添加的).</p>
  
  <p><strong>控件: 不常用样式和选项</strong></p>
  <p id="BackgroundTrans"><strong>BackgroundTrans</strong>: 使用透明的背景, 允许任何位于 Text, Picture 或 GroupBox 后面的控件显示出来. 例如, 在 Picture 控件上显示一个透明背景的 Text 可以让文字看起来就像图片的一部分. 以后可以使用 <code>GuiCtrl.<a href="GuiControl.htm#Opt">Opt</a>("+Background")</code> 移除此选项. 有关透明图像的更多信息, 请参阅 <a href="../commands/GuiControls.htm#PicAltSubmit">Picture 控件的 AltSubmit 部分</a>. 已知限制: 对包含了 <a href="../commands/ListView.htm">ListView</a> 的 <a href="../commands/GuiControls.htm#Tab">Tab 控件</a>内的其他控件, BackgroundTrans 可能无法正确应用. 如果控件类型不支持这个选项, 则抛出错误.</p>
  <p id="Background"><strong>Background</strong><em>Color</em>: 更改控件的背景色. 用颜色名称(请参阅<a href="../misc/Colors.htm">颜色图表</a>) 或 RGB 值(0x 前缀可以省略) 替换 <em>Color</em>. 例如: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. 如果不使用这个选项, <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Picture">Picture</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Checkbox">CheckBox</a>, <a href="../commands/GuiControls.htm#Radio">Radio</a>, <a href="../commands/GuiControls.htm#Slider">Slider</a>, <a href="../commands/GuiControls.htm#Tab">Tab</a> 或 <a href="../commands/GuiControls.htm#Link">Link</a> 控件初始默认为 <a href="#BackColor">Gui.BackColor</a> 设置的背景色(如果没有设置或其他控件类型, 则为系统默认的背景色). 指定 <code>BackgroundDefault</code> 或 <code>-Background</code> 会应用系统的默认背景色. 例如, 控件可以通过 <code>LV.Opt("+BackgroundDefault")</code> 恢复到默认颜色. 在没有指定颜色的情况下使用 <code>+Background</code> 可以恢复 <code>-Background</code>. 如果控件类型不支持这个选项, 则抛出错误.</p>
  <p><strong>Border</strong>: 为控件增加一个细边框. 对于大多数控件不需要使用此选项, 因为它们已经含有特定于类型的边框. 添加边框到 <em>现有</em> 控件时, 可能需要给控件的宽度和高度增加 1 个像素.</p>
  <p><strong>Theme</strong>: 使用此选项可以让新建的控件忽略窗口当前的主题设置. 它对于现有控件没有效果; 不过, 这种情况可能在将来的版本中改变. 请参阅 GUI 的 <a href="#Theme">+/-Theme</a> 选项了解详情.</p>
  <p><strong>(未命名样式)</strong>: 在十进制或十六进制的<a href="../misc/Styles.htm">样式编号</a>前加上加号或减号表示添加或删除此样式. 如果省略了符号, 则默认为加号.</p>
  <p><strong>(未命名扩展样式)</strong>: 在字母 E 和十进制或十六进制的扩展样式编号前加上加号或减号表示添加或删除此扩展样式. 如果省略了符号, 则默认为加号. 例如, <code>E0x200</code> 表示添加 WS_EX_CLIENTEDGE 样式, 它可以为图片和其他控件增加一个下沉的边框样式. 这里没有列出其他的扩展样式编号(因为它们极少使用), 有关完整列表, 前参阅 <a href="https://docs.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles">Extended Window Styles | Microsoft Docs</a>.</p></dd>
  <dt>Text</dt><dd>根据指定的控制类型, 可以是字符串, 数字或数组.</dd>
</dl>
</div>

<div class="methodShort" id="Destroy">
<h3>Destroy</h3>
<p>移除窗口及其所有控件, 并释放其占用的内存和系统资源.</p>
<pre class="Syntax">MyGui.<span class="func">Destroy</span>()</pre>
<p>如果没有使用 <code>MyGui.Destroy()</code>, 那么当 Gui 对象被删除时, 窗口会被自动销毁(详见<a href="#deleted">通用备注</a>). 当脚本退出时, 所有的 GUI 窗口都会被自动销毁.</p>
</div>

<div class="methodShort" id="Flash">
<h3>Flash</h3>
<p>闪烁任务栏中的窗口按钮.</p>
<pre class="Syntax">MyGui.<span class="func">Flash</span>(<span class="optional">Blink</span>)</pre>
<dl>
  <dt>Blink</dt><dd>
    <p>类型: <a href="../Concepts.htm#boolean">整数(布尔值)</a></p>
    <p>如果此参数被省略或为 1(true), 任务栏中的窗口按钮将闪烁. 这是通过反转窗口的标题栏和/或任务栏按钮(如果有的话) 的颜色来实现的. 指定 0(false) 可恢复标题栏和任务栏按钮的原始颜色(但实际行为可能因操作系统版本而异).</p>
  </dd>
</dl>
<p>在下面的例子中, 窗口将闪烁三次, 因为每对闪烁都会反转, 然后恢复其外观:</p>
<pre>Loop 6
{
    MyGui.Flash
    Sleep 500  <em>; 这个时间值十分敏感, 改变它可能引起异常.</em>
}</pre>
</div>

<div class="methodShort" id="GetClientPos">
<h3>GetClientPos</h3>
<p>检索窗口客户端区域的位置和大小.</p>
<pre class="Syntax">MyGui.<span class="func">GetClientPos</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<p>每个参数都应该是一个变量<a href="../Concepts.htm#variable-references">引用</a>, 在其中存储各自的坐标. 坐标是窗口客户端区域左上角的坐标, 这不包含标题栏, 菜单栏和边框. X 和 Y 是相对屏幕的坐标. Width 是客户端左右两侧的水平距离, 而 height 是上下两侧的垂直距离(以像素为单位).</p>
<p>与 <a href="../commands/WinGetClientPos.htm">WinGetClientPos</a>, 不同, 该方法将 <a href="#DPIScale">DPI 缩放</a>应用于 <em>Width</em> 和 <em>Height</em>(除非使用了 <code>-DPIScale</code> 选项).</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>检索窗口的位置和大小.</p>
<pre class="Syntax">MyGui.<span class="func">GetPos</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<p>每个参数都应该是一个变量<a href="../Concepts.htm#variable-references">引用</a>, 在其中存储各自的坐标. 坐标是窗口的左上角的坐标. X 和 Y 是相对屏幕的坐标. Width 是窗口左右两侧的水平距离, 而 Height 是窗口上下两侧的垂直距离(以像素为单位).</p>
<p>与 <a href="../commands/WinGetPos.htm">WinGetPos</a> 不同, 该方法将 <a href="#DPIScale">DPI 缩放</a>应用于 <em>Width</em> 和 <em>Height</em>(除非使用了 <code>-DPIScale</code> 选项).</p>
</div>

<div class="methodShort" id="Hide">
<h3>Hide</h3>
<p>隐藏窗口.</p>
<pre class="Syntax">MyGui.<span class="func">Hide</span>()</pre>
</div>

<div class="methodShort" id="Maximize">
<h3>Maximize</h3>
<p>取消隐藏窗口(如有必要) 并将其最大化.</p>
<pre class="Syntax">MyGui.<span class="func">Maximize</span>()</pre>
</div>

<div class="methodShort" id="Minimize">
<h3>Minimize</h3>
<p>取消隐藏窗口(如有必要) 并将其最小化.</p>
<pre class="Syntax">MyGui.<span class="func">Minimize</span>()</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>移动和/或调整 GUI 窗口的大小</p>
<pre class="Syntax">MyGui.<span class="func">Move</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<dl>
  <dt>X, Y</dt><dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>以屏幕坐标表示的新位置.</p></dd>
  <dt>Width, Height</dt><dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>新的尺寸.</p></dd>
</dl>
<p>与 <a href="../commands/WinMove.htm">WinMove</a> 不同, 该方法将 <a href="Gui.htm#DPIScale">DPI 缩放</a>应用于 <em>Width</em> 和 <em>Height</em>(除非使用了 <code>-DPIScale</code> 选项).</p>
<p>示例:</p>
<pre>MyGui.Move(10, 20, 200, 100)
MyGui.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)

<em>; 左右两边扩大 10 个像素.</em>
MyGui.GetPos(&amp;x,, &amp;w)
MyGui.Move(x-10,, w+20)</pre>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>注册一个函数或方法, 当给定的事件被触发时调用.</p>
<pre class="Syntax">MyGui.<span class="func">OnEvent</span>(EventName, Callback <span class="optional">, AddRemove</span>)</pre>
<p>有关详情, 请参阅 <a href="GuiOnEvent.htm">OnEvent</a>.</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>设置 GUI 窗口的一个或多个选项.</p>
<pre class="Syntax">MyGui.<span class="func">Opt</span>(Options)</pre>
<dl>
  <dt>Options</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
  <p>处于性能原因, 最好在一行中设置所有选项, 并在创建窗口之前(即在使用 <a href="#Add">MyGui.Add</a> 等其他方法之前) 进行设置.</p>
  <p>这个参数的效果是累加的; 也就是说, 它只改变那些明确指定的设置, 而其他所有选项则保持不变.</p>
  <p>在选项前指定加号表示增加此选项, 而减号表示移除它. 例如: <code>MyGui.Opt("+Resize -MaximizeBox")</code>.</p>
  <p><strong>AlwaysOnTop</strong>: 使窗口保持在所有其他窗口的顶部, 这与 <a href="../commands/WinSetAlwaysOnTop.htm">WinSetAlwaysOnTop</a> 的效果相同.</p>
  <p><strong>Border</strong>: 为窗口增加细边框. 此选项不常用.</p>
  <p><strong>Caption</strong>(默认具有此选项): 为窗口增加标题栏和粗边框.  当从将使用 <a href="../commands/WinSetTransColor.htm">WinSetTransColor</a> 的窗口中移除标题时, 只有在设置 TransColor 后才能移除.</p>
  <p><strong>Disabled</strong>: 禁用窗口, 阻止用户和窗口中的控件交互. 此选项常用于含有子窗口的窗口(请参阅 <a href="#Owner">Owner</a>).</p>
  <p id="DPIScale"><strong>DPIScale</strong>: 使用 <code>MyGui.Opt("-DPIScale")</code> 禁用 DPI 缩放, 它默认是启用的. 如果在使用非标准 DPI 设置的系统上启用 DPI 缩放, 则 Gui 对象和 <a href="GuiControl.htm">GuiControl 对象</a>会自动调整坐标和尺寸来让控件具有大致相同的外观尺寸(不过分辨率更高). 例如, 对于, 对于 144(150%) 的 DPI, <code>E := MyGui.Add("Edit", "w100")</code> 会让 Gui 宽度为 150 像素, 但 <code>E.GetPos(,,&amp;W)</code> 将保持 <em>W</em> 为 100. <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> 包含了系统当前 DPI.</p>
  <p>DPI 缩放只适用于 Gui 对象和 <a href="GuiControl.htm">GuiControl 对象</a>, 所以直接来自其他来源的坐标, 如 ControlGetPos 或 WinGetPos 将无法使用. 有很多方法可以处理这个问题:</p>
  <ul>
    <li>尽可能避免使用硬编码坐标. 例如, 使用 <a href="#xp">xp</a>, <a href="#xs">xs</a>, <a href="#xm">xm</a> 和 <a href="#PosPlusMargin">x+m</a> 选项来定位控件, 并以<a href="#R">文本的行数</a>而不是像素来指定高度.</li>
    <li>根据需要, 启用(<code>Gui.Opt("+DPIScale")</code>) 和禁用(<code>Gui.Opt("-DPIScale")</code>) 缩放. 更改这个设置并不会影响已经设置过的坐标或大小.</li>
    <li>手动缩放坐标. 例如, <code>x*(A_ScreenDPI/96)</code> 将 x 从逻辑/GUI 坐标转换为物理/非 GUI 坐标.</li>
  </ul>
  <p id="LastFound"><strong>LastFound</strong>: 设置窗口为<a href="../misc/WinTitle.htm#LastFoundWindow">上次找到的窗口</a>(对于 <a href="GuiOnEvent.htm#Threads">GUI 线程</a>这是不必要的, 因为它自动设置了), 这样允许类似 <a href="../commands/WinGetStyle.htm">WinGetStyle</a> 和 <a href="../commands/WinSetTransparent.htm">WinSetTransparent</a> 这样的函数对此窗口进行操作, 即使它当前为隐藏状态(即不需要使用 <a href="../commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>). 需要在显示窗口之前改变其属性时, 这是非常有用的. 例如:</p>
  <pre>MyGui.Opt("+LastFound")
WinSetTransColor(CustomColor " 150", MyGui)
MyGui.Show()</pre>
  <p id="MaximizeBox"><strong>MaximizeBox</strong>: 启用标题栏上的最大化按钮. 下面的 <em>Resize</em> 也含有此效果.</p>
  <p id="MinimizeBox"><strong>MinimizeBox</strong> (默认含有此选项): 启用标题栏上的最小化按钮.</p>
  <p id="MinSize"><strong>MinSize</strong> 和 <strong>MaxSize</strong>: 限定窗口的最小尺寸和最大尺寸, 例如当用户拖动窗口边框改变其大小的时候. 指定不带后缀的单词 <em>MinSize</em> 和/或 <em>MaxSize</em> 来使用窗口当前尺寸作为限制大小(如果没有窗口当前尺寸, 则使用首次 <a href="#Show">MyGui.Show</a> 时显示的大小). 还可以在后面加上宽度, 跟着 X 和高度; 例如: <code>Gui.Opt("+Resize +MinSize640x480")</code>. 它们指定了以像素为单位的窗口工作区(不包括边框, 标题栏和<a href="#MenuBar">菜单栏</a>). 指定每个数字为十进制, 而不是十六进制.</p>
  <p>可以省略高度或宽度, 使其保持不变(例如 <code>+MinSize640x</code> 或 <code>+MinSizex480</code>). 此外, 可以多次指定 Min/MaxSize 以便在一个维度上使用窗口的当前尺寸, 在另一个维度上使用显式尺寸. 例如, <code>+MinSize +MinSize640x</code> 表示最小高度限制为窗口当前的大小, 而最小宽度限制为 640.</p>
  <p>如果从没有使用 <em>MinSize</em> 和 <em>MaxSize</em>, 则使用操作系统的默认值(同样地, 可以使用 <code>MyGui.Opt("-MinSize -MaxSize")</code> 恢复为默认值). 注意: 窗口必须有 <a href="#Resize">+Resize</a>, 以允许用户调整大小.</p>
  <p id="OwnDialogs"><strong>OwnDialogs</strong>: <code>MyGui.Opt("+OwnDialogs")</code> 应该在每个<a href="../misc/Threads.htm">线程</a>中指定(如 Button 控件的事件处理函数) 随后显示的 <a href="../commands/MsgBox.htm">MsgBox</a>, <a href="../commands/InputBox.htm">InputBox</a>, <a href="../commands/FileSelect.htm">FileSelect</a> 和 <a href="../commands/DirSelect.htm">DirSelect</a> 对话框应该由窗口拥有. 这类对话框成为模式对话框, 这意味着用户不能与 GUI 窗口进行交互, 直到解除对话框. 相反, <a href="../commands/ToolTip.htm">ToolTip</a> 即使有拥有者, 也不会成为模式的; 它们只是会一直停留在其拥有者之上. 在这两种情况下, 任何拥有的对话框或窗口都会在其 GUI 窗口被<a href="#Destroy">销毁</a>时自动销毁.</p>
  <p>一般情况下打开这个设置后不需要再切换到关闭, 因为它不影响其他<a href="../misc/Threads.htm">线程</a>. 但是, 如果一个线程需要显示从属和非从属对话框, 则可以使用 <code>MyGui.Opt("-OwnDialogs")</code> 关闭此设置.</p>
  <p id="Owner"><strong>Owner</strong>: 使用 <em>+Owner</em> 可以让当前窗口从属于另一个窗口. 从属的窗口默认不显示在任务栏, 并且它总是显示在其父窗口的上面. 当其父窗口销毁时它也被自动销毁. <em>+Owner</em> 可以在父窗口创建之前或之后使用. 两种方法可以使用 <em>+Owner</em>, 如下所示:</p>
  <pre>MyGui.Opt("+Owner" OtherGui.Hwnd)  <em>; 让 GUI 成为 <i>OtherGui</i> 的子窗口.</em>
MyGui.Opt("+Owner")  <em>; 让 GUI 成为<a href="../Variables.htm#ScriptHwnd">脚本主窗口</a>的子窗口, 这样可以阻止其任务栏按钮的显示.</em></pre>
  <p><code>+Owner</code> 后面可以紧跟着任何顶级窗口的 <a href="#Hwnd">HWND</a>.</p>
  <p>在某个从属窗口显示时要防止用户与其父窗口交互, 请使用 <code>MyGui.Opt("+Disabled")</code>. 禁用父窗口. 之后(当子窗口取消或销毁时), 通过 <code>MyGui.Opt("-Disabled")</code>. 来重新启用父窗口. 在取消或销毁子窗口前这样做可以让父窗口自动恢复有效.</p>
  <p id="Parent"><strong>Parent</strong>: 使用 <code>+Parent</code> 后面紧跟着任何窗口或控件的 <a href="#Hwnd">HWND</a>, 将其作为这个窗口的父窗口. 要恢复 Gui 为顶级窗口, 请使用 <code>-Parent</code>. 在窗口创建后此选项也有效.</p>
  <p id="Resize"><strong>Resize</strong>: 此选项允许用户重新调整窗口的大小并启用标题栏上的最大化按钮. 要禁用最大化按钮, 请指定 <code>+Resize -MaximizeBox</code>.</p>
  <p><strong>SysMenu</strong>(默认含有此选项): 指定 <code>-SysMenu</code>(负 SysMenu) 可以删除点击窗口左上角时弹出的系统菜单和图标. 同时也删除标题栏上的最小化, 最大化和关闭按钮.</p>
  <p id="Theme"><strong>Theme</strong>: 通过指定 <code>-Theme</code>, 可以让随后在窗口中创建的所有控件具有经典主题的外观. 之后要创建其他使用当前主题的控件时, 请使用 <code>+Theme</code> 把设置切换回来. 注意: 如果经典主题有效, 这个选项就没有效果. 最后, 每个控件在创建时, 可以通过在其选项中指定 <code>+Theme</code> 或 <code>-Theme</code> 来改变该设置.</p>
  <p><strong>ToolWindow</strong>: 让窗口显示细标题栏, 同时去除任务栏按钮. 无论是否存在 <a href="../misc/Styles.htm#WS_MAXIMIZEBOX">WS_MAXIMIZEBOX</a> 和 <a href="../misc/Styles.htm#WS_MINIMIZEBOX">WS_MINIMIZEBOX</a> 样式, 这总是隐藏了最大化和最小化按钮.</p>
  <p><strong>(未命名样式)</strong>: 在十进制或十六进制的<a href="../misc/Styles.htm">样式编号</a>前加上加号或减号表示添加或删除此样式.</p>
  <p><strong>(未命名扩展样式)</strong>: 在字母 E 和十进制或十六进制的扩展样式编号前加上加号或减号表示添加或删除此扩展样式. 例如, <code>+E0x40000</code> 表示添加 WS_EX_APPWINDOW 样式, 此样式让窗口显示任务栏按钮. 这里没有列出其他的扩展样式编号(因为它们极少使用), 有关完整列表, 请参阅 <a href="https://docs.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles">Extended Window Styles | Microsoft Docs</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Restore">
<h3>Restore</h3>
<p>取消隐藏窗口(如有必要) 并将其还原, 如果事先已将其最小化或最大化.</p>
<pre class="Syntax">MyGui.<span class="func">Restore</span>()</pre>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>为在此处之后创建的控件设置字体字型, 大小, 样式和/或颜色.</p>
<p>注意: 省略两个参数可以让字体恢复为系统默认的 GUI 字型, 大小和颜色. 否则, 任何未指定的字体属性将从之前的字体中复制.</p>
<pre class="Syntax">MyGui.<span class="func">SetFont</span>(<span class="optional">Options, FontName</span>)</pre>
<dl>
  <dt>Options</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>零个或多个选项. 每个选项要么是一个字母后面紧跟着一个值, 要么是一个单词. 若要指定多个选项, 请在每个选项之间使用空格. 例如: <code>cBlue s12 bold</code>.</p>
  <p>支持以下单词: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> 和 norm. <em>Norm</em> 将字体恢复到标准的粗细, 并关闭斜体, 删除和下划线(但保留现有的颜色和大小). 可以使用 norm 去除所有属性然后有选择的设置其他属性. 例如, 指定 <code>norm italic</code> 将设置字体为标准然后增加斜体属性.</p>
  <p><strong>C</strong>: 颜色名称(请参阅<a href="../misc/Colors.htm">颜色图表</a>) 或 RGB 值 -- 或指定单词 Default 来恢复到系统默认颜色(大多数系统的默认颜色为黑色). 例如: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. 注意: <a href="../commands/GuiControls.htm#Button">Button</a> 不遵循自定义颜色. 此外, 可以通过包含 C 选项创建带有字体颜色的特殊控件不会受到当前选项的影响. 例如: <code>MyGui.Add("Text", "cRed", "My Text")</code>.</p>
  <p><strong>S</strong>: 尺寸(单位为磅). 例如: <code>s12</code>(指定十进制, 而不是十六进制)</p>
  <p><strong>W</strong>: 粗细, 这是介于 1 和 1000 之间的数字(400 为标准大小而 700 为粗体). 例如: <code>w600</code>(指定十进制, 而不是十六进制)</p>
  <p id="fontq"><strong>Q</strong>: 文本渲染质量. 例如: <code>q3</code>. Q 后应跟着下表中的一个数字:</p>
  <table class="info">
    <tr>
      <th>数字</th>
      <th abbr="Constant">Windows 常量</th>
      <th abbr="Descr">描述</th>
    </tr>
    <tr>
      <td>0</td>
      <td>DEFAULT_QUALITY</td>
      <td>字体的外观并不重要.</td>
    </tr>
    <tr>
      <td>1</td>
      <td>DRAFT_QUALITY</td>
      <td>字体的外观不如使用 PROOF_QUALITY 值时重要.</td>
    </tr>
    <tr>
      <td>2</td>
      <td>PROOF_QUALITY</td>
      <td>字体的字符质量比逻辑字体属性的精确匹配更重要.</td>
    </tr>
    <tr>
      <td>3</td>
      <td>NONANTIALIASED_QUALITY</td>
      <td>字体从不进行抗锯齿处理, 即不进行字体平滑处理.</td>
    </tr>
    <tr>
      <td>4</td>
      <td>ANTIALIASED_QUALITY</td>
      <td>如果字体支持抗锯齿, 并且字体大小不是太小或太大, 那么字体是抗锯齿或平滑的.</td>
    </tr>
    <tr>
      <td>5</td>
      <td>CLEARTYPE_QUALITY</td>
      <td>如果设置, 则使用 ClearType 抗锯齿方法渲染文本(在可能的情况下).</td>
    </tr>
  </table>
  <p>关于这些值含义的更多细节, 请参阅 <a href="http://msdn.microsoft.com/en-us/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
  <p>由于默认设置通常是最好的品质, 所以这个功能往往用于在特殊情况时禁用抗锯齿效果, 这样可以让文本更清晰.</p></dd>
  <dt>FontName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p><em>FontName</em> 可以是任意字体的名称, 例如<a href="../misc/FontsStandard.htm">字体表</a>的其中一个. 如果省略 <em>FontName</em> 或此字体在系统中不存在, 则使用之前的字体字型(如果没有, 则使用系统默认的 GUI 字型). 即使某些系统缺少首选字体, 这种特性也可以让窗口在多个系统上具有类似的字体. 例如, 按顺序执行下列命令, 则 Verdana 字体优先于 Arial, 而 Arial 字体优先于 MS Sans Serif:</p>
  <pre>MyGui.SetFont(, "MS sans serif")
MyGui.SetFont(, "Arial")
MyGui.SetFont(, "Verdana")  <em>; 优选字体.</em></pre></dd>
</dl>
<p>相关提示, 操作系统提供了标准的对话框让用户选取字体, 颜色或图标. 使用 <a href="../commands/DllCall.htm">DllCall</a> 可以显示这些对话框, 演示的例子请参阅 <a href="https://github.com/majkinetor/mm-autohotkey/tree/master/Dlg">GitHub</a>.</p>
</div>

<div class="methodShort" id="Show">
<h3>Show</h3>
<p>默认情况下, 这将使窗口可见, 取消最小化(如果需要) 并<a href="../commands/WinActivate.htm">激活</a>它.</p>
<pre class="Syntax">MyGui.<span class="func">Show</span>(<span class="optional">Options</span>)</pre>
<dl>
  <dt>Options</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>省略后面的 X, Y, W 和 H 选项则让窗口保持原来的大小和位置. 如果之前没有设置过位置, 则在后面提到的 X 和/或 Y 选项没有指明的坐标上窗口将自动居中. 如果之前没有设置过大小, 则窗口会根据它所包含控件的大小和位置自动调整大小.</p>
  <p>在 <em>Options</em> 中可以包含零个或多个下列字符串(指定每一个数字为十进制, 而不是十六进制):</p>
  <p><strong>Wn</strong>: 指定 <strong>n</strong> 为窗口工作区的宽度(单位为像素), 窗口工作区指除了窗口边框, 标题栏和<a href="#MenuBar">菜单栏</a>的区域.</p>
  <p><strong>Hn</strong>: 指定 <strong>n</strong> 为窗口工作区的高度, 单位为像素.</p>
  <p><strong>Xn</strong>: 指定 <strong>n</strong>为窗口在屏幕中的 X-坐标, 单位为像素. 0 表示屏幕最左边首列可见像素的位置.</p>
  <p><strong>Yn</strong>: 指定 <strong>n</strong> 为窗口在屏幕中的 Y-坐标, 单位为像素. 0 表示屏幕最左边首列可见像素的位置.</p>
  <p><strong>Center</strong>: 让窗口在屏幕的水平和垂直方向上居中.</p>
  <p><strong>xCenter</strong>: 让窗口在屏幕的水平方向上居中. 例如: <code>MyGui.Show("xCenter y0")</code>.</p>
  <p><strong>yCenter</strong>: 让窗口在屏幕的垂直方向上居中.</p>
  <p id="AutoSize"><strong>AutoSize</strong>: 根据窗口当前包含的可见控件调整窗口的大小. 这常在添加新控件, 调整现有控件的大小或隐藏/显示现有控件后用来调整窗口的大小. 例如: <code>MyGui.Show("AutoSize Center")</code>.</p>
  <p><em><strong>还可能存在以下情况之一:</strong></em></p>
  <p><strong>Minimize</strong>: 最小化当前窗口并激活其下方的窗口.</p>
  <p><strong>Maximize</strong>: 最大化并激活窗口.</p>
  <p><strong>Restore</strong>: 必要时, 将窗口取消最小化或最大化(还原窗口). 如有必要, 还将显示并激活窗口.</p>
  <p><strong>NoActivate</strong>: 当窗口处于最小化或最大化状态时, 还原窗口. 窗口显示但不进行激活.</p>
  <p><strong>NA</strong>: 显示窗口但不进行激活. 如果窗口处于最小化状态, 那么它仍保持这种状态, 但可能提升它的 z 顺序(这是在 alt-tab 选择器中看到的顺序). 如果窗口之前是隐藏的, 则此参数可能会让它显示在当前仍处于活动状态的窗口上面.</p>
  <p><strong>Hide</strong>: 隐藏窗口并激活其下方的窗口. 这与 <a href="#Hide">MyGui.Hide</a> 的功能相同, 只是它允许移动或调整隐藏窗口的大小, 而不显示它. 例如: <code>MyGui.Show("Hide x55 y66 w300 h200")</code>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Submit">
<h3>Submit</h3>
<p>从命名的控件中收集值, 并将它们组合成一个<a href="Object.htm">对象</a>. 可选择隐藏窗口.</p>
<pre class="Syntax">NamedCtrlContents := MyGui.<span class="func">Submit</span>(<span class="optional">Hide</span>)</pre>
<dl>
  <dt>Hide</dt><dd>
    <p>类型: <a href="../Concepts.htm#boolean">整数(布尔值)</a></p>
    <p>如果省略或为 1(true), 则窗口将被隐藏. 如果是 0(false), 则窗口不会被隐藏.</p>
  </dd>
</dl>
<p>返回的对象包含每个命名控件的一个自有属性, 如 <code>NamedCtrlContents.%GuiCtrl.<a href="GuiControl.htm#Name">Name</a>% := GuiCtrl.<a href="GuiControl.htm#Value">Value</a></code>, 但有以下例外. 只有支持 <a href="GuiControl.htm#Value">GuiCtrl.Value</a> 并被赋予名称的输入功能控件才会被包含在内. 使用 <code>NamedCtrlContents.NameOfControl</code> 来检索一个单独的值或 <a href="Object.htm#OwnProps">OwnProps</a> 来枚举所有的值.</p>
<p>对于 <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a> 和 <a href="../commands/GuiControls.htm#Tab">Tab</a>, 如果控件 <strong>没有</strong> <a href="#AltSubmit">AltSubmit</a> 选项, 或者如果 ComboBox 的文本与列表项不匹配, 则存储所选项目/Tab 的文本而不是其位置编号. 否则, 将存储 <a href="GuiControl.htm#Value">Value</a>(项目的位置编号).</p>
<p id="submit-radio">如果单选组中只有一个 <a href="../commands/GuiControls.htm#Radio">Radio</a> 按钮有名称, 则 Submit 将存储当前选中的按钮的编号, 而不是控件的 <a href="GuiControl.htm#Value">Value</a>. 1 是第一个单选按钮(根据原来的创建顺序), 2 是第二个, 以此类推. 如果没有选择按钮, 则存储 0.</p>
<p>因为它们不具备输入功能, 排除以下控件: <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Pic">Pic</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Progress">Progress</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#StatusBar">StatusBar</a>.</p>
<p>也不包括: <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="../commands/GuiControls.htm#ActiveX">ActiveX</a>, <a href="../commands/GuiControls.htm#Custom">Custom</a>.</p>
</div>

<div class="methodShort" id="__Enum">
<h3>__Enum</h3>
<p>枚举 GUI 的控件.</p>
<pre class="Syntax">For Ctrl in MyGui
For Hwnd, Ctrl in MyGui</pre>
<p>返回一个新的<a href="Enumerator.htm">枚举器</a>. 这个方法通常不被直接调用. 取而代之的是, Gui 对象被直接传递给 <a href="../commands/For.htm">for-loop</a>, 其调用 __Enum 一次, 然后在循环的每次迭代中调用枚举器一次. 每次调用枚举数都会返回下一个控件. For-loop 的变量对应于枚举数的参数, 它们是:</p>
<dl>
  <dt>Hwnd</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>控件的 HWND. 这只存在于双参数模式中.</p>
  </dd>
  <dt>Ctrl</dt>
  <dd>
    <p><a href="GuiControl.htm">GuiControl</a> 对象.</p>
  </dd>
</dl>
<p>例如:</p>
<pre>For Hwnd, GuiCtrlObj in MyGui
    MsgBox "Control #" A_Index " is " GuiCtrlObj.ClassNN</pre>
</div>

<div class="methodShort" id="__New">
<h3>__New</h3>
<p>构造一个新的 Gui 实例.</p>
<pre class="Syntax">MyGui.<span class="func">__New</span>(<span class="optional">Options, Title, EventObj</span>)</pre>
<p>Gui 子类可以覆盖 __New 并调用 <code>super.__New(Options, Title, this)</code>  来处理它自己的事件. 在这种情况下, 主窗口的事件(如关闭) 不会传递一个显式的 Gui 参数, 因为 <code>this</code> 已经包含了对 Gui 的引用.</p>
<p>如果窗口已经被构造或销毁, 则抛出异常.</p>
</div>

<div class="methodShort" id="BackColor">
<h3>BackColor</h3>
<p>检索或设置窗口的背景色.</p>
<pre class="Syntax">RetrievedColor := MyGui.BackColor</pre>
<pre class="Syntax">MyGui.BackColor := NewColor</pre>
<p><em>RetrievedColor</em> 是此属性之前设置的当前颜色的 6-位 RGB 值, 如果使用的是默认颜色, 则是一个空字符串.</p>
<p><em>NewColor</em> 是 16 种主要 <a href="../misc/Colors.htm">HTML 颜色名称</a>之一, 十六进制 RGB 颜色值(0x 前缀可以省略), 纯数字 RGB 颜色值, 或者对于默认颜色指定单词 Default(或空字符串). 例如: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>, <code>""</code>.</p>
<p>默认情况下, 窗口的背景颜色为系统按钮的颜色.</p>
<p><a href="#MenuBar">菜单栏</a>及其子菜单的颜色可以这样改变: <code>MyMenuBar.<a href="Menu.htm#SetColor">SetColor</a> "White"</code>.</p>
<p>要让窗口的背景透明, 请使用 <a href="../commands/WinSetTransColor.htm">WinSetTransColor</a>. 然而, 如果在进行这样的操作前没有使用 <a href="#BackColor">Gui.BackColor</a> 为窗口设置自定义的颜色, 那么按钮也将变成透明的. 要避免此问题, 应首先为窗口设置自定义的颜色, 然后让此颜色透明. 例如:</p>
<pre>MyGui.BackColor := "EEAA99"
WinSetTransColor("EEAA99", MyGui)</pre>
<p>此外, 如果要移除背景透明的窗口的边框和标题栏, 使用下面的方法: <code>MyGui.Opt("-Caption")</code></p>
<p>为了阐明上面的情况, 请参阅此页面底部的屏幕显示(OSD) 的例子.</p>
</div>

<div class="methodShort" id="FocusedCtrl">
<h3>FocusedCtrl</h3>
<p>检索 GUI 的焦点控件的 <a href="GuiControl.htm">GuiControl 对象</a>.</p>
<pre class="Syntax">GuiCtrlObj := MyGui.FocusedCtrl</pre>
<p>注意: 为了达到效果, 一般不能将窗口最小化或隐藏.</p>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>检索 GUI 窗口的窗口句柄(HWND).</p>
<pre class="Syntax">CurrentHwnd := MyGui.Hwnd</pre>
<p>GUI 的 HWND, 通常与 <a href="../commands/PostMessage.htm">PostMessage</a>, <a href="../commands/SendMessage.htm">SendMessage</a> 和 <a href="../commands/DllCall.htm">DllCall</a> 一起使用.  它也可以直接用于 <a href="../misc/WinTitle.htm#ahk_id">WinTitle 参数</a>中.</p></div>

<div class="methodShort" id="MarginX">
<h3>MarginX</h3>
<p>检索或设置边和后续创建的控件之间的水平边距大小.</p>
<pre class="Syntax">RetrievedValue := MyGui.MarginX</pre>
<pre class="Syntax">MyGui.MarginX := NewValue</pre>
<p><em>RetrievedValue</em> 是当前水平边距的像素数.</p>
<p><em>NewValue</em> 是在自动定位任何没有明确 <a href="#XY">X 坐标</a>的控件时, 在窗口左右两边留出的空间像素数. 同时, 边距也被用来确定自动定位的控件之间的水平距离. 最后, 在第一次使用 <a href="#Show">MyGui.Show</a> 计算窗口的大小时(当没有指定明确的大小时), 会考虑到边距.</p>
<p>默认情况下, 边距与当前选择<a href="#SetFont">字体</a>的大小成正比(左右字体高度的 1.25 倍).</p>
</div>

<div class="methodShort" id="MarginY">
<h3>MarginY</h3>
<p>检索或设置边和后续创建的控件之间的垂直边距大小.</p>
<pre class="Syntax">RetrievedValue := MyGui.MarginY</pre>
<pre class="Syntax">MyGui.MarginY := NewValue</pre>
<p><em>RetrievedValue</em> 是当前垂直边距的像素数.</p>
<p><em>NewValue</em> 是在自动定位任何没有明确 <a href="#XY">Y 坐标</a>的控件时, 在窗口的顶部和底部留出的空间像素数. 同时, 边距也被用来确定自动定位的控件之间的垂直距离. 最后, 在第一次使用 <a href="#Show">MyGui.Show</a> 计算窗口的大小时(当没有指定明确的大小时), 会考虑到边距.</p>
<p>默认情况下, 边距与当前选择<a href="#SetFont">字体</a>的大小成正比(顶部和底部 0.75 倍字体高度).</p>
</div>

<div class="methodShort" id="MenuBar">
<h3>MenuBar</h3>
<p>检索或设置窗口的菜单栏.</p>
<pre class="Syntax">MyGui.MenuBar := Bar</pre>
<pre class="Syntax">Bar := MyGui.MenuBar</pre>
<p><em>Bar</em> 是由 <a href="Menu.htm#Call">MenuBar()</a> 创建的 <a href="Menu.htm">MenuBar 对象</a>. 例如:</p>
<pre>FileMenu := Menu()
FileMenu.Add "&amp;Open`tCtrl+O", (*) =&gt; FileSelect()  <em>; 关于 Ctrl+O 请参阅后面的备注.</em>
FileMenu.Add "E&amp;xit", (*) =&gt; ExitApp()
HelpMenu := Menu()
HelpMenu.Add "&amp;About", (*) =&gt; MsgBox("Not implemented")
Menus := Menu()
Menus.Add "&amp;File", FileMenu  <em>; 附加上面的两个子菜单.</em>
Menus.Add "&amp;Help", HelpMenu
MyGui := Gui()
MyGui.MenuBar := Menus
MyGui.Show "w300 h200"</pre>
<p>注意在上面的首行中 <code>&amp;Open</code> 后面跟着 <code>Ctrl+O</code>(它们之间有一个 tab). 这表示用户可以按下快捷键代替选择菜单项来执行操作. 如果这样的快捷键中只使用了标准的修饰键名称 Ctrl, Alt 和 Shift, 那么它会被自动注册为这个 GUI 的 <em>键盘快捷键</em>. 不含修饰键的单字母快捷键是区分大小写的, 且可以使用不常见的方法触发, 例如 IME 或 <kbd>Alt</kbd>+NNNN.</p>
<p>如果特殊的按键组合没有自动生效, 请使用<a href="../commands/_HotIf.htm">上下文相关热键</a>. 然而, 这样的热键一般不能使用 <a href="../commands/Send.htm">Send</a> 触发, 并且比起标准的键盘快捷键它们更可能和其他脚本产生冲突.</p>
<p>要移除窗口当前的菜单栏, 请使用 <code>MyGui.MenuBar := ""</code>(即, 赋值一个空字符串).</p>
</div>

<div class="methodShort" id="Name">
<h3>Name</h3>
<p>检索或设置 GUI 窗口的自定义名称.</p>
<pre class="Syntax">RetrievedName := MyGui.Name</pre>
<pre class="Syntax">MyGui.Name := NewName</pre>
</div>

<div class="methodShort" id="Title">
<h3>Title</h3>
<p>检索或设置 GUI 的标题.</p>
<pre class="Syntax">RetrievedTitle := MyGui.Title</pre>
<pre class="Syntax">MyGui.Title := NewTitle</pre>
</div>

<div class="methodShort" id="__Item">
<h3>__Item</h3>
<p>检索与指定名称, 文本, ClassNN 或 HWND 关联的 <a href="GuiControl.htm">GuiControl 对象</a>.</p>
<pre class="Syntax">GuiCtrlObj := Gui[Name]</pre>
</div>

<h2 id="Navigate">键盘导航</h2>
<p>使用 <kbd>Tab</kbd> 可以在 GUI 窗口中导航, 它会移动键盘焦点到下一个可输入型控件中(跳过移除了 <a href="#Tabstop">Tabstop</a> 样式的控件). 导航的顺序由控件添加的顺序决定. 当首次显示一个窗口时, 键盘焦点将在首个具有 Tabstop 样式(默认情况下大多数类型的控件都具有) 的可输入型控件上, 除非该控件是一个 Button, 并且有一个默认按钮, 在这种情况下, 后者会具有焦点.</p>
<p id="ShortcutKey">可以在某些控件的名称中包含和符号(&amp;) 来创建此控件的键盘快捷键, 在控件名称中的快捷键字母会加上下划线显示(取决于系统设置). 用户可以通过按下 <kbd>Alt</kbd> 和相应的字符来触发这样的快捷键. 对于按钮, 复选框和单选按钮, 按下相应的快捷键等于点击了按钮. 对于 GroupBox 和 Text 控件, 按下相应的快捷键则移动键盘焦点到此控件后(不是指位置, 是创建顺序) 首个具有 <a href="#Tabstop">tabstop</a> 样式的可输入型控件中. 然而, 如果多个控件含有相同的快捷键, 则按下此快捷键会让键盘焦点在这些控件中交替.</p>
<p>要在上面提及类型的控件中显示一个原义的和符号, 请指定两个连续的和符号, 如此例所示: <code>MyGui.Add("Button",, "Save &amp;&amp; Exit")</code>.</p>

<h2 id="Appear">窗口外观</h2>
<p>对于其图标, GUI 窗口使用创建窗口时有效的托盘图标. 因此, 要想拥有不同的图标, 请在创建窗口前更改托盘图标. 例如: <code><a href="../commands/TraySetIcon.htm">TraySetIcon</a>("MyIcon.ico")</code>. 也可以为一个窗口拥有一个不同于其小图标的大图标(大图标显示在 alt-tab 任务切换器中). 这可以通过 <a href="../commands/LoadPicture.htm">LoadPicture</a> 和 <a href="../commands/SendMessage.htm">SendMessage</a> 来实现; 例如:</p>
<pre>iconsize := 32  <em>; alt-tab 任务切换器中图标的理想尺寸在不同版本的系统中有所不同.</em>
hIcon := LoadPicture("My Icon.ico", "Icon1 w" iconsize " h" iconsize, &amp;imgtype)
MyGui := Gui()
SendMessage(0x80, 1, hIcon, MyGui)  <em>; 0x80 是 WM_SETICON; 1 表示 ICON_BIG(vs. 0 表示 ICON_SMALL).</em>
MyGui.Show()</pre>
<p>由于操作系统的限制, Checkbox, Radio button 和 GroupBox 控件中的文本不是使用默认颜色时将显示为经典主题外观.</p>
<p>相关主题: <a href="#MarginX">窗口的边距</a>.</p>

<h2 id="GenRemarks">备注</h2>
<p>使用 <a href="GuiControl.htm">GuiControl 对象</a>对 GUI 窗口中的单个控件进行操作.</p>
<p>每个 GUI 窗口最多可以包含 11,000 个控件. 然而, 当控件数量超过 5000 时需要谨慎, 因为此时某些类型的控件可能让系统不稳定.</p>
<p id="deleted">当 Gui 对象被删除时, GUI 窗口会自动<a href="#Destroy">销毁</a>, 当它的<a href="../Objects.htm#Reference_Counting">引用计数</a>达到零时, 就会发生这种情况. 然而, 这通常不会在窗口可见时发生, 因为 <a href="#Show">Show</a> 会自动增加引用计数. 当窗口可见时, 用户可以与之交互并触发由脚本处理的事件. 当用户关闭窗口或窗口被 <a href="#Hide">Hide</a> 隐藏, <a href="#Show">Show</a> 或 <a href="#Submit">Submit</a>, 这个额外的引用就会被释放.</p>
<p>为了保持 GUI 窗口的 "活力" 而不调用 <a href="#Show">Show</a> 或保留对其 Gui 对象的引用, 脚本可以使用 <a href="../commands/ObjAddRef.htm">ObjAddRef</a> 增加对象的引用计数(在这种情况下, 当不再需要该窗口时, 必须调用 <a href="../commands/ObjAddRef.htm">ObjRelease</a>). 例如, 当使用一个隐藏的 GUI 窗口来<a href="../commands/OnMessage.htm">接收消息</a>时, 或者当窗口被 "外部" 的方法, 如 <a href="../commands/WinShow.htm">WinShow</a> 显示时(由这个脚本或任何其他脚本), 就可以这样做.</p>
<p>如果脚本不是因为任何其他原因而<a href="../Scripts.htm#persistent">持续运行</a>, 它将在最后一个可见的 GUI 关闭后退出; 或者是在最后一个线程完成时退出, 或者是在没有线程运行时立即退出.</p>

<h2 id="Related">相关</h2>
<p><a href="GuiControl.htm">GuiControl 对象</a>, <a href="../commands/GuiFromHwnd.htm">GuiFromHwnd</a>, <a href="../commands/GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a>, <a href="../commands/GuiControls.htm">控件类型</a>, <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="Menu.htm">Menu 对象</a>, <a href="../commands/Control.htm">Control 函数</a>, <a href="../commands/MsgBox.htm">MsgBox</a>, <a href="../commands/FileSelect.htm">FileSelect</a>, <a href="../commands/DirSelect.htm">DirSelect</a></p>

<h2 id="Examples">示例</h2>
<div class="ex" id="ExPopup">
<p><a class="ex_number" href="#ExPopup"></a> 创建弹窗.</p>
<pre>MyGui := Gui(, "Title of Window")
MyGui.Opt("+AlwaysOnTop +Disabled -SysMenu +Owner")  <em>; +Owner 避免显示任务栏按钮.</em>
MyGui.Add("Text",, "Some text to display.")
MyGui.Show("NoActivate")  <em>; NoActivate 让当前活动窗口继续保持活动状态.</em></pre>
</div>

<div class="ex" id="ExInputBox">
<p><a class="ex_number" href="#ExInputBox"></a> 创建一个要求输入姓名的简单输入框.</p>
<pre>MyGui := Gui(, "Simple Input Example")
MyGui.Add("Text",, "First name:")
MyGui.Add("Text",, "Last name:")
MyGui.Add("Edit", "vFirstName ym")  <em>; ym 选项开始一个新的控件列.</em>
MyGui.Add("Edit", "vLastName")
MyGui.Add("Button", "default", "OK").OnEvent("Click", ProcessUserInput)
MyGui.OnEvent("Close", ProcessUserInput)
MyGui.Show()

ProcessUserInput(thisGui, *)
{
    Saved := thisGui.Submit()  <em>; 将命名控件的内容保存到一个对象中.</em>
    MsgBox("You entered '" Saved.FirstName " " Saved.LastName "'.")
}</pre>
</div>

<div class="ex" id="ExTab">
<p><a class="ex_number" href="#ExTab"></a> 创建带有多个选项卡的选项卡控件, 每个选项卡包含不同的控件与之交互.</p>
<pre>MyGui := Gui()
Tab := MyGui.Add("Tab3",, ["First Tab","Second Tab","Third Tab"])
MyGui.Add("Checkbox", "vMyCheckbox", "Sample checkbox") 
Tab.UseTab(2)
MyGui.Add("Radio", "vMyRadio", "Sample radio1")
MyGui.Add("Radio",, "Sample radio2")
Tab.UseTab(3)
MyGui.Add("Edit", "vMyEdit r5")  <em>; r5 表示 5 行的高度.</em>
Tab.UseTab()  <em>; 即后续添加的控件将不属于前面那个选项卡控件.</em>
Btn := MyGui.Add("Button", "default xm", "OK")  <em>; xm 把它放置在左下角.</em>
Btn.OnEvent("Click", ProcessUserInput)
MyGui.OnEvent("Close", ProcessUserInput)
MyGui.OnEvent("Escape", ProcessUserInput)
MyGui.Show()

ProcessUserInput(*)
{
    Saved := MyGui.Submit()  <em>; 将命名控件的内容保存到一个对象中.</em>
    MsgBox("You entered:`n" Saved.MyCheckbox "`n" Saved.MyRadio "`n" Saved.MyEdit)
}</pre>
</div>

<div class="ex" id="ExListBox">
<p><a class="ex_number" href="#ExListBox"></a> 创建一个显示目录中的文件的列表框.</p>
<pre>MyGui := Gui()
MyGui.Add("Text",, "Pick a file to launch from the list below.")
LB := MyGui.Add("ListBox", "w640 r10")
LB.OnEvent("DoubleClick", LaunchFile)
Loop Files, "C:\*.*"  <em>; 根据您的需要改变此文件夹和通配符模式.</em>
    LB.Add([A_LoopFilePath])
MyGui.Add("Button", "Default", "OK").OnEvent("Click", LaunchFile)
MyGui.Show()

LaunchFile(*)
{
    if MsgBox("Would you like to launch the file or document below?`n`n" LB.Text,, 4) = "No"
        return
    <em>; 否则, 尝试运行此文件:</em>
    try Run(LB.Text)
    if A_LastError
        MsgBox("Could not launch the specified file. Perhaps it is not associated with anything.")
}</pre>
</div>

<div class="ex" id="ExToolTip">
<p><a class="ex_number" href="#ExToolTip"></a> 当鼠标移动到特定的控件上时显示相关帮助(使用工具提示).</p>
<pre>
MyGui := Gui()
MyEdit := MyGui.Add("Edit")
<em>; 在自定义属性中存储工具提示文本:</em>
MyEdit.ToolTip := "This is a tooltip for the control whose name is MyEdit."
MyDDL := MyGui.Add("DropDownList",, ["Red","Green","Blue"])
MyDDL.ToolTip := "Choose a color from the drop-down list."
MyGui.Add("Checkbox",, "This control has no tooltip.")
MyGui.Show()
OnMessage(0x200, On_WM_MOUSEMOVE)

On_WM_MOUSEMOVE(wParam, lParam, msg, Hwnd)
{
    static PrevHwnd := 0
    if (Hwnd != PrevHwnd)
    {
        Text := "", ToolTip() <em>; 关闭之前的工具提示.</em>
        CurrControl := GuiCtrlFromHwnd(Hwnd)
        if CurrControl
        {
            if !CurrControl.HasProp("ToolTip")
                return <em>; 此控件没有工具提示.</em>
            Text := CurrControl.ToolTip
            SetTimer () => ToolTip(Text), -1000
            SetTimer () => ToolTip(), -4000 <em>; 移除工具提示.</em>
        }
        PrevHwnd := Hwnd
    }
}</pre>
</div>

<div class="ex" id="ExOSD">
<p><a class="ex_number" href="#ExOSD"></a> 使用透明窗口进行屏幕显示(OSD).</p>
<pre>MyGui := Gui()
MyGui.Opt("+AlwaysOnTop -Caption +ToolWindow")  <em>; +ToolWindow 避免显示任务栏按钮和 alt-tab 菜单项.</em>
MyGui.BackColor := "EEAA99"  <em>; 可以是任何 RGB 颜色(下面会变成透明的).</em>
MyGui.SetFont("s32")  <em>; 设置大字体(32 磅).</em>
CoordText := MyGui.Add("Text", "cLime", "XXXXX YYYYY")  <em>; XX &amp; YY 用来自动调整窗口大小.
; 让此颜色的所有像素透明且让文本显示为半透明(150):</em>
WinSetTransColor(MyGui.BackColor " 150", MyGui)
SetTimer(UpdateOSD, 200)
UpdateOSD()  <em>; 立即进行第一次更新而不等待计时器.</em>
MyGui.Show("x0 y400 NoActivate")  <em>; NoActivate 让当前活动窗口继续保持活动状态.</em>

UpdateOSD(*)
{
    MouseGetPos &amp;MouseX, &amp;MouseY
    CoordText.Value := "X" MouseX ", Y" MouseY
}</pre>
</div>

<div class="ex" id="ExProgressBar">
<p><a class="ex_number" href="#ExProgressBar"></a> 在背景图像上移动的进度条.</p>
<pre>MyGui := Gui()
MyGui.BackColor := "White"
MyGui.Add("Picture", "x0 y0 h350 w450", A_WinDir "\Web\Wallpaper\Windows\img0.jpg")
MyBtn := MyGui.Add("Button", "Default xp+20 yp+250", "Start the Bar Moving")
MyBtn.OnEvent("Click", MoveBar)
MyProgress := MyGui.Add("Progress", "w416")
MyText := MyGui.Add("Text", "wp")  <em>; wp 表示 "使用之前的宽度".</em>
MyGui.Show()

MoveBar(*)
{
    Loop Files, A_WinDir "\*.*"
    {
        if (A_Index &gt; 100)
            break
        MyProgress.Value := A_Index
        MyText.Value := A_LoopFileName
        Sleep 50
    }
    MyText.Value := "Bar finished."
}</pre>
</div>

<div class="ex" id="ExImageViewer">
<p><a class="ex_number" href="#ExImageViewer"></a> 创建简单的图像查看器.</p>
<pre>MyGui := Gui("+Resize")
MyBtn := MyGui.Add("Button", "default", "&amp;Load New Image")
MyBtn.OnEvent("Click", LoadNewImage)
MyRadio := MyGui.Add("Radio", "ym+5 x+10 checked", "Load &amp;actual size")
MyGui.Add("Radio", "ym+5 x+10", "Load to &amp;fit screen")
MyPic := MyGui.Add("Pic", "xm")
MyGui.Show()

LoadNewImage(*)
{
    Image := FileSelect(,, "Select an image:", "Images (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)")
    if Image = ""
        return
    if (MyRadio.Value)  <em>; 按实际大小显示图像.</em>
    {
        Width := 0
        Height := 0
    }
    else <em>; 选择了第二个单选按钮: 按照屏幕的大小显示图像.</em>
    {
        Width := A_ScreenWidth - 28  <em>; 减去的 28 是用来显示边框和内边缘的空间.</em>
        Height := -1  <em>; "保持高宽比" 应该是最好的.</em>
    }
    MyPic.Value := Format("*w{1} *h{2} {3}", Width, Height, Image)  <em>; 载入图像.</em>
    MyGui.Title := Image
    MyGui.Show("xCenter y0 AutoSize")  <em>; 调整窗口以适应图片尺寸.</em>
}</pre>
</div>

<div class="ex" id="ExEditor">
<p><a class="ex_number" href="#ExEditor"></a> 创建带有菜单栏的简单文本编辑器.</p>
<pre>

<em>; 创建 MyGui 窗口:</em>
MyGui := Gui("+Resize", "Untitled")  <em>; 使窗口可以调整大小.</em>

<em>; 为菜单栏创建子菜单:</em>
FileMenu := Menu()
FileMenu.Add("&amp;New", MenuFileNew)
FileMenu.Add("&amp;Open", MenuFileOpen)
FileMenu.Add("&amp;Save", MenuFileSave)
FileMenu.Add("Save &amp;As", MenuFileSaveAs)
FileMenu.Add() <em>; 分隔线.</em>
FileMenu.Add("E&amp;xit", MenuFileExit)
HelpMenu := Menu()
HelpMenu.Add("&amp;About", MenuHelpAbout)

<em>; 通过附加子菜单来创建菜单栏:</em>
MyMenuBar := MenuBar()
MyMenuBar.Add("&amp;File", FileMenu)
MyMenuBar.Add("&amp;Help", HelpMenu)

<em>; 添加菜单栏到窗口:</em>
MyGui.MenuBar := MyMenuBar

<em>; 创建主编辑控件:</em>
MainEdit := MyGui.Add("Edit", "WantTab W600 R20")

<em>; 应用事件:</em>
MyGui.OnEvent("DropFiles", Gui_DropFiles)
MyGui.OnEvent("Size", Gui_Size)

MenuFileNew()  <em>; 应用默认设置.</em>
MyGui.Show()  <em>; 显示窗口.</em>

MenuFileNew(*)
{
    MainEdit.Value := ""  <em>; 清空编辑控件.</em>
    FileMenu.Disable("3&amp;")  <em>; 使 &amp;Save 灰色禁用.</em>
    MyGui.Title := "Untitled"
}

MenuFileOpen(*)
{
    MyGui.Opt("+OwnDialogs")  <em>; 强制用户响应 FileSelectFile 对话框后才能返回到主窗口.</em>
    SelectedFileName := FileSelect(3,, "Open File", "Text Documents (*.txt)")
    if SelectedFileName = "" <em>; 没有选择文件.</em>
        return
    global CurrentFileName := readContent(SelectedFileName)
}

MenuFileSave(*)
{
    saveContent(CurrentFileName)
}

MenuFileSaveAs(*)
{
    MyGui.Opt("+OwnDialogs")  <em>; 强制用户响应 FileSelectFile 对话框后才能返回到主窗口.</em>
    SelectedFileName := FileSelect("S16",, "Save File", "Text Documents (*.txt)")
    if SelectedFileName = "" <em>; 没有选择文件.</em>
        return
    global CurrentFileName := saveContent(SelectedFileName)
}

MenuFileExit(*)  <em>; 用户从 File 菜单中选择 "Exit".</em>
{
    WinClose()
}

MenuHelpAbout(*)
{
    About := Gui("+owner" MyGui.Hwnd)  <em>; 让主窗口成为 "about box" 的父窗口.</em>
    MyGui.Opt("+Disabled")  <em>; 禁用主窗口.</em>
    About.Add("Text",, "Text for about box.")
    About.Add("Button", "Default", "OK").OnEvent("Click", About_Close)
    About.OnEvent("Close", About_Close)
    About.OnEvent("Escape", About_Close)
    About.Show()

    About_Close(*)
    {
        MyGui.Opt("-Disabled")  <em>; 重新启用主窗口(必须在下一步之前进行).</em>
        About.Destroy()  <em>; 销毁关于对话框.</em>
    }
}

readContent(FileName)
{
    try
        FileContent := FileRead(FileName)  <em>; 读取文件的内容到变量中.</em>
    catch
    {
        MsgBox("Could not open '" FileName "'.")
        return
    }
    MainEdit.Value := FileContent  <em>; 在控件中显示文本.</em>
    FileMenu.Enable("3&amp;")  <em>; Re-enable &amp;Save.</em>
    MyGui.Title := FileName  <em>; 在标题栏显示文件名.</em>
    return FileName
}

saveContent(FileName)
{
    try
    {
        if FileExist(FileName)
            FileDelete(FileName)
        FileAppend(MainEdit.Value, FileName)  <em>; 保存内容到文件.</em>
    }
    catch
    {
        MsgBox("The attempt to overwrite '" FileName "' failed.")
        return
    }
    <em>; 成功时在标题栏显示文件名(以防 MenuFileSaveAs 被调用的情况):</em>
    MyGui.Title := FileName
    return FileName
}

Gui_DropFiles(thisGui, Ctrl, FileArray, *)  <em>; 支持拖拽.</em>
{
    CurrentFileName := readContent(FileArray[1])  <em>; 仅获取首个文件(如果有多个文件的时候).</em>
}

Gui_Size(thisGui, MinMax, Width, Height)
{
    if MinMax = -1  <em>; 窗口被最小化了. 无需进行操作.</em>
        return
    <em>; 否则, 窗口的大小被调整过或被最大化了. 调整编辑控件的大小以匹配窗口.</em>
    MainEdit.Move(,, Width-20, Height-20)
}</pre>
</div>

</body>
</html>