<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Regular Expressions (RegEx) - Quick Reference | AutoHotkey v2</title>
<meta name="description" content="This page covers options, commonly used symbols and syntax which can be used inside a regular expression." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>
<h1>正则表达式(RegEx) - 快速参考</h1>

<h2 id="toc">目录</h2>
<ul>
  <li><a href="#fundamentals">基础</a></li>
  <li><a href="#Options">选项(区分大小写)</a></li>
  <li><a href="#Common">常用符号和语法</a></li>
</ul>

<h2 id="fundamentals">基础</h2>
<p><strong>Match anywhere(在任意位置进行匹配)</strong>: 默认情况下, 正则表达式匹配要搜索的字符串中任意位置的子字符串 <em>anywhere</em>. 例如, 正则表达式 <span class="regex">abc</span> 可以匹配 <span class="subj">abc</span>123, 123<span class="subj">abc</span> 和 123<span class="subj">abc</span>xyz. 要限制在开始或末尾进行匹配, 请使用<a href="#anchor">锚</a>.</p>
<p><strong>转义字符</strong>: 大多数字符(例如 abc123) 可以原义使用在正则表达式中. 然而, 字符 <strong>\.*?+[{|()^$</strong> 必须在前面加上反斜杠才能被视为原义. 例如, <span class="regex">\.</span> 表示一个原义的句点, <span class="regex">\\</span> 表示一个原义的反斜杠. 使用 \Q...\E 能避免转义. 例如: <span class="regex">\QLiteral Text\E</span>.</p>
<p><strong>区分大小写</strong>: 默认情况下, 正则表达式是区分大小写的. 这种特性可以使用 "i" 选项进行改变. 例如, 模式 <span class="regex">i)abc</span> 会搜索所有大小写形式的 "abc". 请参阅下面了解其他的修饰符选项.</p>

<h2 id="Options">选项(区分大小写)</h2>
<p>在正则表达式的最前面, 指定零个或多个下列选项后面跟着闭括号. 例如, 模式 <span class="regex"><span class="red">im)</span>abc</span> 将使用不区分大小写和多行选项来搜索 "abc"(如果不含选项, 则圆括号可以省略). 尽管这种语法有别于传统, 不过它不需要特殊的分隔符(例如正斜杠), 因此不需要对模式中的这样的分隔符进行转义. 此外, 由于很容易解析出选项, 所以提升了性能.</p>
<table class="info">
  <tr>
    <th class="center">选项</th>
    <th abbr="Descr">描述</th>
  </tr>
  <tr id="opt_i">
    <td class="center bold">i</td>
    <td>	不区分大小写匹配, 它把字母 A 到 Z 视为等同于它们的小写副本.</td>
  </tr>
  <tr id="Multiline">
    <td class="center bold">m</td>
    <td><p>多行. 把 <em>Haystack</em> 视为许多单独的行(如果它包含换行符) 的集合而不是一个单个的连续行. 具体地, 它会改变下列方式:</p>
      <p>1) 抑扬符(^) 能匹配紧跟在内部所有换行符之后的位置, 如同它总能匹配 <em>Haystack</em> 的开始处一样(但它不会匹配 <em>Haystack</em> <em>最后的</em> 换行符之后的位置 ).</p>
      <p>2) 美元符($) 能匹配 <em>Haystack</em> 中任何换行符之前的位置(如同它总能匹配最后面的位置).</p>
      <p>例如, 模式 <span class="regex"><span class="red">m)</span>^abc$</span> 中包含了 "m" 选项才能在 xyz`r`n<span class="subj">abc</span> 中形成匹配.</p>
      <p>使用了 "m" 选项时, "D" 选项会被忽略.</p></td>
  </tr>
  <tr id="opt_s">
    <td class="center bold">s</td>
    <td>DotAll. 此选项会让句点(.) 匹配包含换行符在内的所有字符(一般情况下, 它不能匹配换行符). 然而, 如果换行符是默认的 CRLF(`r`n), 则必须使用两个句点才能进行匹配(不是一个). 不论是否使用此选项, 排除型字符类(例如 <span class="regex">[^a]</span>) 总能匹配换行符.</td>
  </tr>
  <tr id="opt_x">
    <td class="center bold">x</td>
    <td>忽略模式中的空白字符, 除非被转义或在字符类中. 字符 `n 和 `t 是被忽略的字符, 因为当它们进入 PCRE 时, 它们已经是原始的/原义的空白字符(与之相比, \n 和 \t 则不会被忽略, 因为它们是 PCRE 的转义序列). "x" 选项还会忽略字符类外面的非转义 # 和下一个换行符之间的字符(包括它们). 这使得在复杂的模式中添加注释成为可能. 然而, 这只适用于数据字符; 空白字符可能永远都不会出现在特殊字符序列中, 例如 (?(, 它以条件子模式开头.</td>
  </tr>
  <tr id="opt_A">
    <td class="center bold">A</td>
    <td>强制锚定模式; 也就是说, 它只能在 <em>Haystack</em> 的开始处进行匹配. 在大多数情况下, 这相当于使用 "^" 等方式显式地锚定.</td>
  </tr>
  <tr id="opt_D">
    <td class="center bold">D</td>
    <td>强制美元符($) 匹配 <em>Haystack</em> 的末端, 即使 <em>Haystack</em> 的最后的字符是换行符. 如果没有此选项, 则 $ 会匹配最后的换行符(如果有) 之前的位置. 注意: 使用了 "m" 选项时, 该选项会被忽略.</td>
  </tr>
  <tr id="opt_J">
    <td class="center bold">J</td>
    <td>允许重复的<a href="../commands/RegExMatch.htm#NamedSubPat">命名子模式</a>. 这对于一组命名相同的子模式中只有一个可以匹配的模式来说是很有用的. 注意: 如果一个特定名称有多个实例匹配, 则只存储最左边的那个. 另外, 变量名不区分大小写.</td>
  </tr>
  <tr id="opt_U">
    <td class="center bold">U</td>
    <td>非贪婪. 让限定符 <strong>*</strong>, <strong>?</strong>, <strong>+</strong> 和 <strong>{min,max}</strong> 在形成匹配时只消耗必需的那些字符, 把剩下的部分留给模式的后面部分. 没有使用 "U" 选项时, 可以在这些字符后加上问号来限定它们为非贪婪的. 相反地, <em>使用了</em> "U" 选项时, 问号会成为贪婪匹配的限定符.</td>
  </tr>
  <tr id="opt_extra">
    <td class="center bold">X</td>
    <td>PCRE_EXTRA. 启用不兼容 Perl 的 PCRE 特性. 目前, 这样做的唯一功能是在模式中的任意反斜杠后跟着没有特殊含义的字母时, 都会导致抛出异常. 此选项有助于保留未使用的反斜杠序列供将来使用. 如果没有此选项, 反斜杠后跟着没有特殊含义的字母时会被视为原义的(即 \g 和 g 都被识别为原义的 g). 不论是否使用此选项, 没有特殊含义的非字母反斜杠序列总是被视为原义的(即 \/ 和 / 都被视为正斜杠).</td>
  </tr>
  <tr id="Study">
    <td class="center bold">S</td>
    <td>研究模式来提高性能. 它可用于要执行多次的特定模式(尤其是复杂的模式). 如果 PCRE 找到了提高性能的方法, 则会把这个发现储存到缓存中模式的旁边, 供后续执行相同模式时使用(后续使用此模式时还需要指定 S 选项, 因为要找到缓存中相同的模式则它们的选项也必须完全相同, 包括它们的顺序). (这里的研究主要指在进行匹配前使用其他一些通常较简单快速的方法进行判断, 例如假设模式至少匹配 5 个字符, 而源字符串只有 3 个, 那么正则表达式引擎会直接返回 "没有匹配" 的结果, 而不会进行匹配.)</td>
  </tr>
  <tr id="opt_Callout">
    <td class="center bold">C</td>
    <td>启用自动调出模式. 请参阅<a href="../misc/RegExCallout.htm#auto">正则表达式调出</a>了解更多信息.</td>
  </tr>
  <tr id="NEWLINE_ANY">
    <td class="center bold">`a</td>
    <td><p>启用识别额外的换行标记. 默认情况下, 只识别 `r`n, `n 和 `r. 启用该选项后, 还可识别 `v/VT/vertical tab/chr(0xB), `f/FF/formfeed/chr(0xC), NEL/next-line/chr(0x85), LS/line separator/chr(0x2028) 和 PS/paragraph separator/chr(0x2029).</p>
      <p>`a, `n 和 `r 选项会影响<a href="../misc/RegEx-QuickRef.htm#anchor">锚点(^ 和 $)</a> 和<a href="../misc/RegEx-QuickRef.htm#dot">句点/句号模式</a>的行为.</p>
      <p>`a 也会使 (*BSR_UNICODE) 生效, 这将导致 \R 匹配任何类型的换行. 默认情况下, \R 匹配 `n, `r 和 `r`n; 这种行为可以通过以下选项组合来恢复: `a)(*BSR_ANYCRLF)</p>
    </td>
  </tr>
  <tr id="opt_esc_n">
    <td class="center bold">`n</td>
    <td>使单独的换行(`n) 成为唯一可识别的换行标记(见上文).</td>
  </tr>
  <tr id="opt_esc_r">
    <td class="center bold">`r</td>
    <td>使单独的回车(`r) 成为唯一可识别的换行标记(见上文).</td>
  </tr>
</table>
<p class="note"><strong>注意</strong>: 在两个选项间可以使用空格或 tab 分隔.</p>

<h2 id="Common">常用符号和语法</h2>
<table class="info">
  <tr>
    <th class="center">元素</th>
    <th abbr="Descr">描述</th>
  </tr>
	<tr id="dot">
		<td class="center bold">.</td>
		<td>默认情况下, 句点匹配换行符(`r`n) 中除 `r 外的任何单个字符, 但是这种特性可以使用 <a href="#opt_s">DotAll (s)</a>, <a href="#opt_esc_n">linefeed (`n)</a>, <a href="#opt_esc_r">carriage return (`r)</a> 或 <a href="#NEWLINE_ANY">`a</a> 选项进行更改. 例如, <span class="regex">ab.</span> 匹配 <span class="subj">abc</span> 和 <span class="subj">abz</span> 以及 <span class="subj">ab_</span>.</td>
	</tr>
	<tr>
		<td class="center bold">*</td>
		<td><p>星号匹配零个或多个前面的字符, <a href="#class">类</a>或<a href="#subpat">子模式</a>. 例如, <span class="regex">a*</span> 匹配 <span class="subj">a</span>b 和 <span class="subj">aaa</span>b. 它还可以匹配任何不包含 "a" 的字符串的开头.</p>
		<p><strong>通配符:</strong> 句点星号模式 <span class="regex">.*</span> 是匹配范围最广的模式之一, 因为它可以匹配零个或多个 <em>任意</em> 字符(除了换行符: `r 和 `n). 例如, <span class="regex">abc.*123</span> 可以匹配 <span class="subj">abcAnything123</span>, 也能匹配 <span class="subj">abc123</span>.</p></td>
	</tr>
	<tr>
	  <td class="center bold">?</td>
	  <td>问号匹配零或一个前面的字符, <a href="#class">类</a>或<a href="#subpat">子模式</a>. 可以理解为 "前面的项目是可选的". 例如, <span class="regex">colou?r</span> 可以匹配 <span class="subj">color</span> 和 <span class="subj">colour</span>, 因为 "u" 是可选的.</td>
  </tr>
	<tr>
	  <td class="center bold">+</td>
	  <td>加号匹配一个或多个前面的字符, <a href="#class">类</a>或<a href="#subpat">子模式</a>. 例如 <span class="regex">a+</span> 可以匹配 <span class="subj">a</span>b 和 <span class="subj">aaa</span>b. 但与 <span class="regex">a*</span> 和 <span class="regex">a?</span>不同的是, 模式 <span class="regex">a+</span> 不会匹配开头不是 "a" 的字符串.</td>
  </tr>
	<tr>
	  <td class="center bold">{min,max}</td>
	  <td><p>匹配出现次数介于 <em>min</em> 和 <em>max</em> 的前面的字符, <a href="#class">类</a>或<a href="#subpat">子模式</a>. 例如, <span class="regex">a{1,2}</span> 可以匹配  <span class="subj">a</span>b, 但只匹配 <span class="subj">aa</span>ab 中的前两个 a.</p>
        <p>此外, {3} 表示准确匹配 3 次, 而 {3<strong>,</strong>} 则表示匹配 3 次或更多. 注意: 指定的数字必须小于 65536, 且第一个必须小于或等于第二个.</p></td>
  </tr>
	<tr id="class">
	  <td class="center bold">[...]</td>
	  <td><p><strong>字符类:</strong> 方括号将一个字符列表或字符范围(或两者) 括在一起. 例如, <span class="regex">[abc]</span> 表示 "a, b 或 c 的中任何一个字符". 使用破折号来创建范围; 例如, <span class="regex">[a-z]</span> 表示 "在小写字母 a 和 z(包含的) 之间的任何一个字符". 列表和范围可以组合在一起; 例如 <span class="regex">[a-zA-Z0-9_]</span> 表示 "字母, 数字或下划线中的任何一个字符".</p>
	    <p>字符类后面可以使用 <strong>*</strong>, <strong>?</strong>, <strong>+</strong> 或 <strong>{min,max}</strong>. 例如, <span class="regex">[0-9]+</span> 匹配一个或多个任意数字; 因此它可以匹配 xyz<span class="subj">123</span> 但不会匹配 abcxyz.</p>            
        <p>通过  <strong>[[:xxx:]]</strong> 的形式还支持下列 POSIX 命名集, 其中 xxx 是下列单词的其中一个: alnum, alpha, ascii(0-127), blank(space 或 tab), cntrl(控制字符), digit (0-9), xdigit(十六进制数字), print, graph(排除了空格的打印字符), punct, lower, upper, space(whitespace), word(等同于 <a href="#word">\w</a>).</p>
        <p>在字符类中, 只有在类中具有特殊含义的字符才需要进行转义; 例如 <span class="regex">[\^a]</span>, <span class="regex">[a\-b]</span>, <span class="regex">[a\]]</span> 和 <span class="regex">[\\a]</span>.</p></td>
  </tr>
	<tr>
	  <td class="center bold">[^...]</td>
	  <td>匹配任意一个 <strong>不在</strong> 类中的字符. 例如, <span class="regex">[^/]*</span> 匹配零个或多个 <em>不是</em> 正斜杠的任意字符, 例如 <span class="subj">http:</span>//. 同样地, <span class="regex">[^0-9xyz]</span> 匹配既不是数字也不是 x, y 或 z 的任何一个字符.</td>
  </tr>
	<tr>
	  <td class="center bold">\d</td>
	  <td>匹配任意一个数字(等同于类 <span class="regex">[0-9]</span>). 相反的, 大写的 <strong>\D</strong> 表示 "任意的 <em>非</em>-数字字符". 这个和下面的两个都可以用在<a href="#class">类</a>中; 例如, <span class="regex">[\d.-]</span> 表示 "任何数字, 句点或负号".</td>
  </tr>
	<tr>
	  <td class="center bold">\s</td>
	  <td>匹配任意单个空白字符 , 主要是空格, tab 和换行符(`r 和 `n). 相反的, 大写的 <strong>\S</strong> 表示 "任意的 <em>非</em>-空白字符".</td>
  </tr>
	<tr id="word">
	  <td class="center bold">\w</td>
	  <td>匹配任何单个 "单词" 即字母, 数字或下划线. 这等同于 <span class="regex">[a-zA-Z0-9_]</span>. 相反的, 大写的 <strong>\W</strong> 表示 "任意的 <em>非</em>-单词字符".</td>
  </tr>
	<tr id="anchor">
	  <td class="center bold">^<br>$</td>
	  <td><p>抑扬符(^) 和美元符($) 被称为 <em>锚</em> , 因为它们不消耗任何字符; 相反地, 它们把模式限定在被搜索字符串的开始或末尾进行匹配.</p>
	    <p><strong>^</strong> 出现在模式的开头, 要求匹配发生在行的最开始. 例如, <span class="regex">^abc</span> 可以匹配 <span class="subj">abc</span>123, 但不匹配 123abc.</p>
	    <p><strong>$</strong> 出现在模式的末尾, 要求匹配发生在行的最末端. 例如, <span class="regex">abc$</span> 可以匹配 123<span class="subj">abc</span>, 但不匹配 abc123.</p>
      <p>这两个锚还可以组合使用. 例如, <span class="regex">^abc$</span> 仅匹配 <span class="subj">abc</span>(即在它的前面或后面不能有另外的字符).</p>
      <p>如果被搜索的文本包含多行, 则可以使用 <a href="#Multiline">"m" 选项</a>让锚应用于每行而不是把所有文本作为整体. 例如, <span class="regex">m)^abc$</span> 可以匹配 123`r`n<span class="subj">abc</span>`r`n789. 但如果没有 "m" 选项, 则不会匹配.</p></td>
  </tr>
	<tr>
	  <td class="center bold">\b</td>
	  <td><strong>\b</strong> 表示 "单词边界", 它类似锚, 因为它不消耗任何字符. 它要求当前字符的<a href="#word">状态为单词字符(\w)</a>, 与前一个字符的状态相反. 它通常用来避免意外地匹配到在其他单词内的某个单词. 例如, <span class="regex">\bcat\b</span> 不会匹配 catfish, 但它可以匹配不论周围是否有标点或空白的 <span class="subj">cat</span>. 大写的 <strong>\B</strong> 则相反: 它要求当前字符 <em>不是</em> 单词的边界.</td>
  </tr>
	<tr>
	  <td class="center bold">|</td>
	  <td>竖线将两个或多个可选项目分隔开来. 如果可选项目中 <em>任何一个</em> 满足条件, 则会形成匹配. 例如, <span class="regex">gray|grey</span> 既可以匹配 <span class="subj">gray</span> 也可以匹配 <span class="subj">grey</span>. 同样地, 模式 <span class="regex">gr(a|e)y</span> 中通过下面描述的括号的帮助可以实现同样的作用.</td>
  </tr>
	<tr id="subpat">
	  <td class="center bold">(...)</td>
	  <td><p>括在括号中的项目常用于:</p>
	    <ul>
	      <li>确定求值的顺序. 例如, <span class="regex">(Sun|Mon|Tues|Wednes|Thurs|Fri|Satur)day</span> 可以匹配任何一天的名称.</li>
	      <li>把 <strong>*</strong>, <strong>?</strong>, <strong>+</strong> 或 <strong>{min,max}</strong> 应用到 <em>系列</em> 字符而不只是单个字符. 例如, <span class="regex">(abc)+</span> 匹配一个或多个 "abc" 字符串; 因此它可以匹配 <span class="subj">abcabc</span>123, 但不会匹配 ab123 或 bc123.</li>
          <li id="capture">捕获子模式, 如 <span class="regex">abc<span class="red">(.*)</span>xyz</span> 中被圆括号包围的句点和星号. 例如, <a href="../commands/RegExMatch.htm">RegExMatch</a> 在其<a href="../commands/RegExMatch.htm#MatchObject">输出数组</a>中存储了匹配每个子模式的子串. 类似地, <a href="../commands/RegExReplace.htm">RegExReplace</a> 允许将与每个子模式匹配的子串通过<a href="../commands/RegExReplace.htm#BackRef">反向引用</a>(如 $1) 重新插入到结果中. 要使用小括号而不产生捕获子模式的副作用, 请指定 <strong>?:</strong> 为小括号内的前两个字符; 例如: <span class="regex">(<span class="red">?:</span>.*)</span></li>
	      <li>即时更改<a href="#Options">选项</a>. 例如, <span class="regex">(?im)</span> 会为模式的后续部分打开不区分大小写和多行选项(如果它在子模式中则它会改变子模式的选项). 相反地, <span class="regex">(?-im)</span> 会关闭它们. 支持除 DPS`r`n`a 外的所有选项.</li>
	    </ul></td>
  </tr>
	<tr>
	  <td class="center bold">\t<br>\r<br>等等.</td>
	  <td><p>这些转义序列代表着特殊的字符. 最常见的有 <strong>\t</strong>(tab), <strong>\r</strong>(回车) 和 <strong>\n</strong>(换行). 在 AutoHotkey 中, 在这些情况下, 可以选择使用重音符(`) 来代替反斜杠. 还支持 <strong>\xhh</strong> 形式的转义序列, 其中 <em>hh</em> 是介于 00 和 FF 之间的任意 ANSI 字符的十六进制码.</p>
      <p><strong>\R</strong> 匹配 <code>`r`n</code>, <code>`n</code> 和 <code>`r</code>(然而, \R 在<a href="#class">类</a>中仅表示字母 "R").</p></td>
  </tr>
  <tr id="slashP">
    <td class="center bold">\p{xx}<br>\P{xx}<br>\X</td>
    <td><p>Unicode 字符属性. <strong>\p{xx}</strong> 匹配具有 xx 属性的字符, 而 <strong>\P{xx}</strong> 匹配任意 <i>不具有</i> xx 属性的字符. 例如, <span class="regex">\pL</span> 匹配任意一个字母, 而 <span class="regex">\p{Lu}</span> 匹配任意一个大写字母. <strong>\X</strong> 匹配任意数量的扩展 Unicode 序列中的字符.</p>
    <p>对于受支持的属性名称的完整列表和其他细节, 请在 <a href="http://www.pcre.org/pcre.txt">www.pcre.org/pcre.txt</a> 中搜索 "\p{xx}".</p></td>
  </tr>
  <tr id="UCP">
    <td class="center bold">(*UCP)</td>
    <td><p>出于性能考虑, \d, \D, \s, \S, \w, \W, \b 和 \B 只识别 ASCII 字符. 如果模式以 <strong>(*UCP)</strong> 开头, Unicode 属性将被用来确定哪些字符匹配. 例如, \w 变成相当于 <span class="regex">[\p{L}\p{N}_]</span>, 而 \d 变成等同于 <span class="regex">\p{Nd}</span>.</p>
    </td>
  </tr>
</table>
<p><strong>贪婪</strong>: 默认情况下, <strong>*</strong>, <strong>?</strong>, <strong>+</strong> 和 <strong>{min,max}</strong> 是贪婪的, 因为它们消耗到  <em>最后一个</em> 能满足整个模式的可能的所有字符. 要让它们停在 <em>第一个</em> 可能的字符, 请在它们后面加上问号. 例如, 模式 <span class="regex">&lt;.+&gt;</span>(其中没有问号) 表示: "搜索一个 &lt;, 接着一个或多个任意字符, 然后是一个 &gt;". 要阻止该模式匹配 <em>整个</em> 字符串 <span class="subj"><span class="red"><strong>&lt;</strong></span>em&gt;text&lt;/em<span class="red"><strong>&gt;</strong></span></span>, 请在加号后面加上一个问号: <span class="regex">&lt;.+<span class="red">?</span>&gt;</span>. 这将导致匹配停在第一个 '&gt;' 处, 因此它只匹配第一个标签 <span class="subj"><span class="red"><strong>&lt;</strong></span>em<span class="red"><strong>&gt;</strong></span></span>.</p>
<p><strong>预测和回顾断言</strong>: 组 <span class="regex">(?=...)</span>, <span class="regex">(?!...)</span>, <span class="regex">(?&lt;=...)</span> 和 <span class="regex">(?&lt;!...)</span> 被称为 <em>断言</em>, 因为它们要求符合某个条件但不消耗任何字符. 例如, <span class="regex">abc(?=.*xyz)</span> 中含有预测断言, 它要求在字符串 abc 右边的某个位置存在字符串 xyz(如果不存在, 则匹配失败). <span class="regex">(?=...)</span> 被称为 <em>正</em> 预测断言, 因为它要求指定的模式存在. 相反, <span class="regex">(?!...)</span> 被称为 <em>负</em> 预测断言, 因为它要求指定的模式 <em>不</em> 存在. 同样地, <span class="regex">(?&lt;=...)</span> 和 <span class="regex">(?&lt;!...)</span> 分别是正的和负的 <em>回顾</em> 断言, 因为它们检查当前位置的 <em>左边</em> 而不是右边. 回顾比预测受到更多的限制, 因为它们不支持可变大小的限定符, 例如 <strong>*</strong>, <strong>?</strong> 和 <strong>+</strong>. 转义序列 <strong>\K</strong> 类似于回顾断言, 因为它会让前一个匹配的字符在最后的匹配字符串中省略. 例如, <span class="regex">foo\Kbar</span> 可以匹配 "foobar", 但报告匹配的结果为 "bar".</p>
<p><strong>相关</strong>: <a href="../commands/RegExMatch.htm">RegExMatch</a>, <a href="../commands/RegExReplace.htm">RegExReplace</a> 和 <a href="../commands/SetTitleMatchMode.htm">SetTitleMatchMode</a> 支持正则表达式.</p>
<p class="note"><strong>最后说明</strong>: 尽管这个页面涉及了大多数常用的正则表达式功能, 但是还有相当一部分您可能希望了解的其他功能没有提及, 例如条件子模式. 完整的 PCRE 手册请访问  <a href="http://www.pcre.org/pcre.txt">www.pcre.org/pcre.txt</a></p>

</body>
</html>