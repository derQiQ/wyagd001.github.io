<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>重映射按键 (键盘, 鼠标和操纵杆) | AutoHotkey v2</title>
<meta name="description" content="Free keyboard remapper that can also remap mouse and joystick buttons. It can also automate repetitive tasks by sending keystrokes &amp; mouse clicks.">
<meta name="keywords" content="keyboard,remapper,remap,remapping,keys,key,keystrokes,clicks,mouse,buttons,button,joystick,hotkeys,hotkey">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>重映射按键 <span class="headnote">(键盘, 鼠标和操纵杆)</span></h1>

<h2 id="toc">目录</h2>
<ul>
  <li><a href="#intro">简介</a></li>
  <li><a href="#Remap">重映射键盘和鼠标</a></li>
  <li><a href="#remarks">备注</a></li>
  <li><a href="#moving-the-mouse-cursor">通过键盘移动鼠标光标</a></li>
  <li><a href="#registry">使用注册表的 "扫描码映射" 功能进行重映射</a></li>
  <li><a href="#related">相关话题</a></li>
</ul>

<h2 id="intro">简介</h2>
<p><strong>限制</strong>: 下面描述的 AutoHotkey 重映射功能通常不如直接通过 Windows 注册表进行映射那么纯粹和有效. 对于每种方法的优点和缺点, 请参阅<a href="#registry">注册表重映射.</a>.</p>
<h2 id="Remap">重映射键盘和鼠标</h2>
<p>内置重映射功能的语法为 <code>OriginKey::DestinationKey</code>. 例如, 只包含下面这行内容的<a href="../Scripts.htm">脚本</a>会将 <kbd>A</kbd> 重映射成 <kbd>B</kbd>:</p>
<pre>a::b</pre>
<p>上面的例子并不改变 <kbd>B</kbd> 键本身. <kbd>B</kbd> 将继续发送 "b" 的键击, 除非把它重映射到其他内容, 如下面的示例所示:</p>
<pre>a::b
b::a</pre>
<p>上述例子中使用小写字母, 在大多数情况下建议这么做, 因为它也会映射相应的大写字母(即在 <kbd>CapsLock</kbd> "打开" 或 <kbd>Shift</kbd> 被按住时会发送大写形式). 与之相比, 在右边使用大写字母会强制发送大写形式. 例如, 下面的代码行在您输入 "a" 或 "A" 时都会产生大写字母 B(只要 <kbd>CapsLock</kbd> 是关闭的):</p>
<pre>a::B</pre>
<p>相反, 在发送按键时, 将自动释放包含在左侧但不包含在右侧的任何修饰符. 例如, 以下两行会产生一个小写字母 "b", 当你按下 Shift+A 或 Ctrl+A 时:</p>
<pre>A::b
^a::b</pre>

<h3 id="RemapMouse">鼠标重映射</h3>
<p>要重映射鼠标而不是键盘, 请使用相同的方法. 例如:</p>
<table class="info">
  <tr>
    <th style="min-width: 11em;">示例</th>
    <th abbr="Descr">描述</th>
  </tr>
  <tr>
    <td><code>MButton::Shift</code></td>
    <td>把鼠标中键映射成 <kbd>Shift</kbd>.</td>
  </tr>
  <tr>
    <td><code>XButton1::LButton</code></td>
    <td>把第四个鼠标按钮映射成鼠标左键.</td>
  </tr>
  <tr>
    <td><code>RAlt::RButton</code></td>
    <td>把右 <kbd>Alt</kbd> 映射成鼠标右键.</td>
  </tr>
</table>

<h3 id="other-useful-remappings">其他有用的映射</h3>
<table class="info">
  <tr>
    <th style="min-width: 11em;">示例</th>
    <th abbr="Descr">描述</th>
  </tr>
  <tr>
    <td><code>CapsLock::Ctrl</code></td>
    <td>把 <kbd>CapsLock</kbd> 映射成 <kbd>Ctrl</kbd> 键. 要保留打开及关闭 <kbd>CapsLock</kbd> 的功能, 需先包含重映射 <code>+CapsLock::CapsLock</code>. 这样, 当按住 <kbd>Shift</kbd> 并按下 <kbd>CapsLock</kbd> 时, 可切换 <kbd>CapsLock</kbd> 的开关状态. 因为两个重映射均允许附加修饰键被按下, 额外指定的 <code>+CapsLock::CapsLock</code> 重映射必须优先放置以便能正常工作.</td>
  </tr>
  <tr>
    <td><code>XButton2::^LButton</code></td>
    <td>把第五个鼠标按钮(XButton2) 映射成 control-click.</td>
  </tr>
  <tr>
    <td><code>RAlt::AppsKey</code></td>
    <td>把右 <kbd>Alt</kbd> 映射成 <kbd>Menu</kbd>(这是打开上下文菜单的按键).</td>
  </tr>
  <tr>
    <td><code>RCtrl::RWin</code></td>
    <td>把右 <kbd>Ctrl</kbd> 映射成右 <kbd>Win</kbd>.</td>
  </tr>
  <tr>
    <td><code>Ctrl::Alt</code></td>
    <td>把左右 <kbd>Ctrl</kbd> 映射成 <kbd>Alt</kbd>. 但是, 请参阅 <a href="#AltTab">alt-tab 的问题</a>.</td>
  </tr>
  <tr>
    <td><code>^x::^c</code></td>
    <td>把 <kbd>Ctrl</kbd>+<kbd>X</kbd> 映射成 <kbd>Ctrl</kbd>+<kbd>C</kbd>. 它也会让 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>X</kbd> 映射成 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd>, 等等.</td>
  </tr>
  <tr>
    <td><code>RWin::Return</code></td>
    <td>通过简单的<a href="../commands/Return.htm">return</a>, 来禁用右 <kbd>Win</kbd>.</td>
  </tr>
</table>
<p>您可以通过将这些示例复制到一个新的文本文件(如 "Remap") 中来尝试其中任何一个示例, 然后启动文件.</p>
<p>有关键和鼠标按钮名称的完整列表, 请参阅<a href="../KeyList.htm">按键列表</a>.</p>
<h2 id="remarks">备注</h2>
<p><a href="../commands/_HotIf.htm">#HotIf</a> 指令可用于仅在指定的窗口(或者当满足任何给定条件时) 激活选定的重映射. 例如:</p>
<pre>#HotIf WinActive("ahk_class Notepad")
a::b  <em>; 使 'a' 键发送 'b' 键, 但仅在记事本中有效.</em>
#HotIf  <em>; 这里让后续的重映射和热键对所有窗口生效.</em></pre>
<p>重映射按键或按钮在以下方面是 "完全的":</p>
<ul>
  <li>按住修饰符(例如 <kbd>Ctrl</kbd> 或 <kbd>Shift</kbd>) 时按下原始键, 会让那个修饰符对目标键生效. 例如, <code>b::a</code> 会在您按下 <kbd>Ctrl</kbd>+<kbd>B</kbd> 时产生 <kbd>Ctrl</kbd>+<kbd>A</kbd> 的效果.</li>
  <li><kbd>CapsLock</kbd> 通常会像普通键那样影响重映射的按键.</li>
  <li>按住目标键或按钮的时间和您持续按住原始键的时间一样长. 但是, 一些游戏不支持重映射; 此时, 键盘和鼠标的重映射没有效果.</li>
  <li>按住被重映射的按键时, 它们的目标键会自动重复(除非是把按键重映射为鼠标按钮).</li>
</ul>
<p id="HookHotkeys">尽管被重映射的按键可以触发普通热键, 但默认情况下它不能触发鼠标热键或<a href="../commands/_UseHook.htm">钩子热键</a>(请使用 <a href="../commands/ListHotkeys.htm">ListHotkeys</a> 来找出哪些热键使用了 "钩子"). 例如, 如果重映射 <code>a::b</code> 有效, 那么按下 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd> 会触发 <code>^!b</code> 热键, 但仅在 <code>^!b</code> 不是钩子热键的时候. 如果 <code>^!b</code> 是钩子热键, 而且您希望使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd> 来执行和 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>B</kbd> 相同的动作, 那么您可以把 <code>^!a</code> 定义为热键. 例如:</p>
<pre>a::b
^!a::
^!b::ToolTip "You pressed " A_ThisHotkey
</pre>
<p>或者, 使用 <a href="../commands/_InputLevel.htm">#InputLevel</a> 来覆盖此默认行为. 例如:</p>
<pre>#InputLevel 1
a::b

#InputLevel 0
^!b::ToolTip "You pressed " A_ThisHotkey
</pre>
<p id="SendPlay">如果在<a href="../Scripts.htm#auto">脚本启动时</a>使用了 <a href="../commands/SendMode.htm">SendMode</a>, 那么它会影响所有的重映射. 但是, 由于重映射使用 <a href="../commands/Send.htm#blind">Send "{Blind}"</a> 而 <a href="../commands/SendMode.htm">SendPlay 模式</a>不完全支持 {Blind}, 所以一些映射在 SendPlay 模式中可能无法正常运行(尤其是 <kbd>Ctrl</kbd>, <kbd>Shift</kbd>, <kbd>Alt</kbd> 和 <kbd>Win</kbd>). 要解决此问题, 当您脚本中含有重映射时请避免在<a href="../Scripts.htm#auto">脚本启动时</a>使用 <code>SendMode "Play"</code>; 而仅在整个脚本需要的地方使用 <a href="../commands/Send.htm#SendPlay">SendPlay</a> 函数而不是 Send. 或者, 您可以把您的重映射转换为热键(如下所述), 这样就显式调用 SendEvent 而不是 Send.</p>
<p id="EscapeBrace">如果 <em>DestinationKey</em> 是按键 <code>{</code>, 它必须进行<a href="EscapeChar.htm">转义</a>, 例如, <code>x::`{</code>. 否则它将被解释为<a href="../Hotkeys.htm">热键</a>函数的左大括号.</p>
<p id="actually">加载脚本时, 每个重映射会被转换为一对<a href="../Hotkeys.htm">热键</a>. 例如, 包含重映射 <code>a::b</code> 的脚本实际包含下面的两个热键:</p>
<pre>*<strong>a</strong>::
{
    SetKeyDelay -1   <em>; 如果目标键是鼠标按钮, 则使用 SetMouseDelay 代替.</em>
    Send "<a href="../commands/Send.htm#blind">{Blind}</a>{<strong>b</strong> DownR}"  <em>; <a href="../commands/Send.htm#DownR">DownR</a> 和 Down 相似, 不过使用 DownTemp 时脚本中后面的其他 Send 命令则不会假定 "b" 仍然处于按下的状态.</em>
}

*<strong>a up</strong>::
{
    SetKeyDelay -1  <em>; 请参阅下面的注意事项来了解在这段代码中两处 SetKeyDelay 都没有指定按键时长的原因.</em>
    Send "{Blind}{<strong>b</strong> Up}"
}</pre>
<p>但是, 上面的两个热键在下列环境中会发生变化:</p>
<ol>
  <li>当源按键为左 <kbd>Ctrl</kbd> 而目标键为 <kbd>Alt</kbd>, 会把 <code>Send "{Blind}{LAlt DownR}"</code> 这行语句替换为 <code>Send "{Blind}<strong>{LCtrl up}</strong>{LAlt DownR}"</code>. 如果原按键为右 <kbd>Ctrl</kbd> 也会如此, 除非使用了 <code>{RCtrl up}</code>.</li>
  <li>当键盘按键被重映射为鼠标按钮时(例如 <code>RCtrl::RButton</code>), 在上面的热键中会使用 SetMouseDelay 代替 SetKeyDelay. 而且, 上面的首个热键会被替换为下面的热键, 这样避免了由于键盘的自动重复功能生成的重复的鼠标点击:
    <pre>*RCtrl::
{
    SetMouseDelay -1
    if not GetKeyState("RButton")  <em>; 即鼠标右键还没有按下.</em>
        Send "{Blind}{RButton DownR}"
}</pre>
  </li>
  <li>当源按键为<a href="../Hotkeys.htm#combo">自定义组合键</a>时, 通配符修饰符(*) 被省略以允许热键工作.</li>
</ol>
<p>注意, SetKeyDelay 的第二个参数(<a href="../commands/SetKeyDelay.htm#dur">按下持续时间</a>) 在上面的热键中被省略了. 这是因为按下持续时间不适用于独立的按键按下或按键弹起事件, 例如 <code>{b down}</code> 和 <code>{b up}</code>. 但是, 它适用于修饰键(Shift, Ctrl, Alt 和 Win) 状态的改变, 这会影响像 <code>a::B</code> 或 <code>a::^b</code> 这样的重映射. 因此, 脚本在<a href="../Scripts.htm#auto">脚本启动</a>期间设置的任何按下持续时间将会应用于所有此类重映射.</p>
<p>由于重映射会被简单转换为上面描述的热键, 所以 <a href="../commands/Suspend.htm">Suspend</a> 也会影响它们. 同样地, <a href="../commands/Hotkey.htm">Hotkey</a> 函数可以禁用或修改重映射. 例如, 下面的两个函数会禁用重映射 <code>a::b</code>.</p>
<pre>Hotkey "*a", "Off"
Hotkey "*a up", "Off"</pre>
<p id="AltTab">Alt-tab 的问题: 如果您把一个按键或鼠标按钮映射为 <kbd>Alt</kbd>, 那么这个键很可能无法正确实现 alt-tab 的功能. 一个可能的解决方法是添加热键 <code>*Tab::Send "{Blind}{Tab}"</code> -- 但是需要注意这样很可能妨碍使用真正的 <kbd>Alt</kbd> 实现 alt-tab 的功能. 因此, 只有当您仅通过重映射的按键和/或 <a href="../Hotkeys.htm#alttab">alt-tab 热键</a>实现 alt-tab 功能时, 才应使用它.</p>
<p>除了<a href="../KeyList.htm">按键列表</a> 页面中的按键和鼠标按钮外, 源按键还可以是<a href="../KeyList.htm#SpecialKeys">特殊按键</a>页面描述的虚拟键(VKnn) 或扫描码(SCnnn). 对于目标键同样如此, 不过它还可以在虚拟键后指定扫描码. 例如, 在大多数键盘布局中 <code>sc01e::vk42sc030</code> 等同于 <code>a::b</code>.</p>
<p>要禁用按键而不进行重映射, 请把它设置为只含有 <a href="../commands/Return.htm">returns</a> 的热键. 例如, <code>F1::return</code> 会禁用 <kbd>F1</kbd>.</p>
<p>内置的重映射方法不支持下列按键:</p>
<ul>
  <li>鼠标滚轮(WheelUp/Down/Left/Right).</li>
  <li>"Pause" 不能作为目标键名(因为它匹配内置函数的名称). 请使用 <code>vk13</code> 或对应的扫描码代替.</li>
  <li>大括号 {} 不能作为目标键. 作为替代请使用 <a href="../commands/Send.htm#vk">VK/SC 方法</a>; 例如 <code>x::+sc01A</code> 和 <code>y::+sc01B</code>.</li>
</ul>
<h2 id="moving-the-mouse-cursor">通过键盘移动鼠标光标</h2>
<p>键盘可以用来移动鼠标光标, 如功能齐全的<a href="../scripts/index.htm#NumpadMouse">键盘到鼠标脚本</a>所示. 由于该脚本提供了鼠标平滑移动, 加速和其他特性, 所以如果您想使用键盘进行大量的鼠标操作, 那么推荐使用该脚本. 相比之下, 下面的例子是一个更简单的例子:</p>
<pre>*#up::MouseMove 0, -10, 0, "R"  <em>; Win+UpArrow 热键 =&gt; 上移光标</em>
*#Down::MouseMove 0, 10, 0, "R"  <em>; Win+DownArrow =&gt; 下移光标</em>
*#Left::MouseMove -10, 0, 0, "R"  <em>; Win+LeftArrow =&gt; 左移光标</em>
*#Right::MouseMove 10, 0, 0, "R"  <em>; Win+RightArrow =&gt; 右移光标</em>

*&lt;#RCtrl::  <em>; 左 Win + 右 Control =&gt; Left-click(按住 Control/Shift 来进行 Control-Click 或 Shift-Click).</em>
{
    SendEvent "{Blind}{LButton down}"
    KeyWait "RCtrl"  <em>; 防止键盘自动重复导致的重复鼠标点击.</em>
    SendEvent "{Blind}{LButton up}"
}

*&lt;#AppsKey::  <em>; 左 Win + AppsKey =&gt; Right-click</em>
{
    SendEvent "{Blind}{RButton down}"
    KeyWait "AppsKey"  <em>; 防止键盘自动重复导致重复的鼠标点击.</em>
    SendEvent "{Blind}{RButton up}"
}</pre>
<h2 id="registry">使用注册表的 "扫描码映射" 功能进行重映射</h2>
<p><strong>优点:</strong></p>
<ul>
  <li>注册表的重映射功能通常比 <a href="#Remap">AutoHotkey 的重映射</a>更加直接有效. 例如, 它能适应于更大范围的游戏, 它不存在 <a href="#AltTab">alt-tab 的问题</a>, 并且它能触发 AutoHotkey 的钩子热键(然而 AutoHotkey 的重映射需要<a href="#HookHotkeys">间接的方法</a>才行).</li>
  <li>如果您会手动修改注册表条目(下面进行阐述), 那么不需要任何额外的软件就可以重映射您的键盘. 即使您使用 <a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a> 来修改注册表条目, 那么完成后 KeyTweak 不需要一直保持运行(而 AutoHotkey 需要一直运行, 重映射才会生效).</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
  <li>注册表重映射比较不灵活: 每次修改映射都必须重启后才会生效.</li>
  <li>效果是全局的: 它不能创建针对特定用户, 应用程序或环境的重映射.</li>
  <li>它无法发送含修饰键 <kbd>Shift</kbd>, <kbd>Ctrl</kbd>, <kbd>Alt</kbd> 或 <kbd>AltGr</kbd> 的组合键. 例如, 它不能把小写字符映射为大写字符.</li>
  <li>它只支持键盘(AutoHotkey 还支持<a href="#RemapMouse">鼠标重映射</a>和一些<a href="RemapJoystick.htm">受限的操纵杆重映射</a>).</li>
</ul>
<p><strong>如何将更改应用于注册表:</strong> 使用注册表重映射按键至少有两种方法:</p>
<ol>
  <li>使用像 <a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a>(免费软件) 这样的程序可视化重映射按键. 它会自动修改注册表.</li>
  <li>通过手动创建的 .reg 文件(纯文本) 重映射按键并把其导入注册表. 演示的例子, 请参阅 <a href="https://www.autohotkey.com/forum/post-56216.html#56216">www.autohotkey.com/forum/post-56216.html#56216</a></li>
</ol>
<h2 id="related">相关话题</h2>
<ul>
  <li><a href="../KeyList.htm#Joystick">按键和鼠标按钮列表</a></li>
  <li><a href="../commands/GetKeyState.htm">GetKeyState</a></li>
  <li><a href="RemapJoystick.htm">重映射操纵杆</a></li>
</ul>
</body>
</html>