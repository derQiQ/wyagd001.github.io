<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>程序的使用 | AutoHotkey v2</title>
<meta name="description" content="Learn details about creating, editing and running a script, the tray icon, the main window, command line usage, portability and installer options." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>
<h1>程序的使用</h1>
<p>AutoHotkey 程序本身不做任何事情; 它需要一个脚本来告诉它该做什么. 脚本只是一个简单的以 <code>.ahk</code> 作为扩展名的文本文件, 其中包含了程序的指令, 像配置文件, 但功能更强大. 一个脚本可以执行一个动作然后退出, 但大多数脚本定义了一些<a href="Hotkeys.htm">热键</a>, 当热键按下时, 热键后面跟着的一个或多个动作将会执行.</p>
<pre>#z::Run "https://www.autohotkey.com"  <em>; Win+Z</em>

^!n::  <em>; Ctrl+Alt+N</em>
{
    if WinExist("Untitled - Notepad")
        WinActivate
    else
        Run "Notepad"
}</pre>
<p><strong>提示:</strong> 如果您的浏览器支持, 当你将鼠标悬停在代码块上面时, 您可以通过点击代码块右上角的按钮来下载任何代码块(如上面的代码块) 作为脚本文件.</p>

<h2 id="toc">目录</h2>
<ul>
  <li><a href="#create">创建脚本</a></li>
  <li><a href="#edit">编辑脚本</a></li>
  <li><a href="#run">运行脚本</a></li>
  <li><a href="#tray-icon">托盘图标</a></li>
  <li><a href="#main-window">主窗口</a></li>
  <li><a href="#embedded-scripts">嵌入脚本</a></li>
  <li><a href="#cmd">命令行用法</a></li>
  <li><a href="#portability">AutoHotkey.exe 的可移植性</a></li>
  <li><a href="#launcher">启动器</a></li>
  <li><a href="#dash">Dash</a></li>
  <li><a href="#newscript">新建脚本</a></li>
  <li><a href="#install">安装</a>
  <ul>
    <li><a href="#Installer_uiAccess">以 UI 访问权限运行</a></li>
  </ul></li>
</ul>

<h2 id="create">创建脚本</h2>
<p>有几种常见的方法来创建脚本文件:</p>
<ul>
  <li>在记事本(或你选择的<a href="commands/Edit.htm#Editors">文本编辑器</a>) 中, 使用 <code>.ahk</code> 文件扩展名保存文件. 在某些系统上, 您可能需要将文件名用引号括起来, 以确保编辑器不会添加其他扩展名(例如 .txt).
<p class="note">如果文件包含非 ASCII 字符, 请确保将文件保存为带有 BOM(字节顺序标记) 的 UTF-8. 有关详情, 请参阅<a href="FAQ.htm#nonascii">常见问题(FAQ)</a>.</p></li>
  <li>在资源管理器, 希望保存脚本的文件夹中的空白区域右键单击, 然后选择 <strong>新建</strong> 和 <strong>AutoHotkey Script</strong>. 然后, 您可以输入脚本的名称(注意, 如果 <code>.ahk</code> 扩展名可见时, 请不要删掉它).</li>
</ul>
<p class="note">有关如何编写脚本的详细信息, 请参阅<a href="Language.htm">脚本语言</a>.</p>

<h2 id="edit">编辑脚本</h2>
<p>要打开脚本进行编辑, 请右键单击脚本文件, 然后选择 <strong>Edit Script(编辑脚本)</strong>. 如果脚本已经在运行, 您可以使用 <a href="commands/Edit.htm">Edit(编辑)</a> 函数或右键单击脚本的<a href="#tray-icon">托盘图标</a>并选择 <strong>Edit Script(编辑脚本)</strong>. 默认情况下, 这将打开记事本, 但可以通过写入注册表来更换编辑器, 如<a href="commands/Edit.htm#ExDefaultEditor">此例</a>所示. 当然, 您可以先打开文本编辑器, 然后像打开其他任何文本文件一样打开脚本.</p>
<p>编辑脚本保存后, 您必须运行或 <a href="commands/Reload.htm">reload(重新加载)</a> 脚本以使更改生效. 正在运行的脚本通常可以通过其<a href="#tray-icon">托盘菜单</a>重新加载.</p>

<h2 id="run">运行脚本</h2>
<p>安装了 AutoHotkey 后, 有几种运行脚本的方法:</p>
<ul>
<li>双击资源管理器中的脚本文件(或脚本文件的快捷方式).</li>
<li>在命令行中调用 AutoHotkey.exe, 并将该脚本的文件名(路径) 作为<a href="Scripts.htm#cmd">命令行参数</a>.</li>
<li>创建<a href="Scripts.htm#defaultfile">默认脚本</a>后, 通过 "开始" 菜单中的快捷方式启动 AutoHotkey 以运行它.</li>
<li>如果 AutoHotkey 固定在 Windows 7 或更高版本系统的任务栏或 "开始" 菜单上, 则可以通过程序跳转列表打开最近的或已固定的脚本.</li>
</ul>
<p>大多数脚本只有在运行时才会起作用. 使用<a href="#tray-icon">托盘菜单</a>或 <a href="commands/ExitApp.htm">ExitApp</a> 函数退出脚本. 当 Windows 关闭时, 脚本也被迫退出. 要将脚本配置为在用户登录后自动启动, 最简单的方法是在 <a href="Variables.htm#Startup">Startup(启动)</a> 文件夹中放置脚本文件的快捷方式.</p>
<p>脚本也可以<a href="Scripts.htm#ahk2exe">编译</a>; 即与 AutoHotkey 二进制文件结合在一起, 形成一个独立的可执行(.exe) 文件.</p>

<h2 id="tray-icon">托盘图标</h2>
<p>默认情况下, 每个脚本都将自己的图标添加到任务栏通知区域(通常称为托盘).</p>
<p>托盘图标通常如下所示(但脚本 <a href="commands/Pause.htm">paused(暂停)</a> 或 <a href="commands/Suspend.htm">suspended(挂起)</a> 时颜色或字母会更改): <img src="static/ahk16.png" alt="H"></p>
<p>右键单击托盘图标以显示托盘菜单, 默认情况下具有以下选项:</p>
<ul>
<li>Open - (打开) - 打开脚本的<a href="#main-window">主窗口</a>.</li>
<li>Help - (帮助) - 打开 AutoHotkey 离线帮助文件.</li>
<li>Window Spy - (窗口监视器) - 显示关于窗口的各种信息.</li>
<li>Reload Script - (重载脚本) - 请参阅 <a href="commands/Reload.htm">Reload</a>.</li>
<li>Edit Script - (编辑脚本) - 请参阅 <a href="commands/Edit.htm">Edit</a>.</li>
<li>Suspend Hotkeys - (挂起热键) - <a href="commands/Suspend.htm">Suspend</a> 或取消挂起热键.</li>
<li>Pause Script - (暂停脚本) - <a href="commands/Pause.htm">Pause</a> 或取消暂停脚本.</li>
<li>Exit - (退出) - 退出脚本.</li>
</ul>
<p>默认情况下, 双击托盘图标显示脚本的<a href="#main-window">主窗口</a>.</p>
<p>可以自定义托盘图标和菜单的行为和外观:</p>
<ul>
  <li><a href="Variables.htm#TrayMenu">A_TrayMenu</a> 返回 <a href="objects/Menu.htm">Menu 对象</a>, 可以用来自定义托盘菜单.</li>
  <li><a href="Variables.htm#IconHidden">A_IconHidden</a> 或 <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> 指令可用于隐藏(或显示) 托盘图标.</li>
  <li><a href="Variables.htm#IconTip">A_IconTip</a> 可以为托盘图标分配新的工具提示文本.</li>
  <li><a href="commands/TraySetIcon.htm">TraySetIcon</a> 可以用来改变图标.</li>
</ul>

<h2 id="main-window">主窗口</h2>
<p>脚本的主窗口通常是隐藏的, 但可以通过<a href="#tray-icon">托盘图标</a>或下面列出的函数之一显示, 以获得对调试脚本有用的信息. <strong>View</strong> 菜单下的项目控制主窗口显示的内容:</p>
<ul>
<li>Lines most recently executed - (最近执行的行) - 请参阅 <a href="commands/ListLines.htm">ListLines</a>.</li>
<li>Variables and their contents - (变量和它们的内容) - 请参阅 <a href="commands/ListVars.htm">ListVars</a>.</li>
<li>Hotkeys and their methods - (热键和它们的方法) - 请参阅 <a href="commands/ListHotkeys.htm">ListHotkeys</a>.</li>
<li>Key history and script info - (按键历史和脚本信息) - 请参阅 <a href="commands/KeyHistory.htm">KeyHistory</a>.</li>
</ul>
<p><strong>已知问题:</strong> 当脚本显示<a href="commands/MsgBox.htm">消息框</a>或其他对话框时, 菜单项下的键盘快捷键不起作用.</p>
<p>内置变量 <a href="Variables.htm#ScriptHwnd">A_ScriptHwnd</a> 包含脚本主窗口的唯一 ID(HWND).</p>
<p>用 <a href="commands/WinClose.htm">WinClose</a>(甚至从另一个脚本或其他程序) 关闭这个窗口会导致脚本退出, 但大多数其他方法只是隐藏窗口并保持脚本运行.</p>
<p>最小化主窗口会使其自动隐藏. 这样做是为了防止将所有拥有的窗口(如 GUI 窗口或某些对话框窗口) 自动最小化, 但也有隐藏主窗口的任务栏按钮的效果. 要让主窗口正常最小化, 可以用 <a href="commands/OnMessage.htm">OnMessage</a> 覆盖默认的处理方式. 例如:</p>
<pre>; 这样可以防止主窗口在最小化时隐藏:
OnMessage 0x0112, PreventAutoMinimize <em>; WM_SYSCOMMAND = 0x0112</em>
OnMessage 0x0005, PreventAutoMinimize <em>; WM_SIZE = 0x0005
; 这样可以防止拥有的 GUI 窗口(但不包括对话框) 自动最小化:</em>
OnMessage 0x0018, PreventAutoMinimize
Persistent

PreventAutoMinimize(wParam, lParam, uMsg, hwnd) {
    if (uMsg = 0x0112 &amp;&amp; wParam = 0xF020 &amp;&amp; hwnd = A_ScriptHwnd) { <em>; SC_MINIMIZE = 0xF020</em>
        WinMinimize
        return 0 <em>; 防止主窗口隐藏.</em>
    }
    if (uMsg = 0x0005 &amp;&amp; wParam = 1 &amp;&amp; hwnd = A_ScriptHwnd) <em>; SIZE_MINIMIZED = 1</em>
        return 0 <em>; 防止主窗口隐藏.</em>
    if (uMsg = 0x0018 &amp;&amp; lParam = 1) <em>; SW_PARENTCLOSING = 1</em>
        return 0 <em>; 防止最小化拥有的窗口.</em>
}</pre>

<h3 id="title">主窗口标题</h3>
<p>脚本主窗口的标题会被 <a href="commands/_SingleInstance.htm">#SingleInstance</a> 和 <a href="commands/Reload.htm">Reload</a> 机制用来识别同一脚本的其他实例. <a href="commands/WinSetTitle.htm">更改标题</a>可防止脚本被这样识别. 默认的标题取决于脚本的加载方式:</p>
<table class="info">
  <tr><th>
加载于</th><th>标题表达式</th><th>示例</th></tr>
  <tr><td>.ahk 文件</td><td><code>A_ScriptFullPath " - AutoHotkey v" A_AhkVersion</code></td><td>E:\My Script.ahk - AutoHotkey v1.1.33.09</td></tr>
  <tr><td>主资源(编译的脚本)</td><td><code>A_ScriptFullPath</code></td><td>E:\My Script.exe</td></tr>
  <tr><td>任何其他资源</td><td><code>A_ScriptFullPath " - " A_LineFile</code></td><td>E:\My AutoHotkey.exe - *BUILTIN-TOOL.AHK</td></tr>
</table>
<p>下面的代码说明了如何由脚本本身决定默认的标题(但实际的标题可以用 <a href="commands/WinGetTitle.htm">WinGetTitle</a> 来检索):</p>
<pre>
title := A_ScriptFullPath
if !A_IsCompiled
    title .= " - AutoHotkey v" A_AhkVersion
<em>; 为了获得正确的结果, 必须由被执行的资源来计算,
; 而不是一个 #include(除非这个 #include 是由 Ahk2Exe 合并到脚本中的):</em>
else if SubStr(A_LineFile, 1, 1) = "*" &amp;&amp; A_LineFile != "*#1"
    title .= " - " A_LineFile
</pre>

<h2 id="embedded-scripts">嵌入脚本</h2>
<p>脚本可以被嵌入到一个标准的 AutoHotkey .exe 文件中, 方法是将它们作为 Win32(RCDATA) 资源来添加. 嵌入的脚本可以在命令行中指定, 也可以使用 <a href="commands/_Include.htm">#Include</a> 在资源名称后跟一个星号(*). 对于整数 ID, 资源名称必须是一个哈希符号(#) 后面是一个十进制数字.</p>
<p>程序可以自动从以下资源加载脚本代码, 如果存在于文件中:</p>
<table class="info">
  <tr><th>ID</th><th>Spec</th><th>Usage</th></tr>
  <tr>
    <td>1</td><td>*#1</td>
    <td>这是一种从 .exe 文件创建<a href="Scripts.htm#ahk2exe">编译脚本</a>的方法. 该脚本是自动执行的, 大多数命令行开关会被传递给脚本, 而不是由程序解释. 外部脚本和可选的嵌入式脚本可以通过使用 <a href="Scripts.htm#SlashScript">/script</a> 开关来执行.</td>
  </tr>
  <tr>
    <td>2</td><td>*#2</td>
    <td>如果存在, 该脚本会在程序加载的任何脚本之前自动 "included", 以及在 <a href="Scripts.htm#SlashInclude">/include</a> 指定的任何文件之前.</td>
  </tr>
</table>
<p>当主脚本的源是一个嵌入式资源时, 程序以 "编译脚本" 模式运行, 但 <a href="Variables.htm#AhkPath">A_AhkPath</a> 总是包含当前可执行文件的路径(与 <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a> 相同). 对于 *#1 以外的资源, 资源指定符会包含在<a href="#title">主窗口的标题</a>中, 以支持 <a href="commands/_SingleInstance.htm">#SingleInstance</a> 和 <a href="commands/Reload.htm">Reload</a>.</p>
<p>当从嵌入资源的代码中引用时, <a href="Variables.htm#LineFile">A_LineFile</a> 包含一个星号(*) 后跟资源名称.</p>

<h2 id="cmd">命令行用法</h2>
<p>有关命令行用法, 请参阅<a href="Scripts.htm#cmd">向脚本传递命令行参数</a>, 其中包括影响程序行为的命令行开关列表.</p>

<h2 id="portability">AutoHotkey.exe 的可移植性</h2>
<p>运行任何的 .ahk 脚本所需要的只是 AutoHotkey.exe 文件.</p>
<p>重命名 AutoHotkey.exe 会同时改变它<a href="Scripts.htm#defaultfile">默认</a>运行的脚本, 这是在没有安装 AutoHotkey 的计算机上运行脚本的一种可选方法. 例如, 在没有指定文件名时, 执行 <i>MyScript</i>.exe 会自动运行 <i>MyScript</i>.ahk, 但也能运行其他脚本.</p>

<h2 id="launcher">启动器</h2>
<p>启动器允许在一个系统上使用 v1 和 v2 脚本, 只有一个文件名扩展名, 而不必偏好一个版本或需要不同的启动脚本的方法. 它通过检查脚本以找到所需版本的线索, 然后定位一个适当的exe来运行脚本.</p>
<p>如果脚本包含 <a href="commands/_Requires.htm">#Requires</a> 指令, 启动器将寻找满足需求的 exe. 否则, 启动程序可选地检查语法. 也就是说, 它检查只在两个主要版本之一中有效的模式. 它可能发现的一些常见模式包括:</p>
<ul>
  <li>v1: <code>MsgBox, with comma</code>, <code>MsgBox % "no end percent"</code> 和 <code>Legacy = assignment</code>.</li>
  <li>v1: 没有大括号或函数定义的多行热键.</li>
  <li>常见指令如 #NoEnv 和 #If(v1) 或 <a href="commands/_HotIf.htm">#HotIf</a>(v2).</li>
  <li>v2: 通过<a href="Scripts.htm#continuation-expr">括号延续</a>或<a href="Scripts.htm#continuation-line">行末延续操作符</a>明确使用行延续.</li>
  <li>v2: 在表达式中明确使用 <code>'单引号'</code> 或 <a href="Variables.htm#fat-arrow">胖箭头 <code>=></code></a>.</li>
</ul>
<p>检测是保守的; 如果一个案例是模棱两可的, 通常应该被忽略.</p>
<p>在任何检测失败的情况下, 默认会显示一个菜单让用户选择一个版本. 这个默认值可以改变为启动 v1 或 v2.</p>
<p><strong>已知限制:</strong></p>
<ul>
  <li>只检查主文件.</li>
  <li>由于在 v1 中包含像 <code>/****/</code> 这样的行是合法的, 但在 v2 中行尾的 <code>*/</code> 只能关闭注释, 所以这样的行的存在可能会导致脚本的大部分被忽略(被启动器和 v1 解释器忽略).</li>
  <li>只检查语法, 不检查语义. 例如, <code>xyz,</code> 在 v2 中是无效的, 所以被认为是有效的 v1 命令. <code>xyz 1</code> 在 v2 中可能是一个函数语句, 但被认为也是有效的 v1 命令, 因此被忽略.</li>
  <li>由于被检测到的模式实际上是一个版本中的语法错误, 一个有实际语法错误或不正确的混合语法的脚本可能被错误地识别出来.</li>
</ul>
<p class="note"><strong>注意:</strong> 在主文件的顶部用 <a href="commands/_Requires.htm">#Requires</a> 声明所需的版本, 可以消除任何歧义.</p>

<h3 id="launcher-config">启动设置</h3>
<p>启动器可以通过启动设置GUI来启用、禁用或配置，该GUI可以通过dash访问 <a href="#dash">dash</a>.</p>
<p><em>使用特定的解释器运行所有脚本</em> 将禁用启动程序, 并允许用户选择使用哪个 exe 来运行所有脚本, 这是传统的方式. 请注意, 选择 v1 exe 将使其难以运行任何支持脚本, 除非通过开始菜单中的 "AutoHotkey" 快捷方式.</p>
<p><em>启动脚本时的自动检测版本</em> 将激活启动器. 其他设置可以控制启动器如何选择要使用的解释器.</p>

<h2 id="dash">Dash</h2>
<p>Dash 提供了对支持脚本和文档的访问. 它可以在安装后通过开始菜单中的 "AutoHotkey" 快捷方式打开, 或从安装目录 UX\ui-dash.ahk 直接运行. 目前它仅仅是一个包含以下项目的菜单, 但是它可以扩展为活动脚本或其他方便的功能提供控制.</p>
<ul>
  <li>New script(新建脚本): 从模板创建新脚本.</li>
  <li>Compile(编译): 打开 Ahk2Exe, 或提供自动下载和安装它.</li>
  <li>Help files (F1) (帮助文件): 显示一个菜单, 其中包含关于 v1 和 v2 的帮助文件和在线文档, 以及安装目录中找到的任何其他 CHM 文件.</li>
  <li>Window spy</li>
  <li>Launch settings(启动设置): 配置启动器.</li>
  <li>Editor settings(编辑设置): 设置 .ahk 文件的默认编辑器.</li>
</ul>
<p>注意, 尽管开始菜单快捷方式启动了 Dash, 如果它被固定在任务栏上(或在Windows 7或10的开始菜单上), 跳转列表将包括任何最近使用 <em>open</em>, <em>runas</em> 或 <em>UIAccess</em> 动词启动的脚本(通常通过资源管理器上下文菜单或双击文件来访问). 可以固定脚本以便于访问.</p>

<h2 id="newscript">新建脚本</h2>
<p>新建脚本 GUI 可以通过开始菜单中的 Dash 访问, 也可以在资源管理器中的文件夹中右键单击并选择新建 &rarr; AutoHotkey Script. 可以使用它从预先安装的或用户定义的模板创建一个新的脚本文件, 并可选择打开它进行编辑.</p>
<p>在列表中右键点击一个模板, 可以得到以下选项:</p>
<ul>
  <li>Edit template(编辑模板): 在默认编辑器中打开模板. 如果是预安装的模板, 则创建一个可编辑的副本, 而不是打开原始的.</li>
  <li>Hide template(隐藏模板): 将模板名称添加到一个模板列表中, 该模板将不会显示在 GUI 中. 要取消隐藏模板, 请从 <code>HKCU\Software\AutoHotkey\New\HideTemplate</code> 中删除对应的注册表值.</li>
  <li>Set as default(设置为默认值): 设置默认选择的模板.</li>
</ul>
<p>默认情况下, 除非按住 Ctrl 键，否则 GUI 会在创建文件后关闭.</p>
<p>其他设置可以通过 GUI 左下角的设置按钮来访问.</p>

<h3>模板</h3>
<p>模板文件从 UX\Templates (预安装的) 和 <em>%A_MyDocuments%</em>\AutoHotkey\Templates (用户自定义的) 中绘制, 使用用户定义的模板覆盖任何具有相同名称的预安装模板. 如果一个文件存在于 <em>%A_WinDir%</em>\ShellNew\Template.ahk, 它被显示为 "Legacy", 可以被用户定义的同名模板覆盖.</p>
<p>每个模板可以包含一个 INI 节, 如下所示:</p>
<pre>/*
[NewScriptTemplate]
Description = Descriptive text
Execute = true|false|1|0
*/</pre>
<p>如果如上面所示, INI 节以 <code>/*</code> 开始, 而以 <code>*/</code> 结束, 则它不包含在创建的文件中.</p>
<p><strong>Description</strong>(描述) 是可选的. 除了文件名之外, 该项也显示在 GUI 中.</p>
<p><strong>Execute</strong>(执行) 是可选的. 如果设置为 true, 执行模板脚本时 <code>A_Args[1]</code> 包含要创建的文件的路径, 而 <code>A_Args[2]</code> 包含 "Create" 或 "Edit", 这取决于用户单击的是哪个按钮. 模板脚本将创建文件并打开它进行编辑(如果适用的话). 如果模板脚本需要 <code>#include</code> 其他文件, 可以将它们放在子目录中, 以避免在模板列表中显示它们.</p>

<h2 id="install">安装</h2>
<p>这个安装程序和相关的脚本是为了允许多个版本的 AutoHotkey 共存. 安装程序提供的选项非常少, 因为大多数东西都可以在安装后进行配置. 只有以下选择必须在安装过程中做出:</p>
<ul>
  <li>安装在哪里.</li>
  <li>是为所有用户还是为当前用户安装.</li>
</ul>
<p>默认情况下, 安装程序将为所有用户安装到 "%A_ProgramFiles%\AutoHotkey". 这是推荐的, 因为 UI Access 选项要求程序安装在 Program Files 下. 如果安装程序还没有以管理员身份运行, 当点击安装按钮时, 它将尝试提升权限, 如按钮上的盾牌图标所显示的.</p>
<p>当前用户的安装不需要管理员权限，只要用户有对所选目录的写入权限。当前用户安装的默认目录是 "%LocalAppData%\Programs\AutoHotkey".</p>

<h3 id="install_v1">与 v1 同时安装</h3>
<p>同时安装 v1 和 v2, 有两种方式:</p>
<ol>
  <li>首先安装 v1, 然后安装 v2. 在这种情况下, v1 的文件被留在安装目录的根部, 以避免破坏任何依赖其当前路径的外部工具或快捷方式.</li>
  <li>将 v1 作为一个额外的版本来安装. 运行 v1.1.34.03 或更高版本的安装程序会有这个选项. 或者, 使用下面描述的 <code>/install</code> 开关. 每个版本都会安装到它自己的子目录中.</li>
</ol>
<p>运行 v1.1.34.02 或更早的安装程序(或使用 v1.1.34.03 或更新的自定义安装程序) 将覆盖 v2 安装程序在注册表中设置的一些值, 如版本号, 卸载程序条目和文件类型注册的部分. 它还会注册 v1 版的卸载程序, 该程序无法正确卸载两个版本. 要重新注册 v2, 请重新运行任何 v2 安装程序或使用 AutoHotkey32.exe 或 AutoHotkey64.exe 运行 UX\install.ahk.</p>

<h3 id="installdef">默认版本</h3>
<p>与 v1 安装不同, 在安装期间不会选择默认版本. 缺省值由启动器更动态地处理, 并且可以为每个用户配置.</p>

<h3 id="installcmd">使用命令行</h3>
<p class="warning"><strong>注意:</strong> v2 安装程序的命令行使用还没有最终完成, 在 v2.0 版本发布之前可能会有所改变. v1 安装程序中提供的一些选项还没有重新实现.</p>
<p>如果检测到冲突(例如正在运行的脚本或要覆盖的无法识别的文件, 在安装过程中可能会显示一些提示. 不支持静默模式.</p>
<p>如果要安装到 <em>DESTINATION</em> 目录, 请在源目录内执行以下命令:</p>
<pre>AutoHotkey32.exe UX\install.ahk /to "%DESTINATION%"</pre>
<p>要从 <em>SOURCE</em> 安装额外的版本, 请在当前安装目录中执行以下命令(根据需要调整 AutoHotkey32.exe 的路径):</p>
<pre>AutoHotkey32.exe UX\install.ahk /install "%SOURCE%"</pre>
<p>上面的完整命令字符串在 under <code>HKLM\Software\AutoHotkey</code> 或 <code>HKCU\Software\AutoHotkey</code> 下 <em>InstallCommand</em> 注册, 其中 <code class="no-highlight">%1</code> 作为源目录的替代. 使用这个注册表值可能更具有前瞻性.</p>
<p>重新注册当前安装:</p>
<pre>AutoHotkey32.exe UX\install.ahk</pre>
<p>卸载:</p>
<pre>AutoHotkey32.exe UX\install.ahk /uninstall</pre>
<p>或者, 从以下注册表键中读取 <em>QuietUninstallString</em> 值, 并执行它:</p>
<pre>HKLM\Microsoft\Windows\CurrentVersion\Uninstall\AutoHotkey
HKCU\Microsoft\Windows\CurrentVersion\Uninstall\AutoHotkey</pre>

<h3 id="Installer_IsHostApp">任务栏按钮</h3>
<p>v2 安装程序没有提供分离任务栏按钮的选项. 以前, 这是通过将每个 AutoHotkey 可执行文件注册为<a href="https://msdn.microsoft.com/en-us/library/ee872121#APPLICATIONS">宿主程序(IsHostApp)</a> 来实现的, 但这种方法有局限性, 当安装多个版本时, 就变得不容易管理. 作为替代, 每个脚本应该设置其进程或窗口的 <a href="https://docs.microsoft.com/en-us/windows/win32/shell/appids">AppUserModelID</a> 来控制分组.</p>

<h3 id="Installer_uiAccess">以 UI Access 运行</h3>
<p>当安装在 Program Files 时, 安装程序会创建一组额外的 AutoHotkey exe 文件, 可用于解决一些<a href="FAQ.htm#uac">常见的 UAC 相关问题</a>. 这些文件以 "_UIA.exe" 为后缀. 当管理员使用这些 UIA.exe 文件中的一个来运行脚本时, 脚本能够与以管理员权限运行的程序的窗口进行交互, 而不需要脚本本身以管理员权限来运行.</p>
<p>安装程序执行如下操作:</p>
<ul>
  <li>复制每个 AutoHotkey*.exe 为 AutoHotkey*_UIA.exe.</li>
  <li>在每个 UIA 文件的嵌入式清单(manifest) 中设置 <a href="https://msdn.microsoft.com/en-us/library/ee671610">uiAccess 属性</a>.</li>
  <li>创建名为 "AutoHotkey" 的自签名数字证书, 然后签名每个 UIA 文件.</li>
  <li>注册 <em>UIAccess</em> 外壳动词, 在资源管理器的上下文菜单中显示为 "Run with UI access"(以 UI 权限运行). 默认情况下, 这会执行<a href="#launcher">启动器</a>, 它会尝试选择一个适当的 UIA.exe 文件来运行脚本.</li>
</ul>
<p><a href="#launcher">启动器</a>也可以配置为默认情况下使用 UI 权限运行 v1 脚本, v2 脚本或两者, 但如果所选版本和构建不存在 UIA.exe 文件, 则此选项无效.</p>
<p>脚本需要其他脚本以 UI 权限运行, 可以简单地 <a href="commands/Run.htm">Run</a>(运行) 对应的 UIA.exe 文件加上正常的<a href="#cmd">命令行参数</a>. 另外, 如果注册了 <em>UIAccess</em> 外壳动词, 它可以通过 Run 使用. 例如: <code>Run '*UIAccess "Script.ahk"'</code></p>
<p><strong>已知限制</strong>:</p>
<ul>
  <li>UIA 只会影响信任区域的文件; 比如 Program Files 的子目录.</li>
  <li>如果没有注册程序发布者用于签名的数字证书, 那么 UIA.exe 文件不能在其他计算机上运行.</li>
  <li>由于安全限制, UIA.exe 文件无法通过 CreateProcess 启动. 不过可以用 ShellExecute 替代. 内置的 <a href="commands/Run.htm">Run</a> 命令将会自动尝试以这两种方式运行.</li>
  <li>UIA.exe 文件不可修改, 否则无法通过文件的数字签名验证.</li>
  <li>由于 UIA 程序和其他程序具有不同的 "integrity level(可信级别)", 它们仅可通过其他的 "UIA 程序" 来注册对象. 比如, <code><a href="commands/ComObjActive.htm">ComObjActive</a>("Word.Application")</code> 将会失败, 因为 Word 并不是一个 UI Access 标记的程序.</li>
  <li>由于安全限制, 脚本自身的窗口无法自动视为 "无 UIA 程序或脚本".</li>
  <li>运行使用鼠标钩子的 "非 UIA 脚本" 时(类似简单的出现了 <code>InstallMouseHook</code> 指令), 鼠标热键会在由 UIA 脚本创建的窗口中失效, 即使热键为 "UIA 脚本" 自身定义的. 可行的解决办法是: 确保 "UIA 脚本" 最后一个加载.</li>
</ul>
<p>有关详情, 请参阅 <a href="https://www.autohotkey.com/board/topic/70449-enable-interaction-with-administrative-programs/">Enable interaction with administrative programs</a> 论坛存档贴</p>

</body>
</html>