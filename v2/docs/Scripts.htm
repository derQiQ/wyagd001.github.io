<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>脚本 - 定义 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="Learn details about scripts in general, splitting long lines, compiling a script, passing command line parameters, codepage and debugging." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>脚本</h1>
<p>相关话题:</p>
<ul>
  <li><a href="Program.htm">程序的使用</a>: 在一般情况下, 如何使用 AutoHotkey.</li>
  <li><a href="Concepts.htm">概念和约定</a>: AutoHotkey 使用的各种概念的通俗解释.</li>
  <li><a href="Language.htm">脚本语言</a>: 有关语法的具体详细信息(如何编写脚本).</li>
</ul>

<h2 id="toc">目录</h2>
<ul>
  <li><a href="#intro">简介</a></li>
  <li><a href="#auto">脚本启动(自动执行线程)</a>: 在启动脚本时会立即执行, 并更改默认设置.</li>
  <li><a href="#continuation">把过长的行分割成一系列短行</a>: 这样可以提高脚本的可读性和可维护性.</li>
  <li><a href="#lib">脚本库文件夹</a></li>
  <li><a href="#ahk2exe">把脚本转换成 EXE(Ahk2Exe)</a>: 把 .ahk 脚本转换成可以在任何 PC 上运行的 .exe 文件.</li>
  <li><a href="#cmd">向脚本传递命令行参数</a>: A_Args 变量包含了传入的参数.</li>
  <li><a href="#cp">脚本文件代码页</a>: 在脚本中可靠地使用非 ASCII 字符.</li>
  <li><a href="#debug">调试脚本</a>: 如何找出无法正常工作的脚本中的问题.</li>
</ul>
<h2 id="intro">简介</h2>
<p>每个脚本都是纯文本文件, 其中包含了可由程序(AutoHotkey.exe) 执行的文本行. 脚本中还可以包含<a href="Hotkeys.htm">热键</a>和<a href="Hotstrings.htm">热字串</a>或者甚至完全由它们组成. 不过, 在不包含热键和热字串时, 脚本会在启动后从上往下按顺序执行其中的函数.</p>
<p>程序会把脚本逐行加载到内存中, 每行最多可以包含 16,383 个字符. 在加载过程中, 脚本会被<a href="misc/Performance.htm">优化</a>和检查. 将列出所有的语法错误, 更正它们后脚本才能运行.</p>

<h2 id="auto">脚本启动(自动执行线程)</h2>
<p>脚本加载完成后, <em>自动执行线程</em>在脚本的顶行开始执行, 直到被指示停止为止, 例如 <a href="commands/Return.htm">Return</a>, <a href="commands/ExitApp.htm">ExitApp</a> 或 <a href="commands/Exit.htm">Exit</a>. 脚本的物理结束也作为 <a href="commands/Exit.htm">Exit</a>.</p>
<p id="persistent">没有<a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, 可见的 <a href="objects/Gui.htm">GUI</a>, 活动的<a href="commands/SetTimer.htm">计时器</a>, <a href="commands/OnClipboardChange.htm">剪贴板监视器</a>和 <a href="commands/InputHook.htm">InputHook</a>, 并且没有调用 <a href="commands/Persistent.htm">Persistent</a> 函数的脚本, 将在完成启动后终止. 否则, 它会以空闲状态继续运行, 从而对热键, 热字串, <a href="objects/GuiOnEvent.htm">GUI 事件</a>, <a href="objects/Menu.htm">自定义菜单项目</a>和<a href="commands/SetTimer.htm">计时器</a>这些事件做出响应. 如果这些条件在启动完成后发生变化(例如, 禁用了最后一个计时器), 脚本可能会在最后一个正在运行的线程完成后或最后一个 GUI 关闭后退出.</p>
<p>每当任何新的<a href="misc/Threads.htm">线程</a>被启动时(不管是由<a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, <a href="commands/SetTimer.htm">计时器</a>还是其他事件启动的) 以下设置都会从自动执行线程中复制. 如果自动执行线程中没有设置, 则使用标准的默认值(与下面每个页面中注明的一样): <a href="commands/CoordMode.htm">CoordMode</a>, <a href="commands/Critical.htm">Critical</a>, <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>, <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="commands/FileEncoding.htm">FileEncoding</a>, <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/SendLevel.htm">SendLevel</a>, <a href="commands/SendMode.htm">SendMode</a>, <a href="commands/SetControlDelay.htm">SetControlDelay</a>, <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>, <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>, <a href="commands/SetRegView.htm">SetRegView</a>, <a href="commands/SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>, <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="commands/SetWinDelay.htm">SetWinDelay</a> 和 <a href="commands/Thread.htm">Thread</a>.</p>
<p>每个<a href="misc/Threads.htm">线程</a>都会保留其自身的上述设置的集合, 此对这些设置所做的更改不会影响其他线程.</p>
<p>上述某个函数的 "默认设置" 通常指的是自动执行线程的当前设置, 该线程的起始值与程序定义的默认设置相同.</p>
<p>传统上, 脚本的顶部被称为 <em>自动执行段</em>. 然而, 自动执行线程并不限于脚本的顶部. 在自动执行线程上调用的任何函数也可能影响默认设置. 由于在执行过程中遇到指令和函数, 热键, 热字串和类定义时都会被跳过, 因此有可能将启动代码放在每个文件中. 例如, 一组热键使用的全局变量可能会被初始化在这些热键的上方(甚至下方), 而不是在脚本的顶部.</p>

<h2 id="continuation">把长行分割成一系列短行</h2>
<p>长行可以分成一些小行, 以提高可读性和可维护性. 这样不会降低脚本的执行速度, 因为在脚本启动时这些短行会在内存中合并起来.</p>
<p>有三种方法, 通常可以组合使用:</p>
<ul>
  <li><a href="#continuation-line">延续运算符</a>(延续行): 以表达式运算符开始或结束一行, 将其连接到前或下一行.</li>
  <li><a href="#continuation-expr">延续闭环</a>(延续表达式): 在大多数情况下, 括在 (), [] 或 {} 中的子表达式可以自动跨越多行.</li>
  <li><a href="#continuation-section">延续片段</a>: 标记一组要合并在一起的行, 并添加其他选项, 例如在行之间插入什么文本(或代码).</li>
</ul>
<p id="continuation-line"><strong>延续运算符</strong>: 以逗号或任何其他<a href="Variables.htm#Operators">表达式运算符</a>(除了 ++ 和 --) 开头的行会自动与其正上方的行合并. 同样, 以表达式运算符结尾的行会自动与它下面的行合并. 在以下示例中, 第二行被附加到第一行, 因为它以逗号开头:</p>
<pre>FileAppend "This is the text to append.`n"   <em>; 这里可以使用注释.</em>
    <strong>,</strong> A_ProgramFiles "\SomeApplication\LogFile.txt"  <em>; 注释.</em></pre>
<p>同样地, 下列几行也会合并成单行, 因为最后两行以 "and" 或 "or" 开始:</p>
<pre>if Color = "Red" or Color = "Green"  or Color = "Blue"   <em>; 注释.</em>
    <strong>or</strong> Color = "Black" or Color = "Gray" or Color = "White"   <em>; 注释.</em>
    <strong>and</strong> ProductIsAvailableInColor(Product, Color)   <em>; 注释.</em></pre>
<p><a href="Variables.htm#ternary">三元运算符</a>也是个不错的选择:</p>
<pre>ProductIsAvailable := (Color = "Red")
    <strong>?</strong> false  <em>; 我们没有任何红色产品, 所以不用那么麻烦去调用函数.</em>
    <strong>:</strong> ProductIsAvailableInColor(Product, Color)</pre>
<p>下面的例子等同于上面的例子:</p>
<pre>FileAppend "This is the text to append.`n"<strong>,</strong>   <em>; 这里允许注释.</em>
    A_ProgramFiles "\SomeApplication\LogFile.txt"  <em>; 注释.</em>

if Color = "Red" or Color = "Green"  or Color = "Blue" <strong>or</strong>   <em>; 注释.</em>
    Color = "Black" or Color = "Gray" or Color = "White" <strong>and</strong>   <em>; 注释.</em>
    ProductIsAvailableInColor(Product, Color)   <em>; 注释.</em>

ProductIsAvailable := (Color = "Red") <strong>?</strong>
    false <strong>:</strong> <em>;  我们没有任何红色产品, 所以不用那么麻烦去调用函数.</em>
    ProductIsAvailableInColor(Product, Color)</pre>
<p>虽然上面示例中使用的缩进是可选的, 但它可以显示出哪些行属于上一行从而提高代码清晰度. 此外, 可以在上述示例中的任何行的末尾或行与行之间添加空行或<a href="Language.htm#comments">注释</a>.</p>
<p>延续操作符不能与自动替换热字符或 <a href="commands/_HotIf.htm">#HotIf</a> 以外的指令一起使用.</p>
<p id="continuation-expr"><strong>延续闭环</strong>: 如果一行中包含一个带有未闭合 <code>(</code>/<code>[</code>/<code>{</code>  的表达式或函数/属性定义, 那么它将与后续的行连接, 直到左, 右括号的数量平衡为止. 换句话说, 在大多数情况下, 用小括号(圆括号), 中括号(方括号), 大括号(花括号) 括起来的子表达式可以自动跨越多行. 例如:</p>
<pre>
myarray := [
  "item 1",
  "item 2",
]
MsgBox(
    "The value of item 2 is " myarray[2],
    "Title",
    "ok iconi"
    )
</pre>
<p>延续表达式可以包含两种类型的<a href="Language.htm#comments">注释</a>.</p>
<p>延续表达式可以包含普通的<a href="#continuation-section">延续片段</a>. 因此, 与任何包含表达式的行一样, 如果一行以非转义的左括号(<code>(</code>) 开头, 除非在同一行上有一个右括号(<code>)</code>), 否则它将被视为延续片段的开头.</p>
<p>引号括起来的字符串不能单独使用此方法跨越多行. 然而, 请参阅上面的内容.</p>
<p>通过括起来的方式进行延续可以与延续运算符结合使用. 例如:</p>
<pre>myarray :=  <em>; 赋值运算符会引起延续.</em>
[  <em>; 方括号括起以下两行.</em>
  "item 1",
  "item 2",
]</pre>
<p>如果程序判定行末尾的大括号(<code>{</code>) 应该被解释为块(<a href="commands/Block.htm#otb">OTB 样式</a>) 的开头而不是<a href="Language.htm#object-literal">对象标识符</a>的开头, 则行末尾的大括号不会导致延续. 具体来说(按优先级降序排列):</p>
<ul>
  <li>如果一个大括号前面有一个未闭合的 <code>(</code>/<code>[</code>/<code>{</code>, 那么它永远不会被解释为一个块的开始, 因为这会产生一个无效的表达式. 例如, 大括号在 <code>If ({</code> 中是对象标识符的开始.</li>
  <li>对象标识符不能合法地跟随 <code>)</code> 或 <code>]</code>, 因此, 如果大括号跟随这些符号中的任何一个(不包括空格), 它将被解释为块的开始(例如用于函数或属性定义).</li>
  <li>对于需要正文(主体)(因此支持 OTB) 的<a href="Language.htm#control-flow">控制流语句</a>, 仅当大括号前面有运算符时, 大括号才能成为对象标识符的开始, 如 <code>:= {</code> 或 <code>for x <strong>in</strong> {</code>. 特别是, 大括号在 <code>Loop {</code> 中始终是块的开始, 而 <code>If {</code> 和 <code>While {</code> 始终是错误.</li>
</ul>
<p>大括号可以安全地在任何不需要正文的函数调用, 表达式或控制流语句的行延续中使用. 例如:</p>
<pre>myfn() {
    return {
        key: "value"
    }
}</pre>
<p id="continuation-section"><strong>延续片段</strong>: 此方法应该用于合并大量行或当这些行不适合其他方法时. 虽然这个方法对于<a href="Hotstrings.htm">自动替换热字符串</a>特别有用, 但是它也可以用于任何<a href="Variables.htm#Expressions">表达式</a>. 例如:</p>
<pre><em>; 示例 #1:</em>
Var := "
(
一行文字.
默认情况下, 行与行之间的硬回车(`n) 也会被储存.
	这一行用制表符缩进; 默认情况下, 该制表符也会被储存.
此外, "引号" 会在适当时<a href="#continuation_quotes">自动转义</a>.
)"

<em>; 示例 #2:</em>
FileAppend "
(
第 1 行的文字.
第 2 行的文字. 默认情况下, 行与行之间存在换行符(`n).
)", A_Desktop "\My File.txt"</pre>
<p>在上面的示例中, 一系列的行在顶部和底部用一对括号括起来. 这被称为 <em>延续片段</em>. 注意, 右括号之后的任何代码也与其他行连接(没有任何分隔符), 但不包括左括号和右括号.</p>
<p>如果延续片段上面的行以<a href="Concepts.htm#names">命名</a>字符串结束, 而延续片段没有从引号字符串开始, 则自动插入一个空格, 将名称与延续片段的内容分隔开.</p>
<p id="continuation_quotes">如果延续片段以引号开始, 引号将自动转义(即它们被解释为原义字符), 如上面的示例所示. 否则, 引号的作用与正常情况相同; 也就是说, 延续片段可以包含带引号字符串的表达式.</p>
<p id="continuation_defaults">默认情况下, 根据延续片段中第一行的缩进, 省略前导空格或制表符. 如果第一行混合有空格和制表符, 则只将第一种类型的字符视为缩进. 如果任何行缩进小于第一行或使用不同的字符, 则该行上的所有前导空格都保持原样.</p>
<p>延续片段的默认行为可以通过在该片段的左括号的右侧包含以下一个或多个选项来覆盖改写. 如果存在多个选项, 请使用空格将每个选项与前一个选项分开. 例如: <code>( LTrim Join|</code>.</p>
<p id="Join"><strong>Join</strong>: 指定行与行之间连接的方式. 如果省略此选项, 那么除最后一行外的其他行后面都会跟一个换行符(`n). 如果指定单词 <em>Join</em> 自身, 则行与行之间直接连接而不添加任何字符. 否则, 单词 <em>Join</em> 后面可以紧跟最多 15 个字符. 例如, <code>Join`s</code> 会在除最后一行外的每行末尾插入一个空格. 另一个例子是 <code>Join`r`n</code>, 它会在行与行之间插入 CR+LF. 同样地, <code>Join|</code> 会在行之间插入管道符. 要让延续片段的最后一行也以连接字符串结尾, 请在它的右括号上方添加一个空行.</p>
<p id="LTrim"><strong>LTrim</strong>: 删除每行开头的所有的空格和制表符. 由于<a href="#continuation_defaults">默认的 "智能" 行为</a>, 这通常是不必要的.</p>
<p id="LTrim0"><strong>LTrim0</strong> (LTrim 后跟一个 0): 关闭每行开头的空格和制表符的删除.</p>
<p id="RTrim0"><strong>RTrim0</strong> (RTrim 后跟一个 0): 关闭每行末尾的空格和制表符的删除.</p>
<p id="CommentOption"><strong>Comments</strong> (或 <strong>Comment</strong> 或 <strong>Com</strong> 或 <strong>C</strong>): 在延续片段中允许<a href="Language.htm#comments">分号注释</a>(但不允许 <code>/*..*/</code>). 这些注释(以及它们左边的任何空格和制表符) 将完全从连接结果中省略, 而不是作为文本处理. 每个注释可以出现在一行的右侧, 也可以单独出现在新行上.</p>
<p id="accent"><strong>`</strong>(重音): 按按原义处理反引号, 而不是作为<a href="misc/EscapeChar.htm">转义字符</a>. 这还可以防止任何显式指定的转义序列(<code>`r</code> 和 <code>`t</code>) 的转换.</p>
<p id="non-continuation"><strong>(</strong> 或 <strong>)</strong>: 如果左括号或右括号出现在初始左括号的右侧(作为 <a href="#Join">Join</a> 选项的参数除外), 则该行将被重新解释为表达式, 而不是延续片段的开头. 这允许在行的开头使用 <code>(x.y)[z]()</code> 之类的表达式, 并且还允许<a href="#continuation-expr">多行表达式</a>以 <code>((</code> 或 <code>(MyFunc(</code> 在行的开头.</p>
<p>除非指定了<a href="#accent">重音(`) 选项</a>, 否则在延续片段内部支持诸如 `n(换行符) 和 `t(制表符) 之类的<a href="misc/EscapeChar.htm">转义序列</a>.</p>
<p>当 <a href="#CommentOption">comment 选项</a>不存在时, 分号和 /*..*/ 注释在延续片段的内部不受支持, 因为它们被视为原义文本. 但是, 注释可以包含在延续片段的底部和顶部行. 例如:</p>
<pre>FileAppend "   <em>; 注释.
; 注释.</em>
( LTrim Join    <em>; 注释.</em>
    &nbsp;; 本行 <strong>不是</strong> 注释; 它是原义的文字. 上面行包含 <i>注释</i> 的部分都是注释.
)", "C:\File.txt"   <em>; 注释.</em></pre>
<p>由上面可知, 延续片段中的分号不需要进行<a href="misc/EscapeChar.htm">转义</a>.</p>
<p>因为右括号表示延续片段的结束, 所以要让某一行以原义的右括号开头, 需要在其前面加上重音符/反引号: <code>`)</code>. 然而, 这不能与<a href="#accent">重音(`) 选项</a>结合使用.</p>
<p>一个延续片段后面可以紧跟着包含另一个延续片段的左括号的一行. 这样使得上面提到的选项可以在创建单行的过程中进行改变.</p>
<p>不支持通过 <a href="commands/_Include.htm">#Include</a> 的方法把延续片段各部分连接起来.</p>

<h2 id="lib">脚本库文件夹</h2>
<p>库文件夹提供了一些标准位置来保存其他脚本通过 <a href="commands/_Include.htm">#Include</a> 方式利用的共享脚本. 一个库脚本通常包含一个函数或类, 它被设计成以这种方式使用和重用. 将库脚本放置在其中的一个位置, 可以更容易地编写脚本, 这些脚本可以与他人共享, 并在多个设置中工作. 库的位置是:</p>
<pre><a href="Variables.htm#ScriptDir">A_ScriptDir</a> "\Lib\"  <em>; 本地库.</em>
<a href="Variables.htm#MyDocuments">A_MyDocuments</a> "\AutoHotkey\Lib\"  <em>; 用户库.</em>
"directory-of-the-currently-running-AutoHotkey.exe\Lib\"  <em>; 标准库.</em></pre>
<p>库文件夹按照上面显示的顺序进行搜索.</p>
<p>例如, 如果一个脚本包含行 <code>#Include &lt;MyLib&gt;</code>, 程序就会在用户库中搜索一个名为 "MyLib.ahk" 的文件. 如果在那里没有找到, 它就会在标准库中搜索它. 如果仍然没有找到匹配的函数, 并且函数的名称包含下划线(例如 <code>MyPrefix_MyFunc</code>), 则程序会在两个库中搜索名为 <code>MyPrefix.ahk</code> 的文件, 如果它存在, 则加载它. 这允许 <code>MyPrefix.ahk</code> 既包含 <code>MyPrefix_MyFunc</code> 函数, 也包含其他名称以 <code>MyPrefix_</code> 开头的相关函数.</p>
<p>虽然按照惯例, 一个库文件通常只包含一个与其文件名同名的函数或类, 但它也可能包含只被它调用的私有函数. 然而, 这些函数应该有相当不同的名字, 因为它们仍然在全局命名空间中; 也就是说, 它们可以在脚本的任何地方被调用.</p>

<h2 id="ahk2exe">把脚本转换成 EXE(Ahk2Exe)</h2>
<p>程序中包含了脚本编译器(由 fincs 提供, TAC109 的添加).</p>
<p>脚本编译完成后, 就成了一个独立的可执行文件; 也就是说, 可以在没有安装 AutoHotkey 的机器上运行. 编译过程中会创建一个包含下列文件的可执行文件: AutoHotkey 解释器, 脚本, 脚本<a href="commands/_Include.htm">包含</a>的任何文件, 以及通过 <a href="commands/FileInstall.htm">FileInstall</a> 函数内嵌的任何文件. 可以使用<a href="misc/Ahk2ExeDirectives.htm">编译器指令</a>包含其他文件.</p>
<p>Ahk2Exe 的使用方法如下:</p>
<ul>
  <li>
    <p><strong>GUI 界面</strong>: 运行开始菜单中的 "Convert .ahk to .exe" 项目. (调用 GUI 后, 在窗口显示之前可能会有一个停顿; 有关详情, 请参阅<a href="#information">背景信息</a>.)</p>
  </li>
  <li>
    <p><strong>右键点击</strong>: 在资源管理器中, 在任何一个 .ahk 文件上右键点击并选择 "Compile Script"(只有在安装 AutoHotkey 时选择了脚本编译器选项时才可用). 这样创建了与脚本具有相同的主文件名的 EXE 文件, 它稍后会出现在同一目录下. 注: EXE 文件的生成使用的是前面的方法 #1 中最后保存的自定义图标, .bin 文件以及<a href="#mpress">压缩</a>设置, 或者由脚本中任何相关的<a href="misc/Ahk2ExeDirectives.htm">编译器指令</a>指定.</p>
  </li>
  <li id="ahk2exeCmd">
    <p><strong>命令行</strong>: 编译器可以通过使用下面展示的参数从命令行中运行. 如果使用了任何命令行参数, 除非使用了 <code class="no-highlight">/gui</code>, 否则脚本会立即编译. 除了必须的 <code class="no-highlight">/gui</code> 或 <code class="no-highlight">/in</code> 参数外(二选一), 所有参数都是可选的.</p>
    <style>
      #param_pairs td:not(:last-child) {
        white-space: nowrap;
      }
    </style>
    <table class="info" id="param_pairs">
      <tr>
        <th abbr="Param">参数对</th>
        <th>释义</th>
      </tr>
      <tr id="SlashIn">
        <td>/in <i>script_name</i></td>
        <td>要编译的脚本的路径和名称. 如果使用任何其他参数, 这是强制性的, 除非使用了 <code class="no-highlight">/gui</code>.</td>
      </tr>
      <tr id="SlashOut">
        <td>/out <i>exe_name</i></td>
        <td>要创建的 .exe 的路径/名称. 默认值是输入文件的 directory\base_name 加上 .exe 的扩展名, 或脚本中任何相关的<a href="misc/Ahk2ExeDirectives.htm">编译器指令</a>指定.</td>
      </tr>
      <tr id="slashIcon">
        <td>/icon <i>icon_name</i></td>
        <td>要使用的图标文件. 默认为 GUI 界面中最后保存的图标, 或脚本中任何 <a href="misc/Ahk2ExeDirectives.htm#SetMainIcon">SetMainIcon</a> 编译器指令指定.</td>
      </tr>
      <tr id="SlashBase">
        <td>/base <i>file_name</i></td>
        <td>要使用的基文件(一个 .bin 文件或 .exe 文件). 默认是 GUI 界面中保存的最后一个基文件名, 或脚本中的任何 <a href="misc/Ahk2ExeDirectives.htm#Bin">Base</a> 编译器指令指定.</td>
      </tr>
      <tr id="SlashResourceID">
        <td>/resourceid <i>name</i></td>
        <td>指定一个非标准的资源 ID, 用于使用 <a href="#SlashBase">.exe 基文件</a>编译的主脚本(请参阅<a href="Program.htm#embedded-scripts">嵌入式脚本</a>). 数字型资源 ID 应该由一个哈希符号(#) 和一个十进制数字组成. 默认是 #1, 或脚本中的任何 <a href="misc/Ahk2ExeDirectives.htm#ResourceID">ResourceID</a> 编译器指令指定.</td>
      </tr>
      <tr id="SlashCp">
        <td>/cp <i>codepage</i></td>
        <td>覆盖用于读取脚本文件的默认代码页. 关于可能的值列表, 请参阅 <a href="https://docs.microsoft.com/en-au/windows/win32/intl/code-page-identifiers">Code Page Identifiers</a>. 注意, Unicode 脚本应该以字节顺序标记(BOM) 开始, 因此不需要使用这个参数.</td>
      </tr>
      <tr id="SlashCompress">
        <td>/compress <i>n</i></td>
        <td>是否<a href="#mpress">压缩</a> exe 文件? 0 = 不压缩, 1 = 使用 MPRESS(如果存在), 2 = 使用 UPX(如果存在). 默认值是 GUI 界面中最后保存的设置.</td>
      </tr>
      <tr id="SlashGui">
        <td>/gui</td>
        <td>显示 GUI 而不是立即编译. 其他参数可以用来覆盖上次在 GUI 中保存的设置. <code>/in</code> 在这种情况下是可选的.</td>
      </tr>
      <tr id="SlashGuiSilent">
        <td>/silent [verbose]</td>
        <td>禁用所有的消息框并将错误输出到标准错误流(stderr); 如果 stderr 失败, 则输出到标准输出流(stdout). 其他信息也会输出到 stdout. 可以选择输入 <code>verbose</code> 这个单词, 把状态信息也输出到 stdout.</td>
      </tr>
      <tr id="SlashAhk">
        <td class="warning"><strong>不推荐:</strong><br>/ahk <i>file_name</i></td>
        <td class="warning">编译脚本时使用的 AutoHotkey.exe 的 path\name.</td>
      </tr>
      <tr id="SlashMpress">
        <td class="warning"><strong>不推荐:</strong><br>/mpress <i>0or1</i></td>
        <td class="warning">使用 MPRESS <a href="#mpress">压缩</a> exe 文件? 0 = 不压缩, 1 = 压缩. 默认值是 GUI 界面中最后使用的设置.</td>
      </tr>
      <tr id="SlashBin">
        <td class="warning"><strong>不推荐:</strong><br>/bin <i>file_name</i></td>
        <td class="warning">要使用的 .bin 文件. 默认值是 GUI 界面中最后保存的 .bin 文件名.</td>
      </tr>
    </table>
    <p>例如:</p>
    <pre class="no-highlight">Ahk2Exe.exe /in "MyScript.ahk" /icon "MyIcon.ico"</pre>
  </li>
</ul>
<p>注意:</p>
<ul>
  <li>包含空格的参数必须用双引号括起来.</li>
  <li>编译通常不会提高脚本的性能.</li>
  <li><a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> 和 <a href="Variables.htm#AllowMainWindow">A_AllowMainWindow</a> 会影响已编译脚本的行为.</li>
  <li>如果脚本以编译的形式运行, 则内置变量 <a href="Variables.htm#IsCompiled">A_IsCompiled</a> 的值为 1. 否则为空.</li>
  <li>传递参数到 Ahk2Exe 后, 它会在标准输出中写入表示编译过程成功与否的消息. 尽管此消息不会显示在命令提示符中, 但可以通过像重定向输出到文件的方法 "捕获".</li>
  <li>此外, 当编译出错时, Ahk2Exe 还能返回退出代码, 它可以指示编译的错误类型. 这些错误代码可以在 <a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a> 上找到.</li>
</ul>
<p>编译器的源码和新版本可以在 <a href="https://github.com/AutoHotkey/Ahk2Exe">GitHub</a> 找到.</p>

<h3 id="ahk2exe-base">基础可执行文件</h3>
<p>每个编译的脚本 .exe 都是基于一个实现解释器的可执行文件. 包含在编译器目录中的基础文件的扩展名是 ".bin"; 这些版本的解释器不包含加载外部脚本文件的能力. 相反, 程序会寻找一个名为 "&gt;AUTOHOTKEY SCRIPT&lt;" 的 Win32(RCDATA) 资源并加载它, 如果没有找到, 则会失败.</p>
<p>标准的 AutoHotkey 可执行文件也可以作为编译脚本的基础, 通过嵌入一个 ID 为 1 的 Win32(RCDATA) 资源. 这使得编译后的脚本 .exe 可以与 <a href="#SlashScript">/script</a> 开关一起使用, 以执行除主嵌入脚本之外的其他脚本. 有关详情, 请参阅<a href="Program.htm#embedded-scripts">嵌入式脚本</a>.</p>

<h3 id="CompilerDirectives">脚本编译器指令</h3>
<p>脚本编译器指令允许用户指定如何编译脚本的细节. 其中的一些功能是:</p>
<ul>
  <li>能够改变版本信息(如名称, 描述, 版本...).</li>
  <li>能够为编译后的脚本添加资源.</li>
  <li>能够调整编译的一些杂项.</li>
  <li>能够从编译后的脚本中删除代码部分.</li>
</ul>
<p>有关详情, 请参阅<a href="misc/Ahk2ExeDirectives.htm">脚本编译器指令</a>.</p>

<h3 id="mpress">压缩编译的脚本</h3>
<p>Ahk2Exe 可以选择使用 MPRESS 或 UPX 这两款免费软件来压缩编译后的脚本. 如果 <strong>MPRESS.exe</strong> 和/或 <strong>UPX.exe</strong> 已被复制到安装 AutoHotkey 的 "Compiler" 子文件夹中, 则可以通过 <code>/compress</code> 参数或 GUI 设置来压缩 .exe 文件.</p>
<p><strong>MPRESS</strong> 官网(介绍与下载): <a href="http://www.matcode.com/mpress.htm">http://www.matcode.com/mpress.htm</a><br>MPRESS 镜像: <a href="https://www.autohotkey.com/mpress/">https://www.autohotkey.com/mpress/</a></p>
<p><strong>UPX</strong> 官网(介绍与下载): <a href="https://upx.github.io/">https://upx.github.io/</a></p>
<p><strong>注意:</strong> 压缩编译脚本可以保护脚本不被诸如记事本或 PE 编辑器这类的工具随意查看, 但并不能保护脚本源码不被专用的提取工具提取.</p>

<h3 id="information">背景信息</h3>
 <p>支持以下文件夹结构, 其中 <code>Ahk2Exe.exe</code> 的运行版本在下面所示的第一个 \Compiler 目录中:</p>
<pre class="no-highlight">\AutoHotkey 
   AutoHotkeyA32.exe 
   AutoHotkeyU32.exe
   AutoHotkeyU64.exe
   \Compiler
      Ahk2Exe.exe  <em>; Ahk2Exe 的主版本</em>
      ANSI 32-bit.bin
      Unicode 32-bit.bin
      Unicode 64-bit.bin
   \AutoHotkey v2.0-a135
      AutoHotkey32.exe
      AutoHotkey64.exe
      \Compiler
   \v2.0-beta.1
      AutoHotkey32.exe
      AutoHotkey64.exe</pre>
<p>当 Ahk2Exe 启动时, 基文件搜索算法会运行很短的时间, 其工作原理如下:</p>
<p>在编译器的目录, 编译器的父目录和任何编译器同级的以 <code>AutoHotkey</code> 或 <code>V</code> 开头的目录中搜索符合的 AutoHotkey .exe 文件和所有的 .bin 文件, 但不在以 <code>AutoHotkey_H</code> 开头的目录中搜索. 递归搜索所选的目录. 任何找到的 AutoHotkey.exe 文件都被排除在外, 只留下诸如 AutoHotkeyA32.exe, AutoHotkey64.exe 等文件以及所有发现的 .bin 文件. 所有保留的 .exe 文件名称必须以 <code>AutoHotkey</code> 开头和文件描述包含 <code>AutoHotkey</code> 单词, 并且版本号必须 <code class="no-highlight">1.1.34+</code> 或 <code class="no-highlight">2.0-a135+</code>.</p>
<p>一个成功的编译还需要一个 AutoHotkey 解释器的版本(作为一个工具), 并且使用类似的算法来选择一个版本. 在大多数情况下, 所使用的解释器的版本将与用户为编译所选择的基文件的版本相匹配.</p>

<h2 id="cmd">向脚本传递命令行参数</h2>
<p>脚本支持命令行参数. 格式为:</p>
<pre>AutoHotkey.exe [<i>Switches</i>] [<i>Script Filename</i>] [<i>Script Parameters</i>]</pre>
<p>对于已编译脚本, 格式为:</p>
<pre>CompiledScript.exe [<i>Switches</i>] [<i>Script Parameters</i>]</pre>
<p><strong>Switches</strong>(开关): 下列零个或多个:</p>
<table class="info">
  <tr><th width="10%">开关</th><th>意义</th><th class="wrap" abbr="Compiled?" width="8%">支持编译脚本?</th></tr>
  <tr id="SlashF">
    <td>/force</td>
    <td>无条件强制启动, 忽略任何警告对话框. 和 <a href="commands/_SingleInstance.htm">#SingleInstance Off</a> 的效果相同.</td>
    <td>支持</td>
  </tr>
  <tr id="SlashR">
    <td>/restart</td>
    <td>指示脚本正在重新启动(这也能在脚本内部通过 <a href="commands/Reload.htm">Reload</a> 函数实现).</td>
    <td>支持</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut<br><br>/ErrorStdOut=<em>Encoding</em></td>
    <td>
      <p>把阻止脚本运行的语法错误发送到标准错误流(stderr) 而不显示在对话框中. 有关详情, 请参阅 <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a>.</p>
      <p>可以选择指定<a href="commands/FileEncoding.htm">编码</a>. 例如, <code>/ErrorStdOut=UTF-8</code> 在将消息写入 stderr 之前将其编码为 UTF-8.</p>
    </td>
    <td>不支持</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td>连接到调试客户端. 有关详情, 请参阅<a href="#idebug">交互调试</a>.</td>
    <td>不支持</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td>
      <p>覆盖用于读取脚本文件的默认代码页. 有关详情, 请参阅<a href="#cp">脚本文件代码页</a>.</p>
    </td>
    <td>不支持</td>
  </tr>
  <tr id="validate">
    <td>/Validate</td>
    <td>
      <p>AutoHotkey 加载脚本, 然后退出而不是运行它.</p>
      <p>默认情况下, 加载时的错误和警告会像往常一样显示. <a href="#ErrorStdOut">/ErrorStdOut</a> 开关可以用来抑制或捕获任何错误信息.</p>
      <p>如果脚本成功加载, 进程退出代码为零, 如果有错误, 则退出代码为非零.</p>
     </td>
     <td>不支持</td>
  </tr>
  <tr>
    <td>/iLib <em>"OutFile"</em></td>
    <td>
       <p><strong>过时的:</strong> 请使用 <a href="#validate">/validate</a> 代替.</p>
       <p>AutoHotkey 加载脚本但不运行. 在以前的 AutoHotkey 版本中, 自动导入文件的文件名被写入 <em>OutFile</em> 指定的文件中, 格式为 #Include 指令.</p>
      <p>如果输出文件存在, 它会被覆盖. <em>OutFile</em> 可以是 <code>*</code> 从而将输出写到标准输出中.</p>
      <p>如果脚本有语法错误, 那么输出文件可能为空. 程序退出代码可以检测这种情况; 如果这里有语法错误, 退出代码为 2. /ErrorStdOut 开关可用于抑制或捕获错误消息.</p>
    </td>
    <td>不支持</td>
  </tr>
  <tr id="SlashInclude">
    <td>/include <em>"IncFile"</em></td>
    <td>
      <p>在主脚本之前 <a href="commands/_Include.htm">Includes</a> 一个文件. 这个方法只能包含一个文件. 当脚本被<a href="commands/Reload.htm">重新加载</a>时, 这个开关会自动传递给新的实例.</p>
    </td>
    <td>不支持</td>
  </tr>
  <tr id="SlashScript">
    <td>/script</td>
    <td>
      <p>当与基于 .exe 文件的编译脚本一起使用时, 这个开关会使程序忽略主嵌入脚本. 这允许编译后的脚本 .exe 执行外部脚本文件或除主脚本以外的嵌入式脚本. 其他通常不被编译脚本支持的开关也可以使用, 但必须列在这个开关的右边. 例如:</p>
      <pre class="no-highlight">CompiledScript.exe /script /ErrorStdOut MyScript.ahk "Script's arg 1"</pre>
      <p>如果当前的可执行文件没有嵌入脚本, 这个开关是允许的, 但没有效果.</p>
      <p>基于 .bin 文件的编译脚本不支持这个开关.</p>
      <p>另请参阅: <a href="#ahk2exe-base">基础可执行文件(Ahk2Exe)</a></p>
    </td>
    <td>N/A</td>
  </tr>
</table>

<p id="defaultfile"><strong>Script Filename</strong>(脚本文件名): 如果不含 <em>Script Parameters</em>, 那么此参数可以省略. 省略时(例如, 如果您直接从开始菜单运行 AutoHotkey), 程序按以下顺序在这些位置查找一个名为 <code><i>AutoHotkey</i>.ahk</code> 的脚本文件:</p>
<ul>
  <li>包含 <a href="Variables.htm#AhkPath">AutoHotkey 可执行文件</a>的目录.</li>
  <li>当前用户的 <a href="Variables.htm#MyDocuments">文档(我的文档)</a> 目录.</li>
</ul>
<p>文件名 <code><i>AutoHotkey</i>.ahk</code> 取决于运行脚本的可执行文件的名称. 例如, 重命名 AutoHotkey.exe 为 MyScript.exe, 它将尝试查找 <code>MyScript.ahk</code>. 如果您运行不带参数的 AutoHotkey32.exe, 它将查找 AutoHotkey32.ahk.</p>
<p id="stdin">为文件名指定星号(*) 以从标准输入(stdin) 读取脚本文本. 这也使以下内容生效:</p>
<ul>
  <li><a href="Variables.htm#InitialWorkingDir">初始工作目录</a>用作 <a href="Variables.htm#ScriptDir">A_ScriptDir</a> 并定位<a href="Scripts.htm#lib">本地库文件夹</a>.</li>
  <li><a href="Variables.htm#ScriptName">A_ScriptName</a> 和 <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a> 都包含 "*".</li>
  <li><a href="commands/_SingleInstance.htm">#SingleInstance</a> 默认是关闭的.</li>
</ul>
<p>有关示例, 请参阅 <a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p><strong>Script Parameters</strong>(脚本参数): 要传递给脚本的字符串, 每个参数用空格分隔. 任何包含空格的参数都应该用引号括起来. 如果要将空字符串作为参数传递, 请指定两个连续的引号. 原义引号可以通过在它前面加上反斜杠(\") 来传递. 因此, 任何在加引号参数的末尾的反斜杠(如 "C:\My Documents<span class="red">\"</span>) 都被当作原义的引号(就是说, 脚本将接收到字符串 C:\My Documents<span class="red">"</span>). 要移除引号, 使用 <code>A_Args[1] := <a href="commands/StrReplace.htm">StrReplace</a>(A_Args[1], '"')</code></p>
<p id="cmd_args">传入参数, 如果存在, 作为数组存储在内置变量 <strong>A_Args</strong> 中, 可以使用<a href="Objects.htm#Usage_Simple_Arrays">数组语法</a>来访问. <code>A_Args[1]</code> 包含第一个参数. 下面的示例在传递给它的参数太少时退出脚本:</p>
<pre>if A_Args.Length &lt; 3
{
    MsgBox "脚本至少需要 3 个参数, 但它只接收到 " A_Args.Length " 个."
    ExitApp
}</pre>
<p>如果传递给脚本的参数数目不确定(可能是由于用户将一组文件拖放到脚本中), 则可以使用以下示例逐个提取它们:</p>
<pre>for n, param in A_Args  <em>; 对每个参数进行循环:</em>
{
    MsgBox "Parameter number " n " is " param "."
}
</pre>
<p>如果参数是文件名, 则可以使用以下示例将它们转换为大小写校正的长名称(与文件系统中存储的一致), 包括完整/绝对路径:</p>
<pre>for n, GivenPath in A_Args  <em>; 对每个参数 (或拖放到脚本上的文件) 进行循环:</em>
{
    Loop Files, GivenPath, "FD"  <em>; 包括文件和目录.</em>
        LongPath := A_LoopFileFullPath
    MsgBox "The case-corrected long path name of file`n" GivenPath "`nis:`n" LongPath
}</pre>

<h2 id="cp">脚本文件代码页</h2>
<p>为了使非 ASCII 字符能够正确地从文件中读取, 文件保存时使用的编码(通常由文本编辑器) 必须与 AutoHotkey 读取文件时使用的编码一致. 如果不匹配, 字符将被错误地解码. AutoHotkey 使用以下规则来决定使用哪种编码:</p>
<ul>
  <li>如果文件以 UTF-8 或 UTF-16(LE) 字节顺序标记开头, 则使用相应的代码页并且忽略 <a href="#CPn">/CP<i>n</i></a> 开关.</li>
  <li>如果在命令行中传递了 <a href="#CPn">/CP<i>n</i></a> 开关, 则使用代码页 <i>n</i>. 有关可能值的列表, 请参阅 <a href="https://docs.microsoft.com/en-au/windows/win32/intl/code-page-identifiers">Code Page Identifiers</a>.</li>
  <li>在其他所有情况下, 使用 UTF-8(此默认值不同于 AutoHotkey v1).</li>
</ul>
<p>注意这仅适用于 AutoHotkey 加载脚本的时候, 而不包括脚本自身的文件 I/O. <a href="commands/FileEncoding.htm">FileEncoding</a> 决定了脚本读取或写入文件时使用的默认编码, 然而 <a href="commands/IniRead.htm">IniRead</a> 和 <a href="commands/IniWrite.htm">IniWrite</a> 总是使用 UTF-16 或 ANSI.</p>
<p>由于所有的文本都被转换(必要时) 为<a href="Compat.htm#Format">原生的字符串格式</a>, 所以无效的或不存在于原生代码页中的字符会被替换为占位符: '&#65533;'. 这种情况只可能在脚本文件编码错误或用于保存和读取脚本的代码页不匹配时发生.</p>
<p>可以使用 <a href="commands/RegWrite.htm">RegWrite</a> 为资源管理器中运行的脚本设置默认代码页(例如双击脚本文件时):</p>
<pre><em>; 取消对下面适当的行的注释或让它们都保留注释
; 以重新设置为当前版本的默认代码页. 需要时可自行修改:
; codepage := 0        ; 系统默认的 ANSI 代码页
; codepage := 65001    ; UTF-8
; codepage := 1200     ; UTF-16
; codepage := 1252     ; ANSI Latin 1; 西欧(Windows)</em>
if (codepage != "")
    codepage := " /CP" . codepage
cmd := Format('"{1}"{2} "%1" %*', A_AhkPath, codepage)
key := "AutoHotkeyScript\Shell\Open\Command"
if A_IsAdmin    <em>; 为所有用户进行设置.</em>
    RegWrite cmd, "REG_SZ", "HKCR\" key
else            <em>; 仅为当前用户进行设置.</em>
    RegWrite cmd, "REG_SZ", "HKCU\Software\Classes\" key</pre>
<p>这里假定已经安装了 AutoHotkey. 如果没有, 则结果可能不理想.</p>

<h2 id="debug">调试脚本</h2>
<p>内置函数(如 <a href="commands/ListVars.htm">ListVars</a> 和 <a href="commands/Pause.htm">Pause</a>) 可以帮助你调试脚本. 例如, 把下面这两行临时插入精心选择的位置时, 可以在脚本中创建 "断点":</p>
<pre>ListVars
Pause</pre>
<p>当脚本执行到这两行时, 会显示所有变量当前包含的内容供你检查. 当你准备恢复时, 可以通过 File 或托盘菜单取消暂停. 然后脚本会继续执行, 直到遇到下一个 "断点"(如果有).</p>
<p>通常最好把这些 "断点" 插入到活动窗口对当前脚本没有影响的位置, 例如 WinActivate 函数的前一行. 这样当您取消暂停时脚本才可以正确恢复操作.</p>
<p>下列函数也可以用于调试: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> 和 <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>一些常见错误, 例如拼写错误或忘记 "global" 声明时, 可以使用<a href="commands/_Warn.htm">启用警告</a>检测到.</p>
<h3 id="idebug">交互调试</h3>
<p>通过受支持的 <a href="AHKL_DBGPClients.htm">DBGp 客户端</a>可以进行交互调试. 通常可以执行以下操作:</p>
<ul>
  <li>设置和移除断点 - 遇到<a href="https://en.wikipedia.org/wiki/Breakpoint">断点</a>时暂停执行.</li>
  <li>单步调试代码 - 逐语句, 逐过程或跳出函数.</li>
  <li>检查所有变量或指定的变量.</li>
  <li>查看正在运行的线程和函数的堆栈.</li>
</ul>
<p>注意在已编译脚本中此功能是禁用的.</p>
<p>要启用交互调试, 首先要运行受支持的调试器客户端, 然后使用命令行开关 <b>/Debug</b> 运行脚本.</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i> 和 <i>PORT</i> 可以省略. 例如, 下面的方式是等同的:</p>
<pre class="no-highlight">AutoHotkey /Debug "myscript.ahk"
AutoHotkey /Debug=localhost:9000 "myscript.ahk"</pre>
<p id="debug_attach">要向已经在运行的脚本附加调试器, 请向脚本发送消息, 如下所示:</p>
<pre>ScriptPath := "" <em>; 设置此变量为脚本的完整路径</em>
A_DetectHiddenWindows := true
if WinExist(ScriptPath " ahk_class AutoHotkey")
    <em>; 可选参数:
    ;   wParam  = 调试器客户端的 IPv4 地址, 为 32 位整数.
    ;   lParam  = 调试器客户端正在侦听的端口.</em>
    PostMessage DllCall("RegisterWindowMessage", "Str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>当调试器连接后, 通过发送 DBGp 命令 "detach", 可以在不终止脚本的情况下分离调试器.</p>

<h2 id="Script_Showcase">脚本展示</h2>
<p>请参阅<a href="scripts/index.htm">此页面</a>了解一些有用的脚本.</p>
</body>
</html>